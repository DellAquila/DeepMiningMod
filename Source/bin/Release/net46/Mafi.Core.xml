<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mafi.Core</name>
    </assembly>
    <members>
        <member name="M:Mafi.Core.Ai.Scripted.Actions.SetupTerrainDesignationsAction.#ctor(Mafi.Core.Prototypes.Proto.ID,Mafi.Core.Terrain.RectangleTerrainArea2i,Mafi.Core.Terrain.Designation.DesignationType)">
            <summary>
            Without mining tower. Area specified explicitly.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ai.Scripted.Actions.SetupTerrainDesignationsAction.#ctor(Mafi.Core.Entities.Static.StaticEntityProto.ID,Mafi.Option{System.String},Mafi.Core.Prototypes.Proto.ID,Mafi.Core.Terrain.Designation.DesignationType,Mafi.Core.Prototypes.Proto.ID)">
            <summary>
            With mining tower. Area matches given resource.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ai.Scripted.IScriptedAiPlayerAction.Description">
            <summary>
            A shot description of this action.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ai.Scripted.IScriptedAiPlayerAction.ActionCoreType">
            <summary>
            Returns a type of a type that inherits <see cref="T:Mafi.Core.Ai.Scripted.IScriptedAiPlayerActionCore"/> which will be instantiated
            via resolver and called. The first argument of the action core must be this class. Other arguments may be
            anything that resolver can provide.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ai.Scripted.IScriptedAiPlayerActionCore.Perform(Mafi.Core.Ai.Scripted.ScriptedAiPlayer)">
            <summary>
            Performs this action and returns whether this action was finished. If <c>false</c> is returned, this method
            will be called again in the next sim step, <c>true</c> denotes that the action was finished.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ai.Scripted.ScriptedAiPlayerConfig.StartAtStage">
            <summary>
            When specified, insta-build cheat will be enabled until specified stage to quickly skip previous stages.
            Default value 0 performs no skipping.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ai.Scripted.ScriptedAiPlayerConfig.TerminateAfterStage">
            <summary>
            When specified and positive, the player will terminate executing actions after specified stage was finished.
            Default value 0 (or any negative value) performs no termination.
            </summary>
        </member>
        <member name="M:Mafi.Core.TerrainAssertExtensions.IsPhantomChunk(Mafi.Assertion{Mafi.Core.Terrain.TerrainChunk},System.String)">
            <summary>
            Asserts that given tile is not phantom.
            </summary>
        </member>
        <member name="M:Mafi.Core.TerrainAssertExtensions.IsNotPhantomChunk(Mafi.Assertion{Mafi.Core.Terrain.TerrainChunk},System.String)">
            <summary>
            Asserts that given tile is not phantom.
            </summary>
        </member>
        <member name="M:Mafi.Core.TerrainAssertExtensions.IsPhantomTile(Mafi.Assertion{Mafi.Core.Terrain.TerrainTile},System.String)">
            <summary>
            Asserts that given tile is not phantom.
            </summary>
        </member>
        <member name="M:Mafi.Core.TerrainAssertExtensions.IsNotPhantomTile(Mafi.Assertion{Mafi.Core.Terrain.TerrainTile},System.String)">
            <summary>
            Asserts that given tile is not phantom.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Cargo.CargoDepot.Modules">
            <summary>
            Slots for modules. Index of a slot/module corresponds to position of the slot. Leftmost slot has index 0,
            rightmost slot has index m_modules.Length - 1 (looking from the side of the modules).
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Cargo.CargoDepot.CargoShip">
            <summary>
            The cargo ship that assigned to this depot.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.CargoDepot.ReplaceShipAndDestroyCurrent(Mafi.Core.Buildings.Cargo.Ships.CargoShip)">
            <summary>
            Called by the old ship to notify this depot that the new ship is ready.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.CargoDepotSetFuelSliderStepCmd.ImportStep">
            <summary>
            Negative if undefined.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.CargoDepotSetFuelSliderStepCmd.ExportStep">
            <summary>
            Negative if undefined.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Cargo.CargoDepotProto.NextTier">
            <summary>
            Next tier of depot (upgrade), if available.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.CargoDepotProto.m_cargoShipProtoId">
            <summary>
            Id of ship prototype used for the depot. This is specified as id and not directly as <see
            cref="P:Mafi.Core.Buildings.Cargo.CargoDepotProto.CargoShipProto"/>, because the ship proto may not yet exist at the time when <see
            cref="T:Mafi.Core.Buildings.Cargo.CargoDepotProto"/> is being created.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Cargo.CargoDepotProto.CargoShipProto">
            <summary>
            Prototype of cargo ship used to service the cargo depot.
            </summary>
        </member>
        <member name="T:Mafi.Core.Buildings.Cargo.CargoDepotProto.ModuleSlotPosition">
            <summary>
            Represents position of a cargo depot module slot relative to the depot.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.CargoDepotProto.ModuleSlotPosition.Origin">
            <summary>
            Position of the origin, the [0, 0] relative layout coordinate.
            Under identity transformation thi is the lowest x and y coordinates relative to the depot.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.CargoDepotProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.CargoDepotProto.ID.op_Implicit(Mafi.Core.Buildings.Cargo.CargoDepotProto.ID)~Mafi.Core.Entities.Static.StaticEntityProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Entities.Static.StaticEntityProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.CargoDepotProto.ID.op_Implicit(Mafi.Core.Buildings.Cargo.CargoDepotProto.ID)~Mafi.Core.Entities.EntityProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Entities.EntityProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.CargoDepotProto.ID.op_Implicit(Mafi.Core.Buildings.Cargo.CargoDepotProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="T:Mafi.Core.Buildings.Cargo.Modules.CargoDepotManager">
            <summary>
            Binds <see cref="T:Mafi.Core.Buildings.Cargo.Modules.CargoDepotModule"/> to <see cref="T:Mafi.Core.Buildings.Cargo.CargoDepot"/> and manages the amount of available ships.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.Modules.CargoDepotManager.CanSpawnShipForCargoDepot">
            <summary>
            Called by depot when trying to request a ship.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.Modules.CargoDepotManager.ReleaseShipFromDepot">
            <summary>
            Called by a ship after its destroy.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.Modules.CargoDepotManager.ReportNewCargoShipFound(System.Int32)">
            <summary>
            Called by a ship wreck after its discovery.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.Modules.CargoDepotManager.ReportNewCargoShipRepaired(System.Int32)">
            <summary>
            Called by a ship wreck after repair is done.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.Modules.CargoDepotManager.FindOwnerForModule(Mafi.Core.Buildings.Cargo.Modules.CargoDepotModuleProto,Mafi.Core.TileTransform)">
            <returns>
            Pair containing the <see cref="T:Mafi.Core.Buildings.Cargo.CargoDepot"/> the module belongs to and index of the slot where the module
            belongs, or null if the position (transform) fits no <see cref="T:Mafi.Core.Buildings.Cargo.CargoDepot"/> module position.
            </returns>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.Modules.CargoDepotModule.Cheat_FullProduct">
            <summary>
            For debugging purposes only.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.Modules.CargoDepotModuleProto.HasCraneAnimation">
            <summary>
            If false, it has pipe crane animation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.Modules.CargoDepotModuleProto.PercentOfAnimationToDropCargoToShip">
            <summary>
            How far from the beginning of the animation is the point where cargo get's transferred to / from the ship.
            Inverse from 100 gives import value (import anim. is reversed export anim).
            </summary>
        </member>
        <member name="T:Mafi.Core.Buildings.Cargo.Modules.CargoDepotModuleProto.CraneAnimationControllerOverride">
            <summary>
            Specifies a different than default animation contoller for a crane.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.Modules.CargoDepotModuleProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.Modules.CargoDepotModuleProto.ID.op_Implicit(Mafi.Core.Buildings.Cargo.Modules.CargoDepotModuleProto.ID)~Mafi.Core.Entities.Static.StaticEntityProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Entities.Static.StaticEntityProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.Modules.CargoDepotModuleProto.ID.op_Implicit(Mafi.Core.Buildings.Cargo.Modules.CargoDepotModuleProto.ID)~Mafi.Core.Entities.EntityProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Entities.EntityProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.Modules.CargoDepotModuleProto.ID.op_Implicit(Mafi.Core.Buildings.Cargo.Modules.CargoDepotModuleProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.Ships.CargoShip.StoreFuelAsMuchAs(Mafi.Quantity)">
            <summary>
            Returns quantity that was not able to fit.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.Ships.CargoShip.handleDocked">
            <summary>
            Handles product exchange with the CargoDepot.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.Ships.CargoShip.RefillFuel">
            <summary>
            Called when the ship is added to the island after depot is built.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.Ships.CargoShip.RequestUpgrade">
            <summary>
            Called by the cargo depot to request upgrade.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.Ships.CargoShipProto.MaximumModulesCount">
            <summary>
            Maximum number of modules the ship can have.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.Ships.CargoShipProto.Gfx.BasicBoxColliderSize">
            <summary>
            Ship's box collider size for a ship with zero modules, with just front and back. Actual ship's box
            collider is based on this size and extended in the X axis by the length of all modules combined.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.Ships.CargoShipProto.Gfx.ModuleSlotLength">
            <summary>
            Space available for each cargo module.
            </summary>
        </member>
        <member name="T:Mafi.Core.Buildings.Cargo.Ships.ICargoShipFactory">
            <summary>
            Interface serving for <see cref="T:Mafi.Core.Buildings.Cargo.Ships.CargoShip"/> creation by <see cref="T:Mafi.Core.Buildings.Cargo.CargoDepot"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.Ships.ICargoShipFactory.AddCargoShip(Mafi.Core.Buildings.Cargo.CargoDepot,Mafi.Core.Buildings.Cargo.Ships.CargoShipProto)">
            <summary>
            Creates a ship of a specified type heading to the specified cargo depot.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.Ships.Modules.CargoShipCountableModuleProto.Gfx.ContainersParentGoPath">
            <summary>
            Path to the sub-object of the module's game object which will be the parent of the container game objects.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.Ships.Modules.CargoShipCountableModuleProto.Gfx.ContainerPositions">
            <summary>
            Local positions of containers when added to the module.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.Ships.Modules.CargoShipLooseModuleProto.Gfx.SmoothPilePath">
            <summary>
            Path to the sub-object which represents smooth pile model.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.Ships.Modules.CargoShipLooseModuleProto.Gfx.RoughPilePath">
            <summary>
            Path to the sub-object which represents rough pile model.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.Ships.Modules.CargoShipLooseModuleProto.Gfx.OffsetEmpty">
            <summary>
            Offset (local position) within parent when cargo is empty. Offset is linearly interpolated between
            empty and full states based on cargo amount. This value is in Unity coordinate space (meters).
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Cargo.Ships.Modules.CargoShipLooseModuleProto.Gfx.OffsetFull">
            <summary>
            Offset (local position) within parent when cargo is full. Offset is linearly interpolated between empty
            and full states based on cargo amount. This value is in Unity coordinate space (meters).
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Cargo.Ships.Modules.CargoShipModule.StoreAsMuchAs(Mafi.Core.ProductQuantity)">
            <summary>
            Returns quantity that was not able to fit to this buffer.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Farms.AnimalFarm.AddAnimals(System.Int32)">
            <summary>
            Returns how much was added.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Farms.AnimalFarm.RemoveAnimals(System.Int32)">
            <summary>
            Returns how much was removed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.AnimalFarmProto.Animal">
            <summary>
            Animals are represented via virtual products to have them in stats and be able
            to trade them.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.CropProto.ProductProduced">
            <summary>
            Can be none if nothing is produced.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.CropProto.ConsumedWaterPerDay">
            <summary>
            Consumed water to grow the crop (should be positive).
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.CropProto.ConsumedFertilityPerDay">
            <summary>
            Consumed fertility per month (may be negative for crops that increase farm fertility).
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.CropProto.MinFertilityToStartGrowth">
            <summary>
            Minimum fertility level to start growth.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.CropProto.DaysToGrow">
            <summary>
            How many days this crop will grow.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.CropProto.DaysToSurviveWithNoWater">
            <summary>
            Consecutive days the crop can survive without water. If null, crop never dies by lack of water.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.CropProto.PlantByDefault">
            <summary>
            Used when crop rotation is not available yet.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.CropProto.Gfx.IconPath">
            <summary>
            Icon asset path to be used in UI.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.Farm.CROP_SLOTS_COUNT">
            <summary>
            Amount of slots in crops schedule.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.Farm.MAX_DAYS_DISABLED">
            <summary>
            How many days can farm stay without workers or paused until crops die.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.Farm.FERTILITY_PENALTY_FOR_SAME_CROP">
             <summary>
             Extra fertility cost when the same crop is growing after itself, in other words it is a penalty for not
             rotating crops. This means less efficient farms at the start of the game and forces player to either rotate
             crops or pay extra fertilizer.
            
             This does not apply to crops that give fertility.
             </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.Farm.FERTILITY_REPLENISH_MULT_WHEN_ABOVE_100">
            <summary>
            When farm fertility is above 100%, natural degradation is multiplied by this value.
            This slows fertility degradation down for over-fertilized fields.
            On the other hand, crop demand will raise by
            <see cref="F:Mafi.Core.Buildings.Farms.Farm.CROP_FERTILITY_DEMAND_MULT_WHEN_FERTILITY_ABOVE_100"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.Farm.CROP_FERTILITY_DEMAND_MULT_WHEN_FERTILITY_ABOVE_100">
            <summary>
            When farm fertility is above 100%, crop demand will be multiplied by this number,
            scaled by the difference from 100%.
            This makes crops consume more and more fertility on over-fertilized farms.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.Farm.STARTING_FERTILITY">
            <summary>
            Farm starts at 80% fertility to discourage rebuilding farms to gain fertility.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.Farm.NO_YIELD_BEFORE_GROWTH_PERC">
             <summary>
             When crop is harvester prematurely, crop yield will be zero if it is grown less than this threshold.
            
             In UI, the harvest button should be disabled when growth percentage is below this.
             </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.Farm.IRRIGATION_START">
            <summary>
            NOTE: Irrigation needs to keep space in soil buffer so heavy rain has a chance to replenish it.
            Otherwise rain has lowered benefit which means that dry season would have reduced impact
            on later difficulty and we don't want that. So keep space and make it rain!
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Farms.Farm.CurrentCrop">
            <summary>
            Currently planted crop.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Farms.Farm.PreviousCrop">
            <summary>
            Previously harvested crop.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Farms.Farm.Fertility">
            <summary>
            Current farm fertility. Crop final yield is affected by this value daily.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Farms.Farm.FertilityNeededPerDay">
            <summary>
            Extra fertility needed per day in order to reach <see cref="P:Mafi.Core.Buildings.Farms.Farm.FertilityTargetValue"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Farms.Farm.AvgYieldPerYear">
            <summary>
            Yield estimate based on the current rotation and <see cref="P:Mafi.Core.Buildings.Farms.Farm.FertilityTargetValue"/>. This does NOT account
            for the current <see cref="P:Mafi.Core.Buildings.Farms.Farm.Fertility"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Farms.Farm.getNaturalReplenishPerDayAt(Mafi.Percent)">
            <summary>
            Returns natural fertility replenish rate per day for the given soil fertility level.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Farms.Farm.recomputeYieldEstimates">
            <summary>
            Recomputes yield estimates `m_avgYieldPerYear` and `FertilityNeededPerDay`.
            Needs to be recomputed when any of these change:
            * m_schedule
            * NaturalFertilityEquilibrium, m_avgFertilityUsedPerDay
            * FertilitySliderValue
            * MaxFertilityProvidedByFertilizer
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Farms.Crop.GrowthPercent">
            <summary>
            Used for UI to show crops growth.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Farms.Crop.Yield">
            <summary>
            Yield of this crop. This has valid value only after harvest (when <see cref="P:Mafi.Core.Buildings.Farms.Crop.HarvestReason"/>
            is not <see cref="F:Mafi.Core.Buildings.Farms.CropHarvestReason.None"/>).
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Farms.Crop.YieldDeltaDueToFertility">
            <summary>
            How much fertility has affected the final yield. Negative percentage means that some yield was lost because
            fertility was below 100%, positive value means that fertility was above 100% on average. This value is only
            valid after harvest.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Farms.Crop.YieldDeltaDueToBonusMultiplier">
            <summary>
            How much has a yield multiplier affected the final yield. This comes typically from edicts.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Farms.Crop.YieldLostDueToLackOfWater">
            <summary>
            How much yield was lost due to lack of water.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Farms.Crop.YieldLostDueToPrematureHarvest">
            <summary>
            How much yield was lost due to premature harvest.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Farms.Crop.DaysWaitingForWaterBeforeGrowthStart">
            <summary>
            How many days was crop waiting for water before growth started.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Farms.Crop.GetHarvestEstimate">
            <summary>
            Returns yield if crop was harvested now.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Mafi.Core.Buildings.Farms.AnimalFarmSetSlaughterLimitCmd.SlaughterSliderStep" -->
        <member name="F:Mafi.Core.Buildings.Farms.FarmProto.WaterCollectedPerDay">
            <summary>
            Amount of water collected every day when it is raining.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.FarmProto.FertilityReplenishPerDay">
            <summary>
            Percentage of missing fertility to replenish each day.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.FarmProto.YieldMultiplier">
            <summary>
            Typically leverage by greenhouses.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.FarmProto.DemandsMultiplier">
            <summary>
            Increases demand on water and fertilizer.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.FarmProto.HasIrrigationAndFertilizerSupport">
            <summary>
            Whether this farm accepts water and fertilizer.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.FarmProto.IsGreenhouse">
            <summary>
            Whether this farm is a greenhouse (some crops might require it).
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.FarmProto.WaterEvaporationPerDay">
            <summary>
            Water evaporation when there is nothing growing on the farm.
            This gets doubled when water buffer is above 50%
            </summary>
        </member>
        <member name="T:Mafi.Core.Buildings.Farms.FertilizerProductParam">
            <summary>
            Adds fertility parameter to a product proto. This makes marked product acceptable by farm as a fertilizer.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.FertilizerProductParam.FertilityPerQuantity">
            <summary>
            Amount of fertility provided by one quantity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Farms.FertilizerProductParam.MaxFertility">
            <summary>
            Max fertility provided by this fertilizer.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Farms.FertilizerProductParam.#ctor(Mafi.Percent,Mafi.Percent)">
            <summary>
            Water pollution per used fertilizer (quantity of polluted water).
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.FuelStations.FuelStationProto.FuelProto">
            <summary>
            Type of the fuel.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.FuelStations.FuelStationProto.VehicleQueuesCount">
            <summary>
            Number of queues that vehicles wait in before getting fuel. Also means number of vehicles that can be service
            simultaneously. Only vehicles that are coming for to refuel their tanks wait in queues, vehicles bringing
            fuel to put it into the station or getting fuel to refuel other vehicles do not wait in queues.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.FuelStations.FuelStationsManager.GetNearbyVehiclesToRefuel(Mafi.Core.Vehicles.Trucks.Truck,Mafi.Core.Entities.Dynamic.Vehicle,Mafi.Collections.Lyst{Mafi.Core.Entities.Dynamic.Vehicle})">
            <summary>
            Returns lists of vehicles that are so close to the current vehicle that they can
            be just refueled immediately.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Mine.MineTower.HasInputStorageOrTowerAssigned">
            <summary>
            Whether any entity accepts our stuff.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Mine.MineTower.HasOutputStorageOrTowerAssigned">
            <summary>
            Whether any entity delivers stuff to this tower.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Mine.MineTower.AssignedInputStorages">
            <summary>
            Storages that accept stuff from this tower as their input.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Mine.MineTower.AssignedOutputStorages">
            <summary>
            Storages that provide stuff to this tower as their output.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Mine.MineTower.ManagedDesignations">
            <summary>
            Designations managed by this tower. We don't exclude fulfilled designations.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Mine.MineTower.DumpableProducts">
            <summary>
            Products that are allowed to be dumped in the given area's designators.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Mine.MineTower.ProductsToNotifyIfCannotGetRidOf">
            <summary>
            Products on which we notify if we have trucks that can't get rid of them.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Mine.MineTower.AssignedVehicles">
            <summary>
            All assigned excavators that work under this mine tower.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Mine.MineTower.Area">
            <summary>
            Area that is controlled by the mine tower.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Mine.MineTower.CanAcceptDumpOf(Mafi.Core.Products.ProductProto)">
            <summary>
            Whether this mine tower is currently able to accept the given product to dump. NOTE: this does not take into
            account if there are some dumping designators available.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Mine.MineTower.AddProductToDump(Mafi.Core.Products.LooseProductProto)">
            <summary>
            Makes the given product to be allowed to be dumped here.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Mine.MineTower.RemoveProductToDump(Mafi.Core.Products.LooseProductProto)">
            <summary>
            Removes the given product from the allowed dumpable products.
            </summary>
        </member>
        <member name="T:Mafi.Core.Buildings.Mine.MineTowerAreaChangeCmd">
            <summary>
            Command to change the range (area) of <see cref="T:Mafi.Core.Buildings.Mine.MineTower"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Mine.AddProductToDumpCmd.MineTowerId">
            <summary>
            If null, product is assigned globally
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Mine.RemoveProductToDumpCmd.MineTowerId">
            <summary>
            If null, product is assigned globally
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Mine.MineTowerProto.DefaultProductOfAssignedTrucks">
            <summary>
            This product determines the default cargo type of assigned trucks and thus type of their default attachment.
            </summary>
        </member>
        <member name="T:Mafi.Core.Buildings.Mine.MineTowerProto.MineArea">
            <summary>
            Holds the configuration of the initial mining area of a <see cref="T:Mafi.Core.Buildings.Mine.MineTowerProto"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Mine.MineTowerProto.MineArea.Origin">
            <summary>
            Denotes the point (relative to the entity layout) where the area starts. Please see the example.
            </summary>
            <example>Below is an example of such area where size is (4,6). X denotes the origin point.</example>
            <code>
            halfWidth (2)
            ▲
            ******
            *    *
            TT   X    * ► length (6)
            *    *
            ******
            ▼
            halfWidth (2)
            </code>
        </member>
        <member name="F:Mafi.Core.Buildings.Mine.MineTowerProto.MineArea.InitialSize">
            <summary>
            Initial size of the area before player makes any changes.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Mine.MineTowerProto.MineArea.MaxAreaEdgeSize">
            <summary>
            Maximal allowed area size (for both the width and length).
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Mine.MineTowersManager.OnAreaChange">
            <summary>
            Invoked when mine tower is changed. Parameters are current mine tower and old area.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.RainwaterHarvesters.RainwaterHarvesterProto.WaterProto">
            <summary>
            Proto to be collected from rain by this entity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.RainwaterHarvesters.RainwaterHarvesterProto.WaterCollectedPerDay">
            <summary>
            Amount of water collected every day when it is raining.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.ResearchLab.ResearchLab.CurrentResearch">
            <summary>
            Only one research process can be assigned at the same time.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.ResearchLab.ResearchLab.m_providedProductsCache">
            <summary>
            Set used to gather products provided by connected IVehicleOutputEntities.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.ResearchLab.ResearchLabProto.DurationForRecipe">
            <summary>
            Duration of a single research recipe.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.ResearchLab.ResearchLabProto.StepsPerRecipe">
            <summary>
            Amount of steps done per each time a recipe is completed. Each research defines the required amount of steps.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.ResearchLab.ResearchLabProto.ConsumedPerRecipe">
            <summary>
            Can be None
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.ResearchLab.ResearchLabProto.ProducedPerRecipe">
            <summary>
            Can be None
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Settlements.Hospital.SUPPLIES_CONSUMPTION_MULTIPLIER_DURING_DISEASE">
            <summary>
            Multiplier of medical supplies when a disease is active.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Settlements.Hospital.TrySatisfyNeedOnNewDay(System.Int32,System.Int32,Mafi.Percent@,Mafi.Upoints@,Mafi.Percent@)">
            <summary>
            Returns the amount of pops it did not manage to satisfy.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Settlements.HospitalProto.NextTier">
            <summary>
            Next tier of hospital (upgrade), if available.
            </summary>
        </member>
        <member name="T:Mafi.Core.Buildings.Settlements.ISettlementModuleProto">
            <summary>
            Interface for all settlement slot module protos - the small ones like food market.
            </summary>
        </member>
        <member name="T:Mafi.Core.Buildings.Settlements.ISettlementSquareModuleProto">
            <summary>
            Interface for all large square settlement module protos - housing, square decorations.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Settlements.Settlement.TryAccomodate(System.Int32)">
            <summary>
            Returns amount of accommodated people.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Settlements.Settlement.FoodCategoriesWithHealthSatisfaction">
            <summary>
            Percentage of food categories satisfied. E.g. 250% mean we satisfied 2.5 categories.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Settlements.Settlement.feedPopsFromCategories(System.Int32,Mafi.Percent@)">
             <summary>
              Return the number of pops that were not fed.
            
             categoriesSatisfaction gives 100% for each satisfied category, so
             - 250% means 2.5 category was satisfied
             </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Settlements.Settlement.feedFromCategory(Mafi.Core.Buildings.Settlements.Settlement.FoodCategoryData,System.Int32)">
            <summary>
             Return the number of pops that were not fed.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Settlements.Settlement.FoodData.PopDaysSupplyTemp">
            <summary>
            Supply per popDay. So 300 means that 10 pops can survive for 30 days.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Settlements.Settlement.LANDFILL_CAPACITY_PER100_POPS">
            <summary>
            If settlement gets over this capacity we consider it to be polluted.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Settlements.Settlement.pushWasteToLandfill(Mafi.Quantity)">
            <summary>
            Returns how much was not stored
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Settlements.Settlement.pushBioWaste(Mafi.Quantity)">
            <summary>
            Returns how much was not stored
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Settlements.Settlement.pushRecyclables(Mafi.Quantity)">
            <summary>
            Returns how much was not stored
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Settlements.SettlementDecorationModuleProto.NextTier">
            <summary>
            Next tier of decoration (upgrade), if available.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Settlements.SettlementHousingModule.AchievedUnityIncreaseIndexLastUpdate">
            <summary>
            Index into Prototype.UnityIncreases if a boost was achieved otherwise -1.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Settlements.SettlementHousingModuleProto.NextTier">
            <summary>
            Next tier of depot (upgrade), if available.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Settlements.SettlementHousingModuleProto.UnityIncreases">
            <summary>
            Needs that are required in order to apply special benefits (unity boost) of this housing.
            More beneficial ones are first. So if you satisfy the first one, no need to check the other ones.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Settlements.SettlementHousingModuleProto.NeedsIncreases">
            <summary>
            Increases consumption of the needs by the given percentage.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Settlements.SettlementHousingModuleProto.Capacity">
            <summary>
            Max capacity of pops.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Settlements.SettlementHousingModuleProto.UpointsCapacity">
            <summary>
            Added global unity capacity.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Settlements.SettlementServiceModule.TrySatisfyNeedOnNewDay(System.Int32)">
            <summary>
            Returns the amount of pops it did not manage to satisfy.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Settlements.SettlementsManager.AddPops(System.Int32,Mafi.Core.Buildings.Settlements.PopsAdditionReason)">
            <summary>
            Returns amount of pops it failed to add.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Settlements.SettlementsManager.RemovePopsAsMuchAs(System.Int32)">
            <summary>
            Returns removed population.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Settlements.SettlementsManager.ReturnPopsBack(System.Int32)">
            <summary>
            Happens when housing is lost from a Settlement and the settlement gets full.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Settlements.SettlementsManager.RemovePopFromSettlement(System.Int32,Mafi.Core.Buildings.Settlements.Settlement)">
            <summary>
            Returns the number of people it did not manage to remove.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Settlements.SettlementsManager.remove(System.Int32,Mafi.Core.Buildings.Settlements.Settlement)">
            <summary>
            Returns the number of people it did not manage to remove.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Settlements.SettlementTransformer.TrySatisfyNeedOnNewDay(System.Int32)">
            <summary>
            Returns the amount of pops it did not manage to satisfy.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Shipyard.Shipyard.tryMoveFuelFromCargoToFuelStorage">
            <summary>
            When we have fuel in general cargo, we try to move it to fuel tank in case player requested it to be refueled.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Shipyard.Shipyard.refreshWorldMapRepairCargo">
            <summary>
            The reason we have this method is to catch cases where the cargo for a world map entity repair
            disappears from the ship. This can happen when the player for instance repairs a different
            entity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Shipyard.ShipayardSetFuelSliderStepCmd.ImportStep">
            <summary>
            Negative if undefined.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Shipyard.ShipayardSetFuelSliderStepCmd.ExportStep">
            <summary>
            Negative if undefined.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Storages.Storage.rescanOutputPorts">
            <summary>
            Performance optimization.
            It turns out that it is at least 2 times slower to exchange products via ports instead of
            between storage directly. One reason can be that we are invoking global capacity changes
            events which is not great.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Storages.Storage.AssignProduct(Mafi.Core.Products.ProductProto)">
            <summary>
            Tries to assign product to this storage and returns true on success.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Storages.StorageBase.m_firstOutputPortIndex">
            <summary>
            Determines the ordering of output ports when sending outputs. This defines index of the first port, others
            follow in ascending order.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Storages.StorageBase.Buffer">
            <summary>
            None when the storage has no product assigned.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Storages.StorageBase.m_performCleaningBeforeDeconstruction">
            <summary>
            Whether before we deconstruct this entity we should request logistics to clean its cargo.
            NOTE: This will only work if StorageBuffer strategy is used otherwise needs to mimic the strategies.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Storages.StorageBase.tryAssignProduct(Mafi.Core.Products.ProductProto)">
            <summary>
            Tries to assign product to this storage and returns true on success.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Storages.StorageBase.ClearAssignedProduct">
            <summary>
            Clears currently assigned products if the storage is empty. Otherwise, enables clearing mode. Does nothing if
            storage product is not assigned.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Storages.StorageBase.SendToStorageDirectly(Mafi.Core.Buildings.Storages.Storage)">
            <summary>
            Sends contents of output buffers to a storage directly. Used when storages are daisy chained.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Storages.StorageBase.SendAllOutputsIfCan">
            <summary>
            Sends contents of output buffers to output ports.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Storages.StorageBase.receiveAsMuchAsBetweenStorages(Mafi.Core.ProductQuantity)">
            <summary>
            Performance optimization to transfer between storages directly and avoid ports.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Storages.StorageBaseProto.TransferLimit">
            <summary>
            Limits how much this storage can receive via ports per TransferLimitDuration.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Storages.StorageBaseProto.TransferLimitDuration">
            <summary>
            See TransferLimit.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Storages.IStorageBufferReadOnly.ImportUntilPercent">
            <summary>
            0-100% of capacity of buffer until which should be imported.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Storages.IStorageBufferReadOnly.ExportFromPercent">
            <summary>
            0-100% of capacity of buffer from which should be exported.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Storages.StorageBuffer.MAX_STEPS">
            <summary>
            Total number of discrete steps for a import/export sliders.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Storages.StorageBuffer.SingleStep">
            <summary>
            Single step by which import/export percentage can be modified.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Storages.StorageBuffer.m_productsManager">
            <summary>
            If set, products quantity/capacity changes are reported to it.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Storages.StorageBuffer.CurrentQuantityPercent">
            <summary>
            Current percentage(0-100) occupancy of the storage.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Storages.StorageBuffer.ImportUntilPercent">
            <summary>
            0-100% of capacity of buffer until which should be imported.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Storages.StorageBuffer.ExportFromPercent">
            <summary>
            0-100% of capacity of buffer from which should be exported.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Storages.StorageBuffer.CleaningMode">
            <summary>
            Whether the buffer should try to fetch out all the quantity ASAP so the product can be after that
            automatically removed from storage.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Storages.StorageBuffer.QuantityForExport">
            <summary>
            Allows to "hide" its keep full quantity from logistics.
            Can return negative quantity to save perf.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.Storages.StorageBuffer.UsableCapacityForImport">
            <summary>
            Allows to "hide" its keep empty capacity from logistics.
            Can return negative quantity to save perf.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Storages.StorageProto.StorableProducts">
            <summary>
            Products that can be stored in the storage. Serves mainly for the players so they can choose from some list
            what to assign.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Storages.StorageProto.NextTier">
            <summary>
            Next tier of storage (upgrade), if available.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.Storages.StorageProto.ProductType">
            <summary>
            Type of product supported. If null, this supports all product types.
            However always check <see cref="M:Mafi.Core.Buildings.Storages.StorageProto.IsProductSupported(Mafi.Core.Products.ProductProto)"/> for addition filtering.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Storages.StorageProto.m_productsFilter">
            <summary>
            Filter for <see cref="P:Mafi.Core.Buildings.Storages.StorageProto.StorableProducts"/>.
            Do not filter product type, that is redundant work as it is already done for you via <see cref="P:Mafi.Core.Buildings.Storages.StorageProto.ProductType"/>
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Storages.StorageSetSliderStepCmd.ImportStep">
            <summary>
            Negative if undefined.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.Storages.StorageSetSliderStepCmd.ExportStep">
            <summary>
            Negative if undefined.
            </summary>
        </member>
        <member name="M:Mafi.Core.Buildings.VehicleDepots.VehicleDepotBase.TrySpawnVehicle">
            <summary>
            Returns true if a vehicle can be spawned based on min time between spawns.
            This also sets the spawn time when true is returned.
            </summary>
        </member>
        <member name="T:Mafi.Core.Buildings.VehicleDepots.IDepotJob">
            <summary>
            Interface to identify depot jobs. This is just to avoid mistakes of passing invalid jobs to depot.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.VehicleDepots.VehicleDepotBaseProto.SpawnInterval">
            <summary>
            Minimal interval between spawned vehicles.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.VehicleDepots.VehicleDepotBaseProto.SpawnPosition">
            <summary>
            Tile relative to the depot position where vehicles will appear. This is usually somewhere inside of the
            depot.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.VehicleDepots.VehicleDepotBaseProto.SpawnDriveTargetPosition">
            <summary>
            Tile relative to the depot position where entities are sent to when spawning. This is usually in front of the
            main door.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.VehicleDepots.VehicleDepotBaseProto.SpawnDirection">
            <summary>
            Direction of a vehicle when spawned.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.VehicleDepots.VehicleDepotBaseProto.DespawnPosition">
            <summary>
            Tile relative to the depot position where vehicles will disappear. This is usually somewhere inside of the
            depot.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.VehicleDepots.VehicleDepotBaseProto.DespawnDriveTargetPosition">
            <summary>
            Tile relative to the depot position where entities are sent to when spawning. This is usually in front of the
            main door.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.VehicleDepots.VehicleDepotBaseProto.DoorOpenDuration">
            <summary>
            Duration of door opening animation.
            </summary>
        </member>
        <member name="P:Mafi.Core.Buildings.VehicleDepots.VehicleDepotBaseProto.BuildableEntities">
            <summary>
            Entities buildable by this depot type.
            </summary>
        </member>
        <member name="F:Mafi.Core.Buildings.VehicleDepots.VehicleDepotBaseProto.Gfx.SoundPrefabPath">
            <summary>
            The sound the generator makes while it is operating.
            </summary>
        </member>
        <member name="T:Mafi.Core.Console.ConsoleCommandAttribute">
            <summary>
            Annotate any method on global dependency to use is as a console command. This method may be void,
            return <see cref="T:System.String"/>, or return <see cref="T:Mafi.Core.Console.GameCommandResult"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Console.GameCommand.InvokeOnMainThread">
            <summary>
            Whether this command should be invoked on main thread. Otherwise, it should be invoked on sim thread.
            </summary>
        </member>
        <member name="M:Mafi.Core.Console.GameCommandsExecutor.TryExecute(System.String)">
            <summary>
            Attempts to invoke method specified in the <paramref name="commandText"/> argument.
            <paramref name="commandText"/> has to have format: method_name arg1 arg2 (number of arguments is defined by
            method).
            </summary>
        </member>
        <member name="M:Mafi.Core.Console.GameCommandsExecutor.TryParseCommand(System.String,Mafi.Core.Console.GameCommand@,System.Object[]@,System.String@,System.String@,System.Boolean)">
            <summary>
            Returns whether command parsing succeeded.
            </summary>
            <param name="commandStr">Text of command to be parsed.</param>
            <param name="command">Command if parsing was successful, null otherwise.</param>
            <param name="parameters">Parsed command parameters if parsing succeeded, null otherwise.</param>
            <param name="errorMessage">Error message if command parsing failed, null otherwise.</param>
        </member>
        <member name="T:Mafi.Core.Console.GameConsole">
            <summary>
            Game console implementation, invokes <see cref="E:Mafi.Core.Console.GameConsole.OnMessage"/> event for each message.
            </summary>
        </member>
        <member name="T:Mafi.Core.Console.GameConsoleCommandsExecutor">
            <summary>
            Handles automatic commands registration and execution via game console.
            </summary>
        </member>
        <member name="M:Mafi.Core.Console.GameConsoleCommandsExecutor.ScanObjectForConsoleCommands(System.Object)">
            <summary>
            By default, all instantiated global dependencies are scanned. Use this function to scan additional objects
            for console commands.
            </summary>
        </member>
        <member name="M:Mafi.Core.Console.GameConsoleCommandsExecutor.ExecuteOrSchedule(System.String)">
            <summary>
            Executes command directly if it should run on main thread or schedules its execution on sim thread.
            </summary>
        </member>
        <member name="M:Mafi.Core.CoreMod.#ctor(Mafi.Core.CoreModConfig)">
            <summary>
            Core mod does not depend on any other mod.
            </summary>
        </member>
        <member name="P:Mafi.Core.CoreMod.IsInitialized">
            <summary>
            Whether the mods registration and initialization was performed correctly.
            </summary>
        </member>
        <member name="P:Mafi.Core.CoreModConfig.DisableTerrainPhysics">
            <summary>
            Whether terrain physics should be disabled. Terrain with no physics simulation will not fall under steep
            angles.
            </summary>
        </member>
        <member name="P:Mafi.Core.CoreModConfig.DisableTerrainSurfaceSimulation">
            <summary>
            Whether terrain surface simulation should be disabled. Terrain with no physics surface simulation will not
            process disrupted tiles events.
            </summary>
        </member>
        <member name="P:Mafi.Core.CoreModConfig.DisablePathFinding">
            <summary>
            Whether vehicle path-finding should be disabled. With no path-finding all vehicles will just travel on
            straight lines ignoring any obstacles.
            </summary>
        </member>
        <member name="P:Mafi.Core.CoreModConfig.DisableBoundaryCellAutoUnlock">
            <summary>
            Whether auto-unlock of boundary cells should be disabled. This is handy for tests.
            </summary>
        </member>
        <member name="P:Mafi.Core.CoreModConfig.DisableResourcesGeneration">
            <summary>
            Whether to generate resources on the terrain.
            </summary>
        </member>
        <member name="P:Mafi.Core.CoreModConfig.DisableLockedCellsTerrainGeneration">
            <summary>
            Whether to disable generation of terrain chunks for locked cells. This dramatically speeds up start time and
            is handy when debugging.
            </summary>
        </member>
        <member name="P:Mafi.Core.CoreModConfig.FreeElectricityPerTick">
            <summary>
            How much free electricity per tick is given to the player.
            </summary>
        </member>
        <member name="P:Mafi.Core.CoreModConfig.ShouldUnlockAllProtosOnInit">
            <summary>
            Whether all locked protos should be unlocked from the beginning of the game.
            </summary>
        </member>
        <member name="M:Mafi.Core.Economy.AssetTransactionManager.SetOverflowProductsStorage(Mafi.Core.Economy.IOverflowProductsStorage)">
            <summary>
            Can be called multiple times to replace (e.g. due upgrade).
            </summary>
        </member>
        <member name="F:Mafi.Core.Economy.AssetValue.s_productsCache">
            <summary>
            Cache for usage in mathematical operations.
            </summary>
        </member>
        <member name="T:Mafi.Core.Economy.IAssetTransactionManager">
            <summary>
            Facilitates spending and earning of both money and products.
            </summary>
        </member>
        <member name="M:Mafi.Core.Economy.IAssetTransactionManager.CanRemoveValue(Mafi.Core.Economy.AssetValue)">
            <summary>
            Returns whether the player can spend given assets.
            </summary>
        </member>
        <member name="M:Mafi.Core.Economy.IAssetTransactionManager.RemoveProduct(Mafi.Core.ProductQuantity,System.Nullable{Mafi.Core.Products.DestroyReason})">
            <summary>
            Removes given assets from storages.
            Also removes them from product manager case reason is not null.
            </summary>
        </member>
        <member name="M:Mafi.Core.Economy.IAssetTransactionManager.GetFreeCapacityFor(Mafi.Core.Products.ProductProto)">
            <summary>
            Returns maximum <see cref="T:Mafi.Quantity"/> of given product that can added in full. Thread safe.
            </summary>
        </member>
        <member name="M:Mafi.Core.Economy.IAssetTransactionManager.GetAvailableQuantityFor(Mafi.Core.Products.ProductProto)">
            <summary>
            Returns <see cref="T:Mafi.Quantity"/> of given product available to be used for buying. Thread safe.
            </summary>
        </member>
        <member name="M:Mafi.Core.Economy.IAssetTransactionManager.GetTotalCapacityFor(Mafi.Core.Products.ProductProto)">
            <summary>
            Returns capacity <see cref="T:Mafi.Quantity"/> of of storages for given product. Thread safe.
            </summary>
        </member>
        <member name="M:Mafi.Core.Economy.IAssetTransactionManager.AddProduct(Mafi.Core.ProductQuantity,System.Nullable{Mafi.Core.Products.CreateReason})">
             <summary>
             Adds assets specified as income. Products are added to compatible storages with free capacity. If the player
             has not enough storage capacity we add these to shipayrd.
            
             If reason is provided we also report the products to product manager.
             </summary>
        </member>
        <member name="M:Mafi.Core.Economy.IAssetTransactionManager.RegisterProductsProvider(Mafi.Core.Products.IGlobalProductsProvider)">
            <summary>
            Serves to register products providers that are singletons (e.g. UpointsManager). Do not use for entities!
            </summary>
        </member>
        <member name="M:Mafi.Core.Economy.IAssetTransactionManager.SetOverflowProductsStorage(Mafi.Core.Economy.IOverflowProductsStorage)">
            <summary>
            Can be called multiple times to replace shipyard (e.g. due upgrade).
            </summary>
        </member>
        <member name="M:Mafi.Core.Economy.IAssetTransactionManagerExtensions.GetAsMuchAs(Mafi.Core.Economy.IAssetTransactionManager,Mafi.Core.Products.ProductProto,Mafi.Quantity,System.Nullable{Mafi.Core.Products.DestroyReason})">
            <summary>
            Returns what was removed.
            </summary>
        </member>
        <member name="M:Mafi.Core.Economy.IAssetTransactionManagerExtensions.AddValue(Mafi.Core.Economy.IAssetTransactionManager,Mafi.Core.Economy.AssetValue,System.Nullable{Mafi.Core.Products.CreateReason})">
            <summary>
            Adds assets specified as income, if possible. Products are added to compatible storages with free capacity.
            This never fails. If the player has not enough storage capacity we keep these as pending.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Animations.AnimationParams">
            <summary>
            Parameters for animation. If the entity has AnimationController, its animation will be played based on these
            parameters.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Animations.AnimationWithPauseParams">
            <summary>
            Animation that will be paused at the specified time for the specified duration. If the pause duration is not
            specified the duration will be calculated to match duration of currently running recipe.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Animations.AnimationWithPauseParams.PauseAt">
            <summary>
            Offset at which the animation should be the paused. Applied only iff <see
            cref="F:Mafi.Core.Entities.Animations.AnimationWithPauseParams.PauseForDuration"/> is positive.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Animations.AnimationWithPauseParams.PauseForDuration">
            <summary>
            Duration for which should be the animation be paused at time defined in <see cref="F:Mafi.Core.Entities.Animations.AnimationWithPauseParams.PauseAt"/>.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Animations.LoopAnimationParams">
            <summary>
            Animation that will be simply looped and can be paused anytime.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Animations.RepeatableAnimationParams">
            <summary>
            Animations that either repeats number of times to fill recipe duration or computes number of repeats
            based on animation duration.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.AssignedVehicles`2">
            <summary>
            Helper class that handles assigned vehicles.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.AssignedVehicles`2.Vehicles">
            <summary>
            All assigned vehicles.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.AssignedVehicles`2.AssignVehicle(Mafi.Core.Entities.Dynamic.Vehicle,System.Boolean)">
            <summary>
            Generic variant of <see cref="!:AssignVehicle(TVehicle)"/> that performs cast and check for the right type.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.AssignedVehicles`2.AssignVehicle(`1)">
            <summary>
            Assigns vehicle type.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.AssignedVehicles`2.AssignVehicle(Mafi.Core.Entities.Dynamic.DynamicEntityProto)">
            <summary>
            Generic variant of <see cref="M:Mafi.Core.Entities.AssignedVehicles`2.AssignVehicle(`1)"/> that performs cast and check for the right type.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.AssignedVehicles`2.UnassignVehicle(`0)">
            <summary>
            Unassigns vehicle.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.AssignedVehicles`2.UnassignVehicle(Mafi.Core.Entities.Dynamic.Vehicle)">
            <summary>
            Generic variant of <see cref="M:Mafi.Core.Entities.AssignedVehicles`2.UnassignVehicle(`0)"/> that performs cast and check for the right type.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.AssignedVehicles`2.UnassignVehicle(`1)">
            <summary>
            Unassigns vehicle type.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.AssignedVehicles`2.UnassignVehicle(Mafi.Core.Entities.Dynamic.DynamicEntityProto)">
            <summary>
            Generic variant of <see cref="M:Mafi.Core.Entities.AssignedVehicles`2.UnassignVehicle(`1)"/> that performs cast and check for the right type.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.AssignedVehicles`2.Clear">
            <summary>
            Clears all assigned vehicles and breaks the assignment bond.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Dynamic.DrivingData">
            <summary>
            Immutable class which stores data for the driving engine.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingData.MaxForwardsSpeed">
            <summary>
            Maximum forwards speed in discrete units per tick.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingData.MaxBackwardsSpeed">
            <summary>
            Maximum backwards speed in discrete units per tick.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingData.SteeringSpeedMult">
            <summary>
            Multiplier of speed at the max steering angle, is in range [0.1, 1].
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingData.NoFuelMaxSpeedPerc">
            <summary>
            Factor determining maximum speed and acceleration (as fraction of default values), when a vehicle is without fuel.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingData.Acceleration">
            <summary>
            Forward acceleration in discrete units per tick.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingData.Braking">
            <summary>
            Deceleration (breaking) in discrete units per tick. This should be generally more than acceleration.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingData.MaxSteeringAngle">
            <summary>
            Max steering angle of the wheels. Value is in range [0, 80] degrees.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingData.MaxSteeringSpeed">
            <summary>
            Maximal change of steering angle per tick.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingData.BrakingConservativness">
            <summary>
            How conservative breaking should be, values around 2.0 are good, higher values causes more conservative
            driving.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingData.SteeringAxleOffset">
            <summary>
            Distance from vehicle center to steering axle. This determines turning radius. If the offset is zero then the
            vehicle can turn in place.
            </summary>
            <remarks>
            <code>
             O==+==O  -
                |     |
                |     | SteeringAxleOffset
                |     |
                #     - (center)
             O==+==O
             O==+==O
             O==+==O
            </code>
            </remarks>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingData.NonSteeringAxleOffset">
            <summary>
            Distance from vehicle center to the non-steering axle. This determines turning radius.
            </summary>
            <remarks>
            <code>
             O==+==O
                |
                |
                |
                #     - (center)
             O==+==O  | NonSteeringAxleOffset
             O==+==O  -
             O==+==O
            </code>
            </remarks>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DrivingData.AxlesDistance">
            <summary>
            Distance between steering and non steering axles.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingData.CanTurnInPlace">
            <summary>
            Whether steering is independent of vehicle speed. For example tracks can turn in pace, wheels cannot.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Dynamic.DrivingEntity">
            <summary>
            Driving entity is able to drive to given target ignoring all obstacles.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingEntity.s_goalBehindAngle">
            <summary>
            The goal is considered behind if angle to goal is greater than this value.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingEntity.s_goalInFrontAngle">
            <summary>
            The goal is considered in front if the angle is less than this value.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DrivingEntity.DrivingData">
            <summary>
            Driving data.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DrivingEntity.Target">
            <summary>
            Current target if any. Is valid only when <see cref="P:Mafi.Core.Entities.Dynamic.DrivingEntity.IsDriving"/> is true.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingEntity.DrivingTarget">
            <summary>
            Current target only valid when driving. When not driving, this is the target of the last drive command.
            This variable is intentionally not nullable to avoid null checks.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DrivingEntity.IsDriving">
            <summary>
            Whether this entity is actively driving somewhere. This is the main flag to query to know whether the entity
            is driving. Note that the vehicle may be still moving a little bit when <see cref="P:Mafi.Core.Entities.Dynamic.DrivingEntity.IsDriving"/> is false.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DrivingEntity.IsAccelerating">
            <summary>
            Whether vehicle is currently accelerating. This can be for example used for animation of smoke from exhaust.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DrivingEntity.IsBraking">
            <summary>
            Whether vehicle is currently braking. This can be for example used for braking lights.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DrivingEntity.SteeringAngle">
            <summary>
            Current angle of steering relative to the vehicle's <see cref="P:Mafi.Core.Entities.Dynamic.DynamicGroundEntity.Direction"/>. For vehicles
            that can turn in place this is turning velocity per tick.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DrivingEntity.DistanceToFullStop">
            <summary>
            Braking distance of this entity. That's total distance traveled when braking at 100% every step. Returned
            value is always non-negative.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingEntity.m_targetTolerance">
            <summary>
            Tolerance of reaching target. This tolerance is used when entity is about to stop or is already standing (new
            target). This should be large enough to allow entity to reach its target even if it is a little off but small
            enough to not introduce any noticeable imprecisions.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DrivingEntity.TargetIsTerminal">
            <summary>
            Whether current target is intermediate. Driver will not attempt to brake when reaching an intermediate target
            but rather drive through it at the full speed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingEntity.m_state">
            <summary>
            State of this vehicle. This controls its behavior.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DrivingEntity.SpeedFactor">
            <summary>
            Speed factor for animations. 100% means default speed, 50% means speed is halved (timings are doubled).
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.TestOnly_SetSpeed(Mafi.RelTile1f)">
            <summary>
            Sets speed of this entity. This is for tests.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.ShouldGetNextTarget(Mafi.Tile2f)">
            <summary>
            Whether this vehicle can keep max speed to given target.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.SetDrivingTarget(Mafi.Tile2f,System.Boolean,Mafi.RelTile1f,System.Boolean,System.String)">
            <summary>
            Drives this entity to given <paramref name="target"/>. If <paramref name="isTerminal"/> is set to
            <c>false</c> this target is not terminal and the driver will not try to stop at the given goal but rather
            drive through it at full speed (and then just brake at full speed if no other target is given).
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.StopDriving">
            <summary>
            Stops driving and resets the target.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.PauseDriving">
            <summary>
            Stops vehicle temporarily, but the vehicle is kept in driving state and driving can be resumed.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.ResumeDriving">
            <summary>
            Resumes paused driving.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.SimUpdateInternal">
            <summary>
            Performs driving logic. This should be called by any inherited class. This should be called always regardless
            of <see cref="P:Mafi.Core.Entities.Dynamic.DrivingEntity.IsDriving"/> status because vehicle may be not driving but it still needs to decelerate and
            stop.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.handleStopped">
            <summary>
            Vehicle is at complete stop and is waiting for target.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.handleStopping">
            <summary>
            Vehicle is moving but is not driving. This effectively brakes the vehicle to complete stop or resumes
            driving.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.handleStopAndContinueForwards">
            <summary>
            This is recovery state when vehicle hits steering singularity. This is solved by fully stopping. Driving
            forwards will keep steering when standing towards the goal.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.handleDrivingForwards">
            <summary>
            Drives the vehicle forwards. If vehicle is currently moving backwards, it stops first and then drive
            forwards.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.handleDrivingBackwards">
            <summary>
            Drives the vehicle backwards. If vehicle is currently moving forwards, it stops first and then drive
            backwards.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.steerTowards(Mafi.Tile2f,System.Boolean)">
            <summary>
            Steers the vehicle by setting <see cref="P:Mafi.Core.Entities.Dynamic.DrivingEntity.SteeringAngle"/> towards the goal. If <paramref name="reverse"/> is
            true, it steers towards goal while vehicle is moving backwards. Returns true when max steering was performed.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.canDriveForwards">
            <summary>
            Whether area in front of the vehicle is pathable. This takes into account current speed.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.canDriveBackwards">
            <summary>
            Whether area behind the vehicle is pathable. This takes into account current speed.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.performMoveStep">
            <summary>
            Performs logic responsible for moving the entity.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.isTargetUnreachable">
            <summary>
            Tests whether current target is unreachable due to turning radius singularity. This assumes maximum steering.
            </summary>
            <remarks>
            This tests whether the target is inside of circles of maximal steering radius. This is assuming that we are
            going forwards. Reachability while backing up is complicated.
            </remarks>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntity.getRelativeTurnCenter(Mafi.AngleDegrees1f)">
            <summary>
            Returns center of rotation based on given steering angle. The center is relative to current position. Given
            angle should be non-zero.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingState.Stopped">
            <summary>
            Vehicle is stopped and idle.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingState.Stopping">
            <summary>
            Vehicle completed its task and is just braking down.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingState.StopAndContinueForwards">
            <summary>
            Stops the vehicle and then makes it go forwards again.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingState.DrivingForwards">
            <summary>
            Vehicle is driving forwards to reach its goal.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingState.DrivingBackwards">
            <summary>
            Vehicle is backing up, most likely to turn around to be able to reach its goal.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingState.TurningInPlace">
            <summary>
            Vehicle is turning in place towards specified goal.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DrivingState.Paused">
            <summary>
            Driving is paused.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DrivingEntityProtoBuilderState`1.SetSizeInMeters(System.Double,System.Double,System.Double)">
            <summary>
            Bounding box size that is used to compute distances and threshold for navigation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DynamicEntityProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DynamicEntityProto.ID.op_Implicit(Mafi.Core.Entities.Dynamic.DynamicEntityProto.ID)~Mafi.Core.Entities.EntityProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Entities.EntityProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DynamicEntityProto.ID.op_Implicit(Mafi.Core.Entities.Dynamic.DynamicEntityProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DynamicEntityProto.VehicleQuotaCost">
            <summary>
            Amount of vehicle quota this vehicle costs. Can be zero for vehicles that do not cost any quota.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DynamicEntityProto.Gfx.IconPath">
            <summary>
            Path for icon sprite.
            </summary>
            <remarks>This path is valid only after <see cref="M:Mafi.Core.Entities.Dynamic.DynamicEntityProto.Gfx.Initialize(Mafi.Core.Entities.Dynamic.DynamicEntityProto)"/> was called.</remarks>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DynamicEntityProto.Gfx.IconIsCustom">
            <summary>
            Whether custom icon path was set. Otherwise, icon path is automatically generated.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Dynamic.DynamicGroundEntity">
            <summary>
            Vehicle that is able to drive around.
            TODO: Rename to DrivingVehicle
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DynamicGroundEntity.Position3f">
            <summary>
            Absolute position of this entity in the world.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DynamicGroundEntity.GroundPositionTile2i">
            <summary>
            Tile that this entity occupies. Note that this is more effective than <see cref="P:Mafi.Core.Entities.Dynamic.DynamicGroundEntity.GroundPositionTile"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DynamicGroundEntity.GroundPositionTile">
            <summary>
            Terrain tile that this entity occupies. Note that this requires terrain tile lookup. Use <see
            cref="P:Mafi.Core.Entities.Dynamic.DynamicGroundEntity.GroundPositionTile2i"/> if you just care about position.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DynamicGroundEntity.Direction">
            <summary>
            Direction of the vehicle. If direction is zero, vehicle points to positive x direction.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DynamicGroundEntity.IsSpawned">
            <summary>
            Whether this vehicle is spawned in the world and its models should be drawn.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.DynamicGroundEntity.Speed">
            <summary>
            Current speed. Sign represents direction, negative value represents backwards motion.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DynamicGroundEntity.DistanceSqrTo(Mafi.Tile2f)">
            <summary>
            Returns distance squared to given <paramref name="position"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DynamicGroundEntity.Spawn(Mafi.Tile2f,Mafi.AngleDegrees1f)">
            <summary>
            Spawns this vehicle at given position in the world.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.DynamicGroundEntity.Despawn">
            <summary>
            Removes this vehicle from the world.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DynamicGroundEntityProto.EntitySize">
            <summary>
            Specifies size of entity bounding box centered at entity origin.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DynamicGroundEntityProto.NavTolerance">
            <summary>
            Tolerance for navigation to this entity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DynamicGroundEntityProto.DisruptionByDistance">
            <summary>
            Specifies how much is terrain surface disrupted at particular radius (where radius in the index). Length of
            this array naturally specifies disruption radius.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DynamicGroundEntityProto.BuildDurationPerProduct">
            <summary>
            Build duration per one quantity of product used.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DynamicGroundEntityProto.BuildExtraDuration">
            <summary>
            Build duration at the end of the build (after all products are provided).
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.DustParticlesSpec.DustScale">
            <summary>
            Scale of dust and also lifetime multiplier.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Dynamic.FuelTank">
            <summary>
            Represents a fuel tank of a vehicle.
            </summary>
            <remarks>
            The amount of fuel in the tank is represented as a number of ticks that a vehicle can run on it. Methods
            accepting product only accept products allowed in the tank.
            </remarks>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.FuelTank.FuelAvailabilityChanged">
            <summary>
            Invoked when fuel amount in the tank changes to zero or from zero ( <see cref="P:Mafi.Core.Entities.Dynamic.FuelTank.IsEmpty"/> changes). Parameter
            of the action is true if (and only if) the tank is empty ( <see cref="P:Mafi.Core.Entities.Dynamic.FuelTank.IsEmpty"/> == true).
            TODO: create own delegate type with named parameter?
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.FuelTank.FuelUnderReserveChanged">
            <summary>
            Invoked when fuel amount in the tank gets from above reserve to below reserve or vice versa. Parameter of the
            action is true if (and only if) the tank is under reserve ( <see cref="P:Mafi.Core.Entities.Dynamic.FuelTank.IsUnderReserve"/> == true).
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.FuelTank.m_remainingFuelDuration">
            <summary>
            Current state of fuel in the tank represented as number of ticks a vehicle can run on it.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.FuelTank.m_partialFuelConsumptionBuffer">
            <summary>
            How many percent of a single tick have been consumed. Vehicle consumption in percent is added here, if this
            value exceeds 100%, one tick of fuel is consumed. Allows to consume less fuel than one tick (used when a
            vehicle is idle).
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.FuelTank.consumeFuel(Mafi.Duration)">
            <summary>
            Lowers amount of fuel in the tank by the given duration.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.FuelTank.ConsumeFuelPerUpdate(Mafi.Core.Vehicles.VehicleFuelConsumption)">
            <summary>
            Expected to be called during vehicle's update. Lowers amount of fuel in the tank according to <paramref
            name="consumption"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.FuelTank.AddFuel(Mafi.Core.ProductQuantity)">
            <returns>Excessive fuel that we could not add.</returns>
        </member>
        <member name="T:Mafi.Core.Entities.Dynamic.FuelTankProto">
            <summary>
            Proto specifying a fuel tank. Does not inherit <see cref="T:Mafi.Core.Prototypes.Proto"/> as fuel tank it is not a separate
            game entity, it only works as part of <see cref="T:Mafi.Core.Entities.Dynamic.DrivingEntity"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.FuelTankProto.Product">
            <summary>
            Type of product accepted by fuel tank.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.FuelTankProto.Capacity">
            <summary>
            How much of this product can the fuel tank accept.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.FuelTankProto.Duration">
            <summary>
            How long will a vehicle run on a full fuel tank.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.FuelTankProto.ReserveDuration">
            <summary>
            How long a vehicle can operate on a reserve.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.FuelTankProto.IdleFuelConsumption">
            <summary>
            How many percent of full (normal) fuel consumption the vehicle consumes while idle.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.FuelTankProto.DurationToQuantity(Mafi.Duration)">
            <remarks>
            Rounds up if the conversion is not exact.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.FuelTankProtoBuilder.State.m_reserveDuration">
            <summary>
            How long a full fuel tank lasts after it gets down to reserve when used to fuel vehicle every tick.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Dynamic.PathfindingData">
            <summary>
            Immutable class which stores data for the pathfinder.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.IPathFindingVehicle.NavigationGoal">
            <summary>
            Current goal for navigation. The goal should NOT be cached since it is often pooled and the vehicle will
            clear the instance once new goal is set.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.IPathFindingVehicle.GetGoalTiles(System.Int32,Mafi.RelTile1i,Mafi.Tile2f@,Mafi.Collections.Lyst{Mafi.Tile2i},Mafi.Collections.Lyst{Mafi.Tile2i},Mafi.Tile2i@)">
            <summary>
            Fills given list with goal tiles for current goal. Some goals will always return the same tiles but some may
            return different tiles so this should be called as close to actual path-finding as possible.
            </summary>
            <returns>Whether this task is already completed.</returns>
        </member>
        <member name="T:Mafi.Core.Entities.Dynamic.PathFindingEntity">
            <summary>
            A dynamic entity that is able to navigate using path finding.
            TODO: Rename to PathFindingVehicle
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.PathFindingEntity.IsNavigating">
            <summary>
            Whether this entity is actively trying to reach its goal. Detailed info can be obtained from <see
            cref="P:Mafi.Core.Entities.Dynamic.PathFindingEntity.PfState"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.PathFindingEntity.NavigatedSuccessfully">
            <summary>
            Whether path finding was successful and the entity navigated to given goal. This may be false due to
            inability to find a path to the destination because entity will perform limited number of retries before it
            gives up.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.PathFindingEntity.NavigationFailed">
            <summary>
            When path finding fails multiple times and the vehicle has given-up on the navigation.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.PathFindingEntity.PfState">
            <summary>
            Extra status information about the entity state.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.PathFindingEntity.TrackExploredTiles">
            <summary>
            Whether to track explored tiles with the path-finder.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.PathFindingEntity.PfTask">
            <summary>
            Every entity have its own pathfinder task which is re-used for all path finding tasks of this entity. Saved
            using SaveLoadPfTask.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.PathFindingEntity.NavigateTo(Mafi.Core.PathFinding.Goals.IVehicleGoalFull,System.Int32,System.Nullable{Mafi.RelTile1i},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds a path to the given goal and navigates there. Stops any ongoing navigation. Use <see cref="P:Mafi.Core.Entities.Dynamic.PathFindingEntity.PfState"/>
            to monitor ongoing navigation.
            </summary>
            <remarks>
            This will also perform re-planning when the current path is occupied or when the goal moved.
            </remarks>
            <param name="goal">Goal specification.</param>
            <param name="maxRetries">
            Max number of retries. Each retry will extend goals according to the implementation
            of <see cref="!:VehicleGoal"/>.
            </param>
            <param name="allowSimplePathOnly">
            Whether to only allow simple mostly direct paths with no long detours. This restricts max path length.
            </param>
            <param name="disableUnstuck">
            Whether to disable automatic unstack trial when starting navigation.
            </param>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.PathFindingEntity.GetGoalTiles(System.Int32,Mafi.RelTile1i,Mafi.Tile2f@,Mafi.Collections.Lyst{Mafi.Tile2i},Mafi.Collections.Lyst{Mafi.Tile2i},Mafi.Tile2i@)">
            <summary>
            Fills given array with goal tiles. Some goals might be repeated due to tolerance radius. Returns <c>true</c>
            when the goal is already reached and no path finding is needed.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.PathFindingEntity.PauseNavigation">
            <summary>
            Temporarily pauses navigation - if the vehicle is moving due to navigation it is stopped. The navigation can
            be resumed using <see cref="M:Mafi.Core.Entities.Dynamic.PathFindingEntity.ResumeNavigation"/>
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.PathFindingEntity.ResumeNavigation">
            <summary>
            Resume navigation after it was paused.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.PathFindingEntity.StopNavigating(System.Boolean)">
            <summary>
            Stops the entity and terminates any tasks or path-finding.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.PathFindingEntity.CheckGoalValidityAndRetryNavigationIfNeeded(System.Boolean@)">
            <summary>
            Checks if the goal is valid and restarts path finding if needed. Returns true if goal is valid and
            additionally, <paramref name="pathFindingRetried"/> is set path finding was retried. Otherwise, if goal is
            not valid, false is returned. If false is returned, the <paramref name="pathFindingRetried"/> is always
            false.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Dynamic.SmoothDriver">
            <summary>
            Controls speed by smoothly accelerating and braking based on given parameters. This class provides simple API for
            controlling speed based on constraints such as maximal braking distance so the vehicle can always stop in time.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.SmoothDriver.StepsToFullStop">
            <summary>
            How many steps of braking will it take to reduce <see cref="P:Mafi.Core.Entities.Dynamic.SmoothDriver.Speed"/> to zero.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.SmoothDriver.DistanceToFullStop">
            <summary>
            Distance (accumulated speed per tick) that will be passed when we brake each step at 100%. Returned value is
            always positive.
            </summary>
            <remarks>This assumes that we perform braking before accumulation of the speed.</remarks>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.SmoothDriver.BrakeBy(Mafi.Percent)">
            <summary>
            Performs braking by decreasing magnitude of <see cref="P:Mafi.Core.Entities.Dynamic.SmoothDriver.Speed"/> by given percent.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.SmoothDriver.KeepSpeed(Mafi.Fix32)">
            <summary>
            Tries to keep given speed that will be optionally constrained by total distance traveled.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.SmoothDriver.KeepSpeed(Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Tries to keep given speed that will be additionally constrained by maximum brake distance and optionally by
            total distance traveled.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.SmoothDriver.EstMaxSpeedTo(Mafi.Fix32)">
            <summary>
            Estimates max speed in order to be able to brake in given distance. This estimation is optimistic because it
            uses simplified over-estimation of braking distance. The given distance has to be non-negative. Returned
            value is always non-negative.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Dynamic.Vehicle">
            <summary>
            A vehicle that handles jobs.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.Vehicle.AssignedTo">
            <summary>
            Entity to which is this vehicle assigned.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.Vehicle.NeedsJob">
            <summary>
            Whether this vehicle is idle and can accept a new job. This is when it is idle in the depot or returning to
            the depot. This value is false when <see cref="P:Mafi.Core.Entities.Dynamic.Vehicle.AssignedTo"/> is has value.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Dynamic.Vehicle.NeedsToGoForFuel">
            <summary>
            Whether this vehicle has to go for fuel on its own. Used for vehicles that fail to get a refueling truck
            assigned to them.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.Vehicle.Jobs">
            <summary>
            Jobs for the vehicle.
            </summary>g
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.Vehicle.ScrapPending">
            <summary>
            Whether this vehicle should go to depot to get scrapped.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.Vehicle.CanBeAssigned">
            <summary>
            Whether this vehicle ba be assigned.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Dynamic.Vehicle.IsStuck">
            <summary>
            Vehicle is stuck when it is located on occupied (non-pathable) tiles. Vehicle will try to unstuck itself
            with <see cref="T:Mafi.Core.Vehicles.Jobs.GetUnstuckJob"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.Vehicle.Mafi#Core#Entities#Dynamic#IAssignedVehicleEntityFriend#AssignTo(Mafi.Core.Entities.IEntityAssignedWithVehicles,System.Boolean)">
            <summary>
            Cancels all ongoing jobs and assigns this entity to given assignee.
            DANGER: This method is not bi-directional, it will not assign this vehicle on the owner's side
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.Vehicle.UnassignFrom(Mafi.Core.Entities.IEntityAssignedWithVehicles)">
            <summary>
            Unassigns this vehicle from given assignee and cancels all ongoing jobs.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.Vehicle.TryRequestScrap">
            <summary>
            Cancels all jobs and requests scrapping of this vehicle.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.Vehicle.CancelScrap">
            <summary>
            Cancels all jobs and cancels scrap request.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.IVehicleFriend.AlsoCancelAllOtherJobs(Mafi.Core.Vehicles.Jobs.VehicleJob)">
            <summary>
            Cancels all jobs in the vehicle queue. Caller's `Cancel` method is not called but all jobs including the
            caller are returned to pool and their data is reset. This should only be called as a last line in Cancel.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Dynamic.IVehicleFriend.CancelAllJobsExcept(Mafi.Core.Vehicles.Jobs.VehicleJob)">
            <summary>
            Cancels all jobs except given job.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.EmissionParams">
            <summary>
            Parameters for emissions. Currently used for machines only.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.EmissionParams.GameObjectsIds">
            <summary>
            GameObject ids to apply emissions on.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.EmissionParams.Delay">
            <summary>
            Delay from the point when machine starts to work before starting the emission.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.EmissionParams.Duration">
            <summary>
            Duration of the emission.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.EmissionParams.Intensity">
            <summary>
            Intensity of the emission.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.EmissionParams.DiffToOn">
            <summary>
            When turning on, how big increments to use per frame.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.EmissionParams.DiffToOff">
            <summary>
            When turning off, how big decrements to use per frame. Keep positive!
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.EmissionParams.Color">
            <summary>
            Color of emission.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.EmissionParams.AllTime(Mafi.Collections.ImmutableCollections.ImmutableArray{System.String},System.Single,System.Single,System.Single,System.Nullable{Mafi.ColorRgba})">
            <summary>
            Emission enabled all the time the machine runs.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.EmissionParams.Timed(Mafi.Collections.ImmutableCollections.ImmutableArray{System.String},Mafi.Duration,Mafi.Duration,System.Single,System.Single,System.Single,System.Nullable{Mafi.ColorRgba})">
            <summary>
            Played once per machine run (one run over recipe).
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.EntitiesBuilder">
            <summary>
            Helper class for convenient building entities such as buildings or vehicles.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.EntitiesBuilder.TryBuildLayoutEntityApprox``1(Mafi.Core.Entities.Static.StaticEntityProto.ID,Mafi.Tile2i,Mafi.Tile2i,Mafi.HeightTilesI,Mafi.Rotation90,System.Boolean,System.Boolean)">
            <summary>
            Attempts to build a layout entity all locations between <paramref name="fromLocation"/> and <paramref
            name="toLocation"/>
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.EntitiesCreator">
            <summary>
            Helper class that creates entities using resolver so that the user does not need to remember what
            parameters are passed to <see cref="M:Mafi.DependencyResolver.TryInvokeFactoryHierarchy``1(System.Object)"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.EntityAddReason.New">
            <summary>
            New entity that is added to the game and is being paid for.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.EntityAddReason.Move">
            <summary>
            Entity that is added just because it was moved. See <see cref="!:IMovableEntity"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.EntityRemoveReason.Remove">
            <summary>
            Entity that is removed from the game.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.EntityRemoveReason.Collapse">
            <summary>
            Entity collapsed.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.IEntitiesManager.OnUpgradeToBePerformed">
            <summary>
            Called just before upgrade is performed with non-upgraded entity.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.IEntitiesManager.OnUpgradeJustPerformed">
            <summary>
            Called just after upgrade is performed with upgraded entity.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.EntitiesManager.EntityAdded">
            <summary>
            Invoked when an entity gets added to the game. If you need also a reason why, use <see
            cref="P:Mafi.Core.Entities.EntitiesManager.EntityAddedFull"/> instead.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.EntitiesManager.EntityAddedFull">
            <summary>
            Invoked when an entity gets added to the game.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.EntitiesManager.EntityRemoved">
            <summary>
            Invoked when an entity gets removed from the game. If you need also a reason why, use <see
            cref="P:Mafi.Core.Entities.EntitiesManager.EntityRemovedFull"/> instead.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.EntitiesManager.EntityRemovedFull">
            <summary>
            Invoked when an entity gets removed from the game.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.EntitiesManager.EntitiesCount">
            <summary>
            Total number of managed entities.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.EntitiesManager.TryRemoveEntity(Mafi.Core.Entities.IEntity,Mafi.Core.Entities.EntityRemoveReason)">
            <summary>
            Removes given entity without destroying it. Returns whether the remove operation was successful.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.EntitiesManager.RemoveEntityNoChecks(Mafi.Core.Entities.IEntity,Mafi.Core.Entities.EntityRemoveReason)">
            <summary>
            Removes given entity without destroying it. This skips any removal checks.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.EntitiesManager.RemoveAndDestroyEntityNoChecks(Mafi.Core.Entities.IEntity,Mafi.Core.Entities.EntityRemoveReason)">
            <summary>
            Removes given entity from this manager and calls <see cref="M:Mafi.Core.Entities.Entity.OnDestroy"/> on it.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.EntitiesManager.TryRemoveAndDestroyEntityNoChecks(Mafi.Core.Entities.IEntity,Mafi.Core.Entities.EntityRemoveReason)">
            <summary>
            Tries to remove entity without validation checks and calls <see cref="M:Mafi.Core.Entities.Entity.OnDestroy"/> on it. It is valid
            to call this method with a non-existing entity. In that case nothing happens
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.EntitiesManager.TryRemoveAndDestroyEntity(Mafi.Core.Entities.IEntity,Mafi.Core.Entities.EntityRemoveReason)">
            <summary>
            Tries to removes given entity from this manager and if successful calls <see cref="M:Mafi.Core.Entities.Entity.OnDestroy"/> on it.
            Returns whether the entity was removed successfully.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.EntitiesManager.CanCutEntity(Mafi.Core.Entities.Static.IStaticEntity)">
            <summary>
            Returns success if the entity is under construction but not started
            and can be removed.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.EntitiesManager.TryUpgradeEntity(Mafi.Core.Entities.IUpgradableEntity)">
            <summary>
            This should be called once upgrade was already verified and was paid for.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Entity.Id">
            <summary>
            Unique ID of this entity.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Entity.IsPaused">
            <summary>
            Whether entity was paused by player. This halts any operation and construction.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Entity.OnDestroy">
            <summary>
            Destroys this entity. This also removes it from <see cref="T:Mafi.Core.Entities.EntitiesManager"/> if it is managed.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.EntityConfigData">
            <summary>
            Temporary bag of properties to copy from entities.
            Do not save this! If we need serialization, move this to string dict.
            The individual props can then be extension methods using the dict.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.EntityProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.EntityProto.ID.op_Implicit(Mafi.Core.Entities.EntityProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.EntityProto.Costs">
            <summary>
            Costs for the entity - price, maintenance, etc.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.EntityProto.Gfx.Color">
            <summary>
            Optional color of this model to apply on colorizable materials.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.EntityProto.Gfx.RendererIndex">
            <summary>
            This field is solely used by EntitiesRenderingManager and should not be touched.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.EntityValidators">
            <summary>
            Helper class that collects all entity validators as lazy dependencies and allows easy access to them.
            </summary>
            <remarks>
            Having all validators as lazy dependencies breaks common dependency loop when a validator also wants to subscribe
            to Entity Manager's entity added/removed events.
            </remarks>
        </member>
        <member name="P:Mafi.Core.Entities.IAssignedVehicles.Count">
            <summary>
            Count of all assigned vehicles.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.IAssignedVehicles.AllOf(Mafi.Core.Entities.Dynamic.DynamicEntityProto)">
            <summary>
            All of all assigned vehicles with the given proto.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.IAssignedVehicles.CountOf(Mafi.Core.Entities.Dynamic.DynamicEntityProto)">
            <summary>
            Count of all assigned vehicles with the given proto.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.IAssignedVehicles.AssignVehicle(Mafi.Core.Entities.Dynamic.Vehicle,System.Boolean)">
            <summary>
            Assigns a concrete vehicle to this entity.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.IAssignedVehicles.AssignVehicle(Mafi.Core.Entities.Dynamic.DynamicEntityProto)">
            <summary>
            Assigns a vehicle type to this entity. It is up to the entity to request concrete vehicles from <see
            cref="T:Mafi.Core.Vehicles.VehiclesManager"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.IAssignedVehicles.UnassignVehicle(Mafi.Core.Entities.Dynamic.Vehicle)">
            <summary>
            Unassigns concrete vehicle from this entity. This method is also called by the assigned vehicle when <see
            cref="M:Mafi.Core.Entities.Dynamic.Vehicle.UnassignFrom(Mafi.Core.Entities.IEntityAssignedWithVehicles)"/> is called.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.IAssignedVehicles.UnassignVehicle(Mafi.Core.Entities.Dynamic.DynamicEntityProto)">
            <summary>
            Unassigns a type vehicle from this entity. It is up to the entity to choose which vehicle should be
            unassigned.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.IAssignedVehicles.GetSpawnedVehicles">
            <summary>
            Returns all spawned vehicles.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.IDynamicCostProvider">
            <summary>
            Provides added cost for entity that are calculated on fly and can change.
            Example: unity for housing.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.IEntity.Id">
            <summary>
            Unique ID in this entity.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.IEntity.IsEnabled">
            <summary>
            Whether entity is enabled. Not enabled entity should not accept any inputs and should not do any work. This
            may be caused by construction state or player's pause.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.IEntity.IsPaused">
            <summary>
            Whether entity was paused by player. This halts any operation and construction.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.IEntity.CanBePaused">
            <summary>
            Whether it makes sense to pause this entity. If false, pause option should not be offered in the UI.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.IRenderedEntity">
            <summary>
            Entity that should be rendered in the world meaning a renderer should be auto-created by EntitiesRenderer.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.IRenderedEntity.RendererData">
            <summary>
            Data used solely by renderers. This should not be touched from sim or other places.
            </summary>
            <remarks>
            This data is an ulong to be able to store any data renderers need, usage of struct would be better but
            currently limiting. TODO: Rethink this and improve it once we get rid of MB-based rendering.
            </remarks>
        </member>
        <member name="T:Mafi.Core.Entities.IEntityWithAdditionRequest">
            <summary>
            Entity which has an addition request that should be verified before the entity is added.
            TODO: Kill this and use only proto-based validation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.IEntityWithAdditionRequest.GetAddRequest(Mafi.Core.Entities.EntityAddReason)">
            <summary>
            Gets request under which the current entity was added to the world.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.IEntityWithPosition.Position2f">
            <summary>
            It is cheaper to return only 2D position for some entities such as vehicles.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.IEntityObserver.OnEntityDestroy(Mafi.Core.Entities.IEntity)">
            <summary>
            Called when subscribed entity gets destroyed.
            NOTE: You have to un-register yourself after this.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.IUpgradableEntity">
            <summary>
            Represents an entity that can be upgraded.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.IUpgradableEntity.IsUpgradeAvailable(Mafi.Localization.LocStrFormatted@)">
            <summary>
            Implements custom upgrade verification for entity. To test whether this entity is upgradable use
            <see cref="M:Mafi.Core.Entities.IUpgrader.IsUpgradeAvailable(Mafi.Localization.LocStrFormatted@)"/>
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.IUpgradableEntity.UpgradeSelf">
            <summary>
            Upgrades itself.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.IUpgrader">
            <summary>
            Entity component that handles its upgrade process.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.IUpgrader.PriceToUpgrade">
            <summary>
            How much does the upgrade costs in total (including virtual products).
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.IUpgrader.ConstructionCostToUpgrade">
            <summary>
            Construction costs for the upgrades (virtual products removed).
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.IUpgrader.UpgradeExists">
            <summary>
            Whether upgrade exists.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.IUpgrader.UpgradeTitle">
            <summary>
            Title of the upgrade to be shown in the UI.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.IUpgrader.Icon">
            <summary>
            Icon of the upgraded item.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.IUpgrader.IsUpgradeVisible">
            <summary>
            Whether the upgrade should be offered to the player. This does not necessary mean that the upgrade is
            available. There might be something that is blocking the upgrade (e.g. not enough space or money). But still
            the player should know that there is a chance for upgrade.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.IUpgrader.IsUpgradeAvailable(Mafi.Localization.LocStrFormatted@)">
            <summary>
            Whether the upgrade is available immediately. This is more restrictive than <see cref="M:Mafi.Core.Entities.IUpgrader.IsUpgradeVisible"/>.
            When this is false it means that upgrade might be available but something is blocking it (e.g. not enough
            money).
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.IUpgrader.Upgrade">
            <summary>
            Performs upgrade of the current entity.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.IEntityAssignedWithVehicles">
            <summary>
            Interface for entities that can be assigned with vehicles (e.g. storage, excavator).
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.IEntityEnforcingAssignedVehicles.AreOnlyAssignedVehiclesAllowed">
            <summary>
            If true, only assigned vehicles can serve this building
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.ParticlesParams">
            <summary>
            Parameters for particles effects. Currently used for machines only.
            </summary>
            <remarks>
            If you add particle to a prefab but don't put this configuration for it it won't be played unless it is a child
            of a particle system that has such configuration.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Entities.ParticlesParams.SystemId">
            <summary>
            GameObject id of a particle system for which this configuration is.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.ParticlesParams.Delay">
            <summary>
            Delay from the point when machine starts to work before playing the particles.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.ParticlesParams.Duration">
            <summary>
            Duration of the particle system play time.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.ParticlesParams.UseUtilizationOnAlpha">
            <summary>
            Whether the alpha color should be updated to reflect the utilization.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.ParticlesParams.SupportedRecipesSelector">
            <summary>
            All recipes supported by this particle. If none than all recipes are supported.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.ParticlesParams.Loop(System.String,System.Boolean,System.Func{Mafi.Core.Factory.Recipes.RecipeProto,System.Boolean},System.Func{Mafi.Core.Factory.Recipes.IRecipe,Mafi.ColorRgba})">
            <summary>
            Particles will be played in loop all the time. They will be stopped only when the machine is stopped.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.ParticlesParams.Timed(System.String,Mafi.Duration,Mafi.Duration,System.Boolean,System.Func{Mafi.Core.Factory.Recipes.RecipeProto,System.Boolean},System.Func{Mafi.Core.Factory.Recipes.IRecipe,Mafi.ColorRgba})">
            <summary>
            Played once per machine run (one run over recipe).
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Priorities.IEntityWithCustomPriority.IsCustomPriorityVisible(System.String)">
            <summary>
            If false, custom priority configuration panel will be hidden.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Priorities.IEntityWithGeneralPriority.IsGeneralPriorityVisible">
            <summary>
            If false, priority configuration panel will be hidden.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Priorities.IEntityWithGeneralPriority.IsCargoAffectedByGeneralPriority">
            <summary>
            Used to show the right tooltip to the player.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.ClearingChecker">
            <summary>
            Validates whether a static entity can be successfully cleared before removal. This effectively prevents from
            deleting entities that are not ready for it e.g. last vehicle depot in the game or storage full of toxic waste.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Commands.CreateStaticEntityCmd.IsFree">
            <summary>
            Whether this entity was created as part of the initial game setup.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.Commands.CutStaticEntityForPasteCmd">
            <summary>
            Will remove but not destroy an entity. Has to be followed with
            <see cref="T:Mafi.Core.Entities.Static.Commands.DestroyAllEntitiesForPasteCmd"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Commands.FinishBuildOfStaticEntityCmd.PayWithUnity">
            <summary>
            Whether this should be paid for with unity. Otherwise it serves as a cheat basically.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.Commands.SpendUpointsOnEntitiesCmd">
            <summary>
            Will try to "smartly" apply upoints change on given entities.
            Toggles boost, or quick deliver / remove products.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.Commands.TryTransformEntityCmd">
             <summary>
             Tries to rotate / flip entity in place.
            
             Only applicable to non-constructed ghosts.
             </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.ConstructionManager">
             <summary>
             Handles construction and deconstruction of static entities.
             </summary>
             <remarks>
             Static entity construction has following states and events:
             <code>
             ConstructionState.NotInitialized
             * Initialize() => NotStarted
            
             ConstructionState.NotStarted
             * StartConstruction() => InConstruction
             * MarkConstructed() => Constructed with EntityConstructed invoked
            
             ConstructionState.InConstruction
             * ContinueConstruction() => InConstruction -or- Constructed (EntityConstructed invoked)
             * StartDeconstruction() => InDeconstruction -or- Deconstructed (no EntityStartedDeconstruction)
             * MarkConstructed() => Constructed (EntityConstructed invoked)
            
             ConstructionState.Constructed
             * StartDeconstruction() => InDeconstruction (EntityStartedDeconstruction invoked)
             * MarkDeconstructed() => Deconstructed (EntityStartedDeconstruction invoked if not already in deconstruction)
            
             ConstructionState.InDeconstruction
             * ContinueDeconstruction() => InDeconstruction -or- Deconstructed
             * StartConstruction() => InConstruction -or- Constructed (EntityConstructed invoked)
             * MarkDeconstructed() => Deconstructed
             </code>
             Note that <c>EntityConstructed</c> and <c>EntityStartedDeconstruction</c> events are made symmetric.
             This means that the <c>EntityStartedDeconstruction</c> event is only invoked when the entity is entering
             deconstruction from constructed state.
             </remarks>
        </member>
        <member name="P:Mafi.Core.Entities.Static.ConstructionManager.EntityConstructionNearlyFinished">
             <summary>
             Invoked when construction passes over (or deconstruction passes below) a threshold.
             This should be the point where construction cubes are fully covering the entity so rendering can for
             example swap models.
            
             Note: This event will not be invoked if construction manager does not get to see this progress transition
             or if construction state is also changing on the same tick.
             </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.ConstructionProgress.AlreadyRemovedCost">
            <summary>
            Sometimes we might need to consume products during the construction (e.g. per each ship's hp repair).
            Updating it here will make sure this class still works and UI shows meaningful information.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.ConstructionProgress.CurrentSteps">
            <summary>
            Number of currently completed construction steps. This increases for construction and decreases for
            destruction.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.ConstructionProgress.AlreadyProcessedSteps">
            <summary>
            Value that is set when this object is initialized but it is up to users to reset it whenever they process it.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.ConstructionProgress.AllowedSteps">
             <summary>
             A total amount of steps that CurrentSteps can reach to (either incrementing for construction
             or decrementing for deconstruction).
            
             Updated every-time after next step is about to be performed.
             </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.ConstructionProgress.SetProgressTo(Mafi.Percent)">
            <summary>
            Sets progress without adjustments for construction/deconstruction.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.ConstructionProgress.SetAdjustedProgressTo(Mafi.Percent)">
            <summary>
            Pushes progress to the target value. Value 100% means that the task is finished. During deconstruction
            this means that the actual <see cref="P:Mafi.Core.Entities.Static.ConstructionProgress.Progress"/> will set to 0% because that's what make it 100% done.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IConstructionProgress.CurrentSteps">
            <summary>
            Number of currently completed construction steps. This increases for construction and decreases for
            destruction.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IConstructionProgress.MaxSteps">
            <summary>
            Number of max steps.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IConstructionProgress.ExtraSteps">
            <summary>
            Number of extra steps that needs to be performed after all material is delivered (during construction).
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IConstructionProgress.IsNearlyFinished">
            <summary>
            Whether construction is nearly finished. This is important for rendering since entity
            will be always fully covered by construction cubes and renderers can switch blueprint for models
            and vice versa.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IConstructionProgress.IsDeconstruction">
            <summary>
            Whether this is actually a deconstruction.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.DefaultStaticEntityFactory">
            <summary>
            Default factory for static entities that take `StaticEntityProto` (or derived) and TileTransform as its first two
            arguments and all other arguments are resolved from the resolver.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.FreeConstructionManager">
            <summary>
            Test-only construction manager that makes all construction free and instantaneous.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IConstructionManager.EntityConstructed">
            <summary>
            Invoked when the entity is fully constructed. This can happen either after normal construction, or after
            cancellation of deconstruction. This is paired with <see cref="P:Mafi.Core.Entities.Static.IConstructionManager.EntityStartedDeconstruction"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IConstructionManager.EntityStartedDeconstruction">
            <summary>
            Invoked when the entity is started deconstruction. This can happen only after deconstruction from
            construction state, not after cancellation of ongoing construction. This is to keep symmetry with
            <see cref="P:Mafi.Core.Entities.Static.IConstructionManager.EntityConstructed"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IConstructionManager.EntityConstructionStateChanged">
            <summary>
            Used in UI to track state changes. Not recommended for business logic. rather use
            EntityConstructed, EntityStartedDeconstruction to manage entities.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IConstructionManager.StartConstruction(Mafi.Core.Entities.Static.IStaticEntity)">
            <summary>
            Starts construction for given entity. This can be also used to stop deconstruction and resume construction.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IConstructionManager.StartDeconstruction(Mafi.Core.Entities.Static.IStaticEntity,System.Boolean,Mafi.Core.Entities.EntityRemoveReason)">
            <summary>
            Starts deconstruction of given entity. This can happen also when the entity is under construction.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IConstructionManager.MarkConstructed(Mafi.Core.Entities.Static.IStaticEntity,System.Boolean,System.Boolean)">
            <summary>
            This can be called by the static entity to notify this manager that it was fully constructed. This happens
            during "insta-build" or during r=insta-replacement of already-built entities like splitting constructed
            transport.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IConstructionManager.CancelConstructionAndReturnBuffers(Mafi.Core.Entities.Static.IStaticEntity)">
            <summary>
            Returns all products from construction/destruction buffers. This can be used during upgrades to avoid
            products of destroyed entity being marked as destroyed.
            If no construction is in progress, returns <see cref="F:Mafi.Core.Economy.AssetValue.Empty"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IConstructionManager.GetDeconstructionValueFor(Mafi.Core.Entities.Static.IStaticEntity)">
            <summary>
            Returns deconstruction value of entity. This entity can be under construction.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IConstructionManager.FillConstructionBuffersWith(Mafi.Core.Entities.Static.IStaticEntity,Mafi.Core.Economy.AssetValue,System.Nullable{Mafi.Percent})">
            <summary>
            Fills construction buffers of given entity as much as possible and returns unused value.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.ConstructionState.PreparingUpgrade">
            <summary>
            Fetching materials for upgrade (entities should still work).
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.ConstructionState.BeingUpgraded">
            <summary>
            Performing upgrade (entity should act as paused).
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IProductBufferReadOnly.Product">
            <summary>
            Product contained by this buffer.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IProductBufferReadOnly.UsableCapacity">
            <summary>
            Available capacity for storing.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IProductBufferReadOnly.Capacity">
            <summary>
            Storage capacity of this buffer.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IProductBufferReadOnly.Quantity">
            <summary>
            Available quantity for removing.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IProductBuffer.StoreAsMuchAs(Mafi.Quantity)">
            <summary>
            Stores as much given quantity as possible. Returns quantity that was not able to fit to this buffer.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IProductBuffer.RemoveAsMuchAs(Mafi.Quantity)">
            <summary>
            Removes as much quantity as possible with regards to given max quantity constraint. Returns how much was
            removed.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IProductBufferExtensions.PercentFull(Mafi.Core.Entities.Static.IProductBuffer)">
            <summary>
            How full the buffer is in percent.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IProductBufferExtensions.CanStore(Mafi.Core.Entities.Static.IProductBuffer,Mafi.Quantity)">
            <summary>
            Returns true if given quantity can be stored to this buffer.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IProductBufferExtensions.CanRemove(Mafi.Core.Entities.Static.IProductBuffer,Mafi.Quantity)">
            <summary>
            Returns true if requested quantity can be removed from this buffer.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IProductBufferExtensions.RemoveExactly(Mafi.Core.Entities.Static.IProductBuffer,Mafi.Quantity)">
            <summary>
            Removes the given amount from the buffer and fires assert if failed. Use this only when you are sure that you
            can remove the quantity.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IProductBufferExtensions.StoreExactly(Mafi.Core.Entities.Static.IProductBuffer,Mafi.Quantity)">
            <summary>
            Stores the given amount to the buffer and fires assert if failed. Use this only when you are sure that you
            can store the quantity.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IProductBufferExtensions.TryRemove(Mafi.Core.Entities.Static.IProductBuffer,Mafi.Quantity)">
            <summary>
            Tries to remove given amount of quantity. Returns true if requested quantity was removed, otherwise false.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IProductBufferExtensions.StoreAsMuchAs(Mafi.Core.Entities.Static.IProductBuffer,Mafi.Core.ProductQuantity)">
            <summary>
            Stores as much quantity from given <see cref="T:Mafi.Core.ProductQuantity"/> as possible. Returns quantity that was not
            able to fit to this buffer wrapped in <see cref="T:Mafi.Core.ProductQuantity"/> with corresponding product.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IProductBufferExtensions.StoreAsMuchAsReturnStored(Mafi.Core.Entities.Static.IProductBuffer,Mafi.Quantity)">
            <summary>
            Stores as much quantity from given <see cref="T:Mafi.Core.ProductQuantity"/> as possible. Returns quantity that was stored.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IStaticEntity.OccupiedTiles">
            <summary>
            Relative tiles occupied by the entity (relative to <see cref="P:Mafi.Core.Entities.Static.IStaticEntity.CenterTile"/>).
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IStaticEntity.OccupiedVertices">
            <summary>
            Occupied vertices by the entity (relative to <see cref="P:Mafi.Core.Entities.Static.IStaticEntity.CenterTile"/>).
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IStaticEntity.OccupiedVerticesCombinedConstraint">
            <summary>
            Combined constraint of all <see cref="P:Mafi.Core.Entities.Static.IStaticEntity.OccupiedVertices"/> (using logical or).
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IStaticEntity.VehicleSurfaceHeights">
             <summary>
             Tile vertices that can be accessed by vehicles, and the height of the vehicle surface. Note that only tiles
             with height in all four corners are navigable.
            
             All occupied tiles at the same 2D coordinate as vehicle tiles will be ignored for the purpose of vehicle
             collision for this entity. This allows entity to occupy tiles but allow vehicle access.
             </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IStaticEntity.Value">
            <summary>
            Total value of this entity, including virtual products (amount payed when built). This is used to determine sell value. Entities that
            were obtained for free may have value of zero.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IStaticEntity.ConstructionCost">
            <summary>
            Amount of products needed to construct this entity  (virtual products are filtered out). This may be lower than
            <see cref="P:Mafi.Core.Entities.Static.IStaticEntity.Value"/> because some of the cost may be already payed from other entities (e.g. upgrade of entity, or extension
            of transport).
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IStaticEntity.CancelConstructionAndReturnBuffers">
            <summary>
            Cancels construction and returns buffer. If the entity was being constructed or deconstructed, this call
            sets it as deconstructed. Otherwise, when entity is already constructed/deconstructed, no state is changed
            and <see cref="F:Mafi.Core.Economy.AssetValue.Empty"/> is returned.
            </summary>
            TODO: Call this via manager only
        </member>
        <member name="M:Mafi.Core.Entities.Static.IStaticEntity.CanMoveFromPendingDeconstruction">
            <summary>
            In case deconstruction is pending, this is queried by the construction manager every sim to
            make sure the entity is working toward its deconstruction. Used in storage.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IStaticEntity.StartDeconstructionIfCan">
            <summary>
            Requests entity to start a deconstruction. This can be postponed in case
            there is some clearing needed first like in case of storage.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IStaticEntity.NotifyUnevenTerrain(Mafi.Collections.IReadOnlySet{System.Int32},System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Notifies entity about uneven terrain and if the <paramref name="canCollapse"/> is true,
            <see cref="M:Mafi.Core.Entities.Static.IStaticEntity.TryCollapseOnUnevenTerrain(Mafi.Collections.IReadOnlySet{System.Int32},Mafi.Core.Entities.Static.EntityCollapseHelper)"/> will be called soon in the future.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IStaticEntity.TryCollapseOnUnevenTerrain(Mafi.Collections.IReadOnlySet{System.Int32},Mafi.Core.Entities.Static.EntityCollapseHelper)">
            <summary>
            Called when some terrain under entity constrains are violated. It is up to this method to decide whether
            this entity should collapse or not. Returns whether the entity was destroyed.
            </summary>
            <param name="groundVerticesViolatingConstraints">Indices of ground vertices that are violating terrain
            constraints.</param>
            <param name="collapseHelper">Use this helper to make the collapse operation.</param>
        </member>
        <member name="M:Mafi.Core.Entities.Static.IVirtualBufferProvider.GetBuffer(Mafi.Core.Products.ProductProto,Mafi.Core.Entities.Static.IStaticEntity)">
            <summary>
            Returns a buffer for requested product.
            </summary>
            <param name="product">Requested product, should be one of <see cref="P:Mafi.Core.Entities.Static.IVirtualBufferProvider.ProvidedProducts"/>.</param>
            <param name="entity">Entity that requested the buffer.</param>
        </member>
        <member name="T:Mafi.Core.Entities.Static.IVirtualBuffersMap">
            <summary>
            Provider of virtual buffers, allowing entities to use and generate virtual products (like electricity).
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.Layout.EntityLayout">
            <summary>
            Entity layout represented as [relative x, relative y, thickness]. Coordinate (0, 0) is the origin of the entity
            and is always at the low-xy corner of the entity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.EntityLayout.ANY_COMPATIBLE_PORT">
            <summary>
            Port selector matching all compatible ports.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.EntityLayout.SourceLayoutStr">
            <summary>
            Original layout string. Can be empty if not available. Never null.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.EntityLayout.LayoutTiles">
            <summary>
            Data about each individual tile of this layout. Mainly their height and constraints. Tiles are ordered in the
            order given to ctor, which should be row-major order.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.EntityLayout.TerrainVertices">
            <summary>
            Terrain vertices of this layout. Note that every terrain tile has four vertices but neighboring tiles will
            share vertices. Each vertex that touches at least one tile is in this array.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.EntityLayout.VehicleSurfaceHeights">
            <summary>
            Height of vehicle-accessible tiles and their neighbors. Unlike <see cref="F:Mafi.Core.Entities.Static.Layout.EntityLayout.LayoutTiles"/> these values are
            "vertices of tiles", so for every navigable tile (x, y), height will also exist at (x + 1, y), (x, y + 1),
            and (x + 1, y + 1).
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.EntityLayout.Ports">
            <summary>
            I/O ports on this entity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.EntityLayout.LayoutParams">
            <summary>
            Extra parameters that are needed for layout construction or validation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.EntityLayout.LayoutSize">
            <summary>
            Occupied size of this layout [size x, size y, height].
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.EntityLayout.OriginTile">
            <summary>
            Custom origin tile (in layout coord system).
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.EntityLayout.CoreMin">
            <summary>
            Origin of the core part of this layout. Core part is the part considered for center computation. This is in
            relative coordinates of the layout.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.EntityLayout.CoreMax">
            <summary>
            Max coordinate of the core layout part.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.Layout.EntityLayout.CoreSize">
            <summary>
            Size of the layout core.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.EntityLayout.TilesCount">
            <summary>
            Total number of occupied 3D tiles.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.EntityLayout.CombinedConstraint">
            <summary>
            Combined constraint of all tiles. Each flag bit is set if there is at least one tile with that constraint.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.EntityLayout.CollapseVerticesThreshold">
            <summary>
            Entity will collapse if the number of vertices violating height constraints IS GREATER than this threshold.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.EntityLayout.PlacementHeightRange">
            <summary>
            Valid placement height range determined by <see cref="F:Mafi.Core.Entities.Static.Layout.LayoutTile.MinTerrainHeight"/>
            and <see cref="F:Mafi.Core.Entities.Static.Layout.LayoutTile.MaxTerrainHeight"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.EntityLayout.GetCenter(Mafi.Core.TileTransform)">
            <summary>
            Exact center and center of rotation. All 3D models are placed on this coordinate relative to layout origin.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.EntityLayout.ResolvePortSelectorOrThrow(System.String,Mafi.IoPortType,Mafi.Core.Products.ProductType)">
            <summary>
            Returns an array of ports matching given criteria. Throws an exception if no port is matched.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.EntityLayout.Transform(Mafi.RelTile2i,Mafi.Core.TileTransform)">
            <summary>
            Transforms given relative tile coordinate from this layout space to absolute coordinate based on given
            <paramref name="transform"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.EntityLayout.TransformF_Point(Mafi.RelTile2f,Mafi.Core.TileTransform)">
            <summary>
            Transforms a layout point (not a tile) relative to the true center and returns absolute position.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.EntityLayout.TransformF_PointRelToCore(Mafi.RelTile2f,Mafi.Core.TileTransform)">
            <summary>
            Transforms a 2D point (not a tile) relative to the true center and returns absolute position.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.EntityLayout.Transform(Mafi.RelTile3i,Mafi.Core.TileTransform)">
            <summary>
            Transforms given relative tile coordinate from this layout space to absolute coordinate based on given
            <paramref name="transform"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.EntityLayout.GetCoreOffset">
            <summary>
            Center of rotation when rotating tiles but keep in mind that the entity is not placed/aligned on this origin.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.EntityLayout.GetCoreOffsetF">
            <summary>
            True center of rotation but keep in mind that the entity is not placed/aligned on this origin.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.EntityLayout.TransformRelative(Mafi.RelTile2i,Mafi.Core.TileTransform)">
            <summary>
            Transforms given relative tile coordinate from this layout space to entity relative space (relative to its
            origin). To transform a coordinate to absolute coord use <see cref="M:Mafi.Core.Entities.Static.Layout.EntityLayout.Transform(Mafi.RelTile3i,Mafi.Core.TileTransform)"/>.
            </summary>
            <remarks>
            This transform does not simply rotate around (LayoutSize / 2) because it is off-center for layouts with even
            sizes. In order to prevent wobbling we need to transform around real center if possible. The only time this
            will introduce a little wobble is when one size is even and other odd. In this case there is no "stable"
            solution due to integer grid.
            </remarks>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.EntityLayout.TransformRelativeF_Point(Mafi.RelTile2f,Mafi.Core.TileTransform)">
            <summary>
            Transforms a point around "true" core center.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.Layout.EntityLayoutParams">
            <summary>
            Extra parameters that are needed for layout construction or validation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.EntityLayoutParams.CustomCollapseVerticesThreshold">
            <inheritdoc cref="F:Mafi.Core.Entities.Static.Layout.EntityLayout.CollapseVerticesThreshold"/>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.EntityLayoutParams.#ctor(System.Predicate{Mafi.Core.Entities.Static.Layout.LayoutTile},System.Boolean,System.Collections.Generic.IEnumerable{Mafi.Core.Entities.Static.Layout.CustomLayoutToken},System.Boolean,System.Nullable{Mafi.Core.Prototypes.Proto.ID},System.String[],System.Func{Mafi.Core.Entities.Static.Layout.TerrainVertexRel,System.Char,Mafi.Core.Entities.Static.Layout.TerrainVertexRel},System.Nullable{System.Int32},System.Nullable{Mafi.Core.ThicknessIRange})">
            <param name="customCollapseVerticesThreshold">Entity will collapse if the number of vertices violating
            height constraints IS GREATER than this threshold.</param>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.LayoutTokenSpec.#ctor(System.Int32,System.Int32,Mafi.Core.Entities.Static.Layout.LayoutTileConstraint,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{Mafi.Fix32},System.Nullable{Mafi.Core.Prototypes.Proto.ID},System.Nullable{Mafi.Core.Prototypes.Proto.ID},System.Boolean)">
            <param name="heightFrom">Starting height. Value 0 is on the ground.</param>
            <param name="heightToExcl">Final height (exclusive). Value 5 will occupy tiles up to and including
            height 4.</param>
            <param name="constraint"></param>
            <param name="terrainSurfaceHeight">When specified, terrain surface will be set to this value during
            construction. The <paramref name="minTerrainHeight"/> and <paramref name="maxTerrainHeight"/> will be
            also set to this value and <see cref="F:Mafi.Core.Entities.Static.Layout.LayoutTileConstraint.Ground"/> will be added to
            <paramref name="constraint"/>.</param>
            <param name="minTerrainHeight">When set, entity will be in danger of collapse when terrain below the tile
            is lower than specified value.</param>
            <param name="maxTerrainHeight">When set, entity will be in danger of collapse when terrain below the tile
            is higher than specified value.</param>
            <param name="vehicleHeight">Height of vehicle surface.</param>
            <param name="terrainMaterialId">When specified, one tile of terrain will be set to this material.</param>
            <param name="surfaceId">When specified, surface of specified ID will be placed on this tile.</param>
            <param name="isRamp"></param>
        </member>
        <member name="T:Mafi.Core.Entities.Static.Layout.EntityLayoutParser">
            <summary>
            Implements parsing of layout entity ASCII layout.
            </summary>
            <remarks>
            This class is not registered as dependency because it is being used before dependency resolver is created.
            </remarks>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.EntityLayoutParser.ParseLayoutOrThrow(System.String[])">
            <summary>
            Parses given layout and normalizes it by cropping spaces around.
            </summary>
            <exception cref="T:Mafi.Core.Entities.Static.Layout.InvalidEntityLayoutException">When layout is not valid.</exception>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.EntityLayoutParser.ParseLayoutOrThrow(Mafi.Core.Entities.Static.Layout.EntityLayoutParams,System.String[])">
            <summary>
            Parses given layout and normalizes it by cropping spaces around.
            </summary>
            <exception cref="T:Mafi.Core.Entities.Static.Layout.InvalidEntityLayoutException">When layout is not valid.</exception>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.EntityLayoutParser.tryGetPortType(Mafi.Core.Entities.Static.Layout.EntityLayoutParser.PortLayout,Mafi.Collections.Dict{Mafi.Vector2i,Mafi.Core.ThicknessIRange},Mafi.IoPortType@,Mafi.Vector2i@,System.String@)">
            <summary>
            Computes port type based on direction char and presence of entity.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.LayoutEntity.#ctor(Mafi.Core.EntityId,Mafi.Core.Entities.Static.Layout.LayoutEntityProto,Mafi.Core.TileTransform,Mafi.Core.Entities.Static.IConstructionManager)">
            <summary>
            Creates a stub instance (for loading).
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.LayoutEntityAddRequest.GetPooledInstanceToCreateEntity(Mafi.Core.Entities.Static.Layout.LayoutEntityProto,Mafi.Core.Entities.Static.Layout.EntityAddRequestData)">
            <summary>
            Returns an instance (either from pool or new one).
            NOTE: The caller should perform operation and then return the object to the pool. Instances obtained from the
            pool should have very short life-span. For long-living objects create an instance using new.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.LayoutEntityAddRequest.ReturnToPool">
            <summary>
            Returns this instance to the object pool.
            IMPORTANT: The caller is responsible to ensure that he is the only owner of this instance and no other object
            have reference to this object.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.LayoutEntityAddRequest.#ctor(Mafi.Core.Entities.Static.Layout.LayoutEntity,Mafi.Core.Entities.EntityAddReason,System.Predicate{Mafi.Core.EntityId},System.Boolean)">
            <summary>
            This ctor without pooling is needed since we don't have a concept of pooling for general <see
            cref="!:IEntity.GetAddRequest"/>. Also this kind of instance is created only once when a new entity is added so
            it is not that often.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.BoostCost">
            <summary>
            Null if boost not supported.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.Layout">
            <summary>
            Entity layout in relative coordinates.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.Ports">
            <summary>
            Available binding ports of this entity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.InputPorts">
            <summary>
            Input ports of this entity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.OutputPorts">
            <summary>
            Output ports of this entity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.CloningDisabled">
            <summary>
            Whether this entity is allowed to be cloned.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.IsUnique">
            <summary>
            Only one instance of this proto's entity is allowed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.CannotBeReflected">
            <summary>
            Flip is disabled if true.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.Graphics">
            <summary>
            3D model of this entity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.Gfx.PrefabOrigin">
            <summary>
            Custom prefab origin. This can be used when a prefab has incorrect origin.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.Gfx.IconPath">
            <summary>
            Path for icon sprite.
            </summary>
            <remarks>This path is valid only after <see cref="M:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.Gfx.Initialize(Mafi.Core.Entities.Static.Layout.LayoutEntityProto)"/> was called.</remarks>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.Gfx.IconIsCustom">
            <summary>
            Whether custom icon path was set. Otherwise, icon path is automatically generated.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.Gfx.Categories">
            <summary>
            All toolbar categories the entity belongs to.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.Gfx.InstancedRendererIndex">
            <summary>
            This is used solely by the implementation of IEntitiesRenderer that renders this entity.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.VisualizedLayers">
            <summary>
            A list of resources to be displayed when an entity is being laid down or moved.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.VisualizedLayers.TerrainDesignators">
            <summary>
            Whether to enable terrain designators (mining,dumping,concreting);
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutEntityProto.VisualizedLayers.TreeDesignators">
            <summary>
            Whether to enable tree harvesting designators.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.Layout.LayoutTile">
            <summary>
            Represents information about a single relative tile of a layout.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutTile.Coord">
            <summary>
            Relative coordinate.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutTile.OccupiedThickness">
            <summary>
            Occupied thickness tiles (from inclusive, to exclusive).
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutTile.Constraint">
            <summary>
            Constraint for the current tile. Constraints are validated via <see
            cref="T:Mafi.Core.Terrain.LayoutEntityTerrainValidator"/>
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.LayoutTile.HasVehicleSurface">
            <summary>
            Whether this tile has vehicle surface. This guarantees that all 4 corners of this tile have defined
            vehicle surface.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.Layout.LayoutTileConstraint">
            <summary>
            Constraint for a single tile of an entity layout. For instance if a tile of the entity is allowed to be only
            above the ocean or flat ground.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.OccupiedVertexRelative.LowestTileIndex">
            <summary>
            Index of occupied tile. If there are more than one tile touching this vertex, it will be the lowest.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.Layout.OccupiedVertexRelative.MergeWithRelaxedHeightConstraints(Mafi.Core.Entities.Static.Layout.OccupiedVertexRelative)">
            <summary>
            Chooses the less strict min/max terrain height constraints while merging.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.ToolbarCategoryProto.IconPath">
            <summary>
            Path for icon sprite.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.Layout.ToolbarCategoryProto.IsTransportBuildAllowed">
            <summary>
            Whether transport building is allowed while this menu is open (and entity laying is not active).
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.OccupiedTerrainVertexManger">
            <summary>
            Occupied vertices of static entities are tricky to track since there could many entities touching
            a single vertex. This manager simplifies the work with them.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.ProductBuffer">
            <summary>
            Buffer for a limited quantity of anything. Handles safe deposit and take methods that always ensure correctness
            of the operations.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.ProductBuffer.Quantity">
            <summary>
            Quantity stored in the buffer.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.ProductBuffer.Capacity">
            <summary>
            Total capacity of the buffer.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.ProductBuffer.Product">
            <summary>
            Product stored in the buffer.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.ProductBuffer.CanStore(Mafi.Core.ProductQuantity)">
            <summary>
            Whether the given product and quantity can be stored to this buffer.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.ProductBuffer.CanStore(Mafi.Quantity)">
            <summary>
            Whether the given quantity can be stored to this buffer.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.ProductBuffer.StoreAsMuchAs(Mafi.Quantity)">
            <summary>
            Stores as much given quantity as possible. Returns quantity that was not able to fit to this buffer.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.ProductBuffer.StoreAsMuchAs_DoNotReport(Mafi.Quantity)">
            <summary>
            This is used between storages to avoid reporting quantities via global stats.
            Returns quantity that was not able to fit to this buffer.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.ProductBuffer.StoreAsMuchAs(Mafi.Core.ProductQuantity)">
            <summary>
            Stores as much quantity from given <see cref="P:Mafi.Core.Entities.Static.ProductBuffer.ProductQuantity"/> as possible. Returns quantity that was not
            able to fit to this buffer wrapped in <see cref="P:Mafi.Core.Entities.Static.ProductBuffer.ProductQuantity"/> with corresponding product.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.ProductBuffer.ForceNewCapacityTo(Mafi.Quantity)">
            <summary>
            This will force a new capacity which can also cause the buffer to overflow.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.ProductBuffer.SetCapacityAsLessAs(Mafi.Quantity)">
            <summary>
            Tries to reduce the capacity to the given one. If there is more quantity it will shrink to it at least.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.ProductBuffer.CanRemove(Mafi.Quantity)">
            <summary>
            Whether the requested quantity can be removed from this buffer.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.ProductBuffer.RemoveAsMuchAs(Mafi.Quantity)">
            <summary>
            Removes as much quantity as possible with regards to given max quantity constraint. Returns how much was
            removed.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.ProductBuffer.RemoveAsMuchAs_DoNotReport(Mafi.Quantity)">
            <summary>
            This is used between storages to avoid reporting quantities via global stats.
            Returns how much was removed.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.ProductBuffer.Clear">
            <summary>
            Clears the buffer. Return how much was removed.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.ProductBuffer.TryChangeProduct(Mafi.Core.Products.ProductProto)">
            <summary>
            Changes product of this buffer. This only succeeds when the buffer is empty.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.IProtoWithReservedOcean.ReservedOceanAreasSets">
            <summary>
            Specifies one or more reserved areas sets. The <see cref="T:Mafi.Core.Entities.Static.IStaticEntityWithReservedOcean"/> will maintain
            the first valid set.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.ReservedOceanAreaState.AreasSetsValidity">
            <summary>
            Bit masks for sets validity, each bit represents an area. Bit is 0 when valid, 1 when invalid.
            Set is valid if its mask is equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.ReservedOceanAreaState.NotifyOceanAreaStatusChanged(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Called when ocean area is blocked or unblocked.
            </summary>
            <remarks>Note that this is being called during load.</remarks>
        </member>
        <member name="T:Mafi.Core.Entities.Static.StaticEntitiesTerrainInteractionManager">
            <summary>
            Handles interaction between terrain and static entities such validation and collapse detection.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.StaticEntity.Prototype">
            <summary>
            Prototype of this entity.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.StaticEntity.CenterTile">
            <summary>
            Tile that is considered to be the center of the entity. It is often used for distance computation.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.StaticEntity.OccupiedTiles">
            <summary>
            Tile coords occupied by the entity.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.StaticEntity.IsEnabled">
            <summary>
            Whether entity is enabled. Not enabled entity should not accept any inputs and should not do any work. This
            may be caused by construction state or player's pause.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.StaticEntity.ConstructionProgress">
            <summary>
            Construction state is valid only when the entity is in construction or destruction.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Static.StaticEntity.Ports">
            <summary>
            All I/O ports of this entity.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.StaticEntity.TryCollapseOnUnevenTerrain(Mafi.Collections.IReadOnlySet{System.Int32},Mafi.Core.Entities.Static.EntityCollapseHelper)">
            <summary>
            Default implementation collapses buildings based on the number of ground vertices that violates constraint
            compared to the total count.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.StaticEntity.GetCustomPfTargetTiles(System.Int32,Mafi.Collections.Lyst{Mafi.Tile2i})">
            <summary>
            Fills up custom target tiles. This happens only when a vehicle requested custom target tiles.
            Returns true if the vehicle is already at the goal.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.StaticEntity.SetConstructionState(Mafi.Core.Entities.Static.ConstructionState)">
            <summary>
            WARNING: Never set this directly, always use ConstructionManager otherwise rendering
            won't get notified about it.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.StaticEntity.StartDeconstructionIfCan">
            <summary>
            Starts deconstruction.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.StaticEntity.CanStartDeconstruction">
            <summary>
            Whether deconstruction can be started on this entity. If the entity needs to do some custom clearing after
            deconstruction started, the <see cref="!:OnDeconstructionStarted"/> method should be overridden. If this method
            returns <c>false</c> the entity is not removable using standard remove tool in game.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.StaticEntityOceanReservationManager">
             <summary>
             Monitors terrain changes at ocean areas and notifies if they are blocked or unblocked.
             </summary>
             <remarks>
             This class groups areas monitoring and makes it way more effective than if we were to just monitor each
             area separately.
            
             This class is serializable to keep area sizes fixed between saves even if area size changes in the proto.
             This allows making changes to areas without breaking old saves.
             </remarks>
        </member>
        <member name="M:Mafi.Core.Entities.Static.StaticEntityOceanReservationManager.initAfterLoad(Mafi.DependencyResolver)">
            <summary>
            Reconstructs `m_monitoredChunks` and `m_nonOceanTilesCache`.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.StaticEntityPfTargetTiles">
            TODO: This could be pre-computed in proto for layout entities.
        </member>
        <member name="F:Mafi.Core.Entities.Static.StaticEntityPfTargetTiles.m_cache">
            <summary>
            Cache for perimeter tiles at distance d. This list is indexed by d - 1.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.StaticEntityPfTargetTiles.TileWithNbrMask.NbrMask">
            <summary>
            Bit at index i is set if the original tile has no neighbor at that i-th direction.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.StaticEntityProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.StaticEntityProto.ID.op_Implicit(Mafi.Core.Entities.Static.StaticEntityProto.ID)~Mafi.Core.Entities.EntityProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Entities.EntityProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.StaticEntityProto.ID.op_Implicit(Mafi.Core.Entities.Static.StaticEntityProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.StaticEntityProto.VehicleGoalHeightAllowedRange">
            <summary>
            If specified, only allowed vehicle goals are in this height range relative to entity origin (+- threshold).
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Static.StaticEntityProto.Gfx.HideBlockedPortsIcon">
            <summary>
            Whether to not display blocked ports icon for this entity.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.StoredQuantityBuffer">
            <summary>
            This buffer reports its quantity as stored and enables retrieval of products.
            This is used for output buffers of machines and other buildings.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Static.UpgradeCostResolver">
             <summary>
             Helps to resolve upgrade costs.
            
             Here is a simple example:
             Current entity cost: 20 CP
             Upgraded entity cost: 20 CP2
             There is a following recipe: 20 CP + 10 Kittens => 10 CP2
             The new upgrade cost will be: 10 CP2 + 10 Kittens
             - because the previous 20 CP can convert to 10 CP2 + 10 Kittens
             - this avoid previous situation where upgrading entity was more expensive than rebuilding it entirely
            
             However there are quite few limits, e.g. we can't at this stage solve 20 CP -> 20 CP3
             as this requires two hops. It would also get kinda strange with all the semi-products
             piling up. So try to avoid jumps like this.
            
             We also only try to resolve product marked with <see cref="T:Mafi.Core.Entities.Static.AllowProductDiscountInUpgrade"/>.
             The reason is that we are not interested in resolving things like lab equipment that is part
             of labs cost.
             </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.UpgradesManager.continueUpgrade(Mafi.Core.Entities.IUpgradableEntity,Mafi.Core.Entities.Static.EntityConstructionProgress)">
            <summary>
            Returns true if upgrade should be removed.
            </summary>
        </member>
        <member name="M:Mafi.Core.Entities.Static.UpgradesManager.TryFinishUpgradeStateIfExists(Mafi.Core.Entities.IUpgradableEntity,System.Boolean,System.String@)">
            <summary>
            This just moves progress, a sim step still needs to be performed to finish the upgrade.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Validators.EntityValidationResult.IsSuccess">
            <summary>
            Whether entity addition/removal was successful.
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Validators.EntityValidationResult.ErrorMessageForPlayer">
            <summary>
            Error message if <see cref="F:Mafi.Core.Entities.Validators.EntityValidationResult.IsSuccess"/> == false, empty string otherwise.
            This message is shown to the player. For debug use <see cref="F:Mafi.Core.Entities.Validators.EntityValidationResult.ErrorMessage"/>
            </summary>
        </member>
        <member name="F:Mafi.Core.Entities.Validators.EntityValidationResult.ErrorMessage">
            <summary>
            Error message if <see cref="F:Mafi.Core.Entities.Validators.EntityValidationResult.IsSuccess"/> == false, empty string otherwise.
            This message is used in logs.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Validators.IEntityAdditionValidator">
            <summary>
            Helper interface implemented transitively by classes that validate whether entities can be added to the world.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Validators.IEntityAdditionValidator`1">
            <summary>
            Any class that implements this interface states that it wants to validate whether every entity with a request
            assignable to <see cref="!:TRequest"/> can be added to the world. Classes can implement multiple of these
            interfaces.
            </summary>
            <typeparam name="TRequest">Type of the request supported by the validator.</typeparam>
        </member>
        <member name="T:Mafi.Core.Entities.Validators.IEntityAddRequest">
            <summary>
            Base interface for all requests under which an entity can be added to the world. These requests are validated
            using <see cref="T:Mafi.Core.Entities.Validators.IEntityAdditionValidator"/>.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Validators.IEntityWithOccupiedTilesAddRequest">
            <summary>
            Extends the request with the info that this entity occupies tiles in the world. That will allow validators to
            check for collisions.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Validators.IEntityWithOccupiedTilesAddRequest.Origin">
            <summary>
            Origin (center tile) of the entity.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Validators.IEntityWithOccupiedTilesAddRequest.OccupiedTiles">
            <summary>
            Occupied tiles of this entity to be checked for collisions.
            </summary>
        </member>
        <member name="P:Mafi.Core.Entities.Validators.IEntityWithOccupiedTilesAddRequest.IgnoreForCollisions">
            <summary>
            Optional predicate that specifies whether to ignore certain entities. By default no entities are ignored.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Validators.IEntityRemovalValidator">
            <summary>
            Helper interface implemented transitively by classes that validate whether entities can be removed from the
            world.
            </summary>
        </member>
        <member name="T:Mafi.Core.Entities.Validators.IEntityRemovalValidator`1">
            <summary>
            Any class that implements this interface states that it wants to validate whether every entity assignable to <see
            cref="!:TEntity"/> can be removed from the world. Classes can implement multiple of these interfaces.
            </summary>
            <typeparam name="TEntity">Type of the entity supported by the validator.</typeparam>
        </member>
        <member name="M:Mafi.Core.Environment.IRadiationManager.ReportReactorRadiationLeak">
            <summary>
            Called every sim update when a rector has a leak.
            </summary>
        </member>
        <member name="F:Mafi.Core.Environment.WaterPollutionManager.HEALTH_PENALTY_PER_QUANTITY">
            <summary>
            We expect that reasonably early mid game settlements has approx 400 pops (20 waste water per month)
            and approx. 0-24 unused sour water. That leaves us to 40 as a nice spot from which we start reducing
            pop growth for pollution. Anything close to 90 gets 0.5% growth penalty which is close to devastating
            however that requires settlement with 7-800 pops + some extra waste, at that point waste treatment
            is expected. So we might need to increase the grow even a bit more.
            </summary>
        </member>
        <member name="F:Mafi.Core.Environment.WaterPollutionManager.MOVING_AVG_WINDOW_SIZE">
            <summary>
            From heavily fertilized farm we can except 40+ fertility per year above allowance. In case of 10 farms
            that is 400 * 2 => 800 quantity ending up with 10% of pollution per year. That makes 0.66% per month on average.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.ComputingPower.ComputingConsumerExtensions.CanConsumeDoNotNotify(Mafi.Core.Factory.ComputingPower.IComputingConsumer)">
            <summary>
            Will skip notification for entity when power not available.
            Only used for transports as it is strange to notify when they still work no matter what.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.ComputingPower.IComputingConsumer.Recharge(Mafi.Computing)">
            <summary>
            Called by computing manager to recharge this consumer.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.IComputingManager.ProducedLastTick">
            <summary>
            Computing power produced last tick (supply).
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.IComputingManager.DemandedThisTick">
            <summary>
            Computing power demand last tick (demand).
            </summary>
        </member>
        <member name="E:Mafi.Core.Factory.Datacenters.DataCenter.RackAdded">
            <summary>
            Invoked after rack is added.
            </summary>
        </member>
        <member name="E:Mafi.Core.Factory.Datacenters.DataCenter.RackRemoved">
            <summary>
            Invoked after rack is removed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Datacenters.DataCenterProto.RacksCapacity">
            <summary>
            How many racks this datacenter can fit in.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Datacenters.DataCenterProto.CoolantIn">
            <summary>
            Coolant per rack necessary for the DataCenter to work.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Datacenters.DataCenterProto.CoolantOut">
            <summary>
            Reformed coolant produced per rack.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Datacenters.DataCenterProto.Gfx.RackPositions">
            <summary>
            Positions of racks in the datacenter.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Datacenters.DataCenterProto.RackPosition">
            <summary>
            Represents a position and rotation of a rack in a datacenter. The position and rotation are relative to the
            datacenter.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Datacenters.DataCenterProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Datacenters.DataCenterProto.ID.op_Implicit(Mafi.Core.Factory.Datacenters.DataCenterProto.ID)~Mafi.Core.Entities.Static.StaticEntityProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Entities.Static.StaticEntityProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Datacenters.DataCenterProto.ID.op_Implicit(Mafi.Core.Factory.Datacenters.DataCenterProto.ID)~Mafi.Core.Entities.EntityProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Entities.EntityProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Datacenters.DataCenterProto.ID.op_Implicit(Mafi.Core.Factory.Datacenters.DataCenterProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Datacenters.DataCenterProtoBuilder.State.SetRacksCapacity(System.Int32)">
            <summary>
            Sets internal buffers size multiplier. Default is 1.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Datacenters.DataCenterProtoBuilder.State.SetRackPositionsGenerator(System.Func{System.Int32,Mafi.Core.Factory.Datacenters.DataCenterProto.RackPosition})">
            <summary>
            Sets a function used to generate position of racks relative to the datacenter. The function has to return
            positions for rack indices in range [0, RacksCapacity).
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Datacenters.ServerRackProto.ConsumedPowerPerTick">
            <summary>
            Electricity consumed every tick to allow the server to work.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Datacenters.ServerRackProto.CreatedComputingPerTick">
            <summary>
            Computing created every tick by the server.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Datacenters.ServerRackProto.ProductToAddThis">
            <summary>
            Product (and its quantity) that the player has to provide to build the rack.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Datacenters.ServerRackProto.ProductToRemoveThis">
            <summary>
            Product (and its quantity) that the player gets when removing this rack.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Datacenters.ServerRackProto.CoolantInPerMonth">
            <summary>
            Coolant per rack necessary for the DataCenter to work.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Datacenters.ServerRackProto.CoolantOutPerMonth">
            <summary>
            Reformed coolant produced per rack.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Datacenters.ServerRackProto.Graphics">
            <summary>
            Graphics-only properties that does not affect game simulation and are not needed or accessed by the game
            simulation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Datacenters.ServerRackProto.Gfx.FrontPanels">
            <summary>
            Paths to subobjects of the rack prefab that represent possible front panels of the rack.
            The rack will be changing front panels in order to animate it.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.ElectricPower.IElectricityConsumer.Recharge(Mafi.Electricity)">
            <summary>
            Called by electricity manager to recharge this consumer.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.ElectricPower.ElectricityConsumerExtensions.CanConsumeDoNotNotify(Mafi.Core.Factory.ElectricPower.IElectricityConsumer)">
            <summary>
            Will skip notification for entity when power not available.
            Only used for transports as it is strange to notify when they still work no matter what.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.ElectricPower.ElectricityManager.MaxGenerationCapacity">
            <summary>
            Maximum generation capacity if all generators were working on 100% of their max capacity.
            Re-computed during <see cref="P:Mafi.Core.Simulation.SimLoopEvents.UpdateStart"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.ElectricPower.ElectricityManager.GenerationCapacityThisTick">
            <summary>
            Current generation capacity with respect to current conditions. This takes into account paused generators.
            Re-computed during <see cref="P:Mafi.Core.Simulation.SimLoopEvents.UpdateStart"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.ElectricPower.ElectricityManager.GeneratedThisTick">
            <summary>
            Amount of generated electricity this sim update. Note that generation and consumption are not synchronous
            and consumption is one tick behind consumption. Introduce `GeneratedLastTick` if needed.
            Re-computed during <see cref="P:Mafi.Core.Simulation.SimLoopEvents.UpdateStart"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.ElectricPower.ElectricityManager.ConsumedThisTick">
            <summary>
            Amount of consumed electricity during this sim update (so far). Total value will be accurate only after all
            entities request electricity (after <see cref="P:Mafi.Core.Simulation.SimLoopEvents.Update"/> finishes).
            Re-computed during <see cref="P:Mafi.Core.Simulation.SimLoopEvents.Update"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.ElectricPower.ElectricityManager.DemandedThisTick">
            <summary>
            Amount of requested electricity during this sim update (so far). Total value will be accurate only after all
            entities request electricity (after <see cref="P:Mafi.Core.Simulation.SimLoopEvents.Update"/> finishes).
            Re-computed during <see cref="P:Mafi.Core.Simulation.SimLoopEvents.Update"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.ElectricPower.ElectricityManager.WastedElectricityThisTick">
            <summary>
            Amount of wasted electricity.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.ElectricPower.ElectricityManager.addGenerator(Mafi.Core.Factory.ElectricPower.ElectricityManager.ElectricityGeneratorBuffer)">
            <summary>
            Adds a new generator while preserving descending order.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.ElectricPower.ElectricityManager.ElectricityGeneratorBuffer.GenerationPriority">
            <summary>
            Don't change this without ElectricityManager
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.ElectricPower.IElectricityGeneratingEntity.GetCurrentMaxGeneration(System.Boolean@)">
            <summary>
            Returns current maximum electricity generation. If <paramref name="canGenerate"/> is <c>false</c>, the
            <see cref="M:Mafi.Core.Factory.ElectricPower.IElectricityGeneratingEntity.GenerateAsMuchAs(Mafi.Electricity,Mafi.Electricity)"/> should not be called and returned capacity is ignored (set to zero).
            This can happen for example when the generator is disabled or broken. If it is set to <c>true</c>,
            the <see cref="M:Mafi.Core.Factory.ElectricPower.IElectricityGeneratingEntity.GenerateAsMuchAs(Mafi.Electricity,Mafi.Electricity)"/> will be called even if returned max generation is zero.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.ElectricPower.IElectricityGeneratingEntity.GenerateAsMuchAs(Mafi.Electricity,Mafi.Electricity)">
             <summary>
             Generates as much electricity as requested. If this entity cannot scale production, it may return more than
             requested.
             The <see cref="!:currentMaxGeneration"/> is returned value from <see cref="M:Mafi.Core.Factory.ElectricPower.IElectricityGeneratingEntity.GetCurrentMaxGeneration(System.Boolean@)"/>.
             </summary>
             <remarks>
             Note that this generation is requested when the internal electricity buffer is not full, despite this entity
             may not need to be generating because other higher-priority entities are already covering all electricity
             consumption.
            
             This means that entity should NOT keep consuming some material and not returning any power because it can
             get stuck in this state indefinitely.
             </remarks>
        </member>
        <member name="P:Mafi.Core.Factory.ElectricPower.IElectricityGeneratorRegistrator.GenerationPriority">
            <summary>
            Priority for generation. Lower number means that the entity will be prioritized more for generation.
            For example, solar panels should have higher priority than generators.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.ElectricPower.IElectricityGeneratorRegistrator.MaxGenerationCapacity">
            <summary>
            Maximum generation capacity if the generator works on 100% of its max capacity.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.ElectricPower.IElectricityGeneratorRegistrator.GenerationCapacityThisTick">
            <summary>
            Current generation capacity with respect to current conditions.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.ElectricPower.IElectricityGeneratorRegistrator.GeneratedThisTick">
            <summary>
            Current generation.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.ElectricPower.IElectricityManager.GenerationCapacityThisTick">
            <summary>
            Current max production.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.ElectricPower.IElectricityManager.DemandedThisTick">
            <summary>
            Current demand.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.ElectricPower.IElectricityManager.ConsumedThisTick">
            <summary>
            Current consumption.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.FluidIndicatorGfxParams.SizePerTextureWidthMeters">
            <summary>
            Size of the indicator mesh UVs if it would span the entire texture. For example,
            if the indicator width is 2 tiles and these two tiles fit 40% of the texture width, the total size per
            texture width is 2 / 0.4 = 5 tiles.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.FluidIndicatorGfxParams.DetailsScale">
            <summary>
            Scale of the dot details.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.FluidIndicatorGfxParams.StillMovementScale">
            <summary>
            Scale of movements when the fluid is still.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.LoosePileTextureParams.Scale">
            <summary>
            Scale multiplier of the pile texture.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.LoosePileTextureParams.OffsetX">
            <summary>
            Offset applied to the pile texture.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Machines.MachineProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Machines.MachineProto.ID.op_Implicit(Mafi.Core.Factory.Machines.MachineProto.ID)~Mafi.Core.Entities.Static.StaticEntityProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Entities.Static.StaticEntityProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Machines.MachineProto.ID.op_Implicit(Mafi.Core.Factory.Machines.MachineProto.ID)~Mafi.Core.Entities.EntityProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Entities.EntityProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Machines.MachineProto.ID.op_Implicit(Mafi.Core.Factory.Machines.MachineProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Machines.MachineProto.ConsumedPowerPerTick">
            <summary>
            Electricity consumed every tick to allow the machine to work.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Machines.MachineProto.Recipes">
            <summary>
            Set of recipes usable in this machine.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Machines.MachineProto.Graphics">
            <summary>
            Graphics-only properties that does not affect game simulation and are not needed or accessed by the game
            simulation.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Machines.MachineProto.NextTier">
            <summary>
            Next tier of machine (upgrade), if available.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Machines.MachineProto.IsWasteDisposal">
            <summary>
            We need to know if this machine is waste disposal so we don't give its input buffers high priorities for logistics. Otherwise
            we would empty storages of products that might be useful (e.g. acid).
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Machines.MachineProto.UseAllRecipesAtStartOrAfterUnlock">
            <summary>
            Whether to add all recipes when the entity is constructed or new recipes are unlocked.
            This is useful for entities like smoke stack or flare.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Machines.MachineProto.AnimParams">
            <summary>
            Parameters for animation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Machines.MachineProto.AddRecipe(Mafi.Core.Factory.Recipes.RecipeProto)">
            <summary>
            Adds recipe prototype to the machine.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Machines.MachineProto.Gfx.ParticlesParams">
            <summary>
            Parameters for particles.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Machines.MachineProto.Gfx.MachineSoundPrefabPath">
            <summary>
            The sound the machine make while it is operating.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Machines.MachineProtoBuilder.StateBase`1.SetBuffersMultiplier(System.Int32)">
             <summary>
             Sets internal buffers size multiplier. Default is 1 for transport and automatic for logistics.
            
             Note: It should not be needed to change this unless you have some super rare products to transport.
             </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Machines.MachineProtoBuilder.StateBase`1.SetElectricityConsumption(Mafi.Electricity)">
            <summary>
            Sets electricity consumption. Default is 0.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Machines.MachineProtoBuilder.StateBase`1.SetComputingConsumption(Mafi.Computing)">
            <summary>
            Sets computing consumption. Default is 0.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.MechanicalPower.IShaft.TotalAvailablePower">
            <summary>
            Total available power incl. input, output, and inertia buffer.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.MechanicalPower.Shaft">
             <summary>
             Represents a physical shaft with inertial equal to sum inertia of all connected components.
            
             Shaft has a max throughput <see cref="F:Mafi.Core.Factory.MechanicalPower.ShaftManager.MAX_SHAFT_THROUGHPUT"/>.
             </summary>
             <remarks>
             In order to make shaft input and output self-balancing, input and output is dynamically scaled and turned
             on/off based on total amount of stored power (inertia).
            
             When there is less than 15% inertia, shaft output is turned off and only input is allowed. This allows the shaft
             to gain inertia all the way until 50% where output is turned off. To prevent constant oscillations between
             15% and 50% when there is more demand than production, output is scaled based on the total inertia, being
             25% at 15% of inertia, and 100% at 65% inertia.
            
             Similar technique is used for input balancing, see diagram describing all the thresholds below.
            
             <code>
             Inertia
             0%        10%          25%       35%         50%                       80%              100%
             |==========|============|=========|===========|=========================|================|
            
             Input scale:            .         .                                     |================|
             .                                 .                                    100%              0%
             Out: STOP «|............|» START  .
             Out scale: |============|         .                                     .                .
             .         25%          100%       .                                     .                .
             Work area for not enough mech power:                                    .                .
             »       »  |............|  «   «  .«   «   «   «   «                    .                .
             Work area for excess mech power:  .
             »       »       »       »       » .     »       »   »   »   »   »   »   |................|
             Work area for switching on/off mode:
             .                        TURN ON «|.....................................|» TURN OFF
             </code>
             </remarks>
        </member>
        <member name="P:Mafi.Core.Factory.MechanicalPower.Shaft.IsDefaultNoCapacityShaft">
            <summary>
            Whether this shaft is default zero-throughput shaft. This shaft is used for entities that are not
            connected to any other entities on a shaft.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.MechanicalPower.ShaftManager.DefaultZeroCapacityShaft">
            <summary>
            This shaft is connected to entities that are not connected to any other entities via shafts.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.MechanicalPower.ShaftManager.getAllConnectedEntitiesViaShaft(Mafi.Core.Entities.Static.IStaticEntity,Mafi.Collections.Set{Mafi.Core.Entities.Static.IStaticEntity})">
            <summary>
            This assumes that each entity with shaft ports connect to all other with shaft ports.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.MechanicalPower.IShaftBuffer.GetRemoveAmount(Mafi.MechPower)">
            <summary>
            Returns amount that will be returned with <see cref="M:Mafi.Core.Entities.Static.IProductBuffer.RemoveAsMuchAs(Mafi.Quantity)"/> method.
            This takes shaft inertia into an account.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.NuclearReactors.NuclearReactor">
             <summary>
             Nuclear reactor that produces large amounts of steam.
             </summary>
             <remarks>
             Reactor can start operation only when it is has people, is fully maintained, and is filled with
             <see cref="F:Mafi.Core.Factory.NuclearReactors.NuclearReactor.MIN_FUEL_FOR_OPERATION"/> of nuclear fuel. We require maintenance because reactor gets damaged
             during meltdown.
            
            
             Fuel creates heat that is used to produce steam. If there is too much heat, emergency cooling is used to
             prevent overheating. If heat reaches over <see cref="F:Mafi.Core.Factory.NuclearReactors.NuclearReactor.MELTDOWN_AT_HEAT"/> meltdown occurs, steam production
             stops and reactor is being shut down. When reactor heat is above <see cref="F:Mafi.Core.Factory.NuclearReactors.NuclearReactor.MELTDOWN_AT_HEAT"/>, every
             <see cref="F:Mafi.Core.Factory.NuclearReactors.NuclearReactor.MELTDOWN_OVERHEAT_DAMAGE_INTERVAL"/> following happens:
              1) Fuel is wasted.
              2) Maintenance is lost.
              3) Radiation escapes.
             This means that the worse meltdown is the more is lost in process. Very short lasting meltdown won't cause
             much damage but completely uncontrolled meltdown (high power, no emergency cooling) may cause a lot of damage
             and release a lot of radiation.
             </remarks>
        </member>
        <member name="P:Mafi.Core.Factory.NuclearReactors.NuclearReactor.HeatAmount">
            <summary>
            Heat currently stored in reactor. One power level will generate <see cref="F:Mafi.Core.Factory.NuclearReactors.NuclearReactor.HEAT_PER_POWER_LEVEL_PER_TICK"/>
            units of heat per tick.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.NuclearReactors.NuclearReactor.m_heatInExchanger">
            <summary>
            Heat in exchanger ready to convert water into steam.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.NuclearReactors.NuclearReactor.CurrentPowerLevel">
            <summary>
            Current power level where 100% is one power level.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.NuclearReactors.NuclearReactor.TargetPowerLevel">
            <summary>
            Target power level where 100% is one power level, set by the player.
            This will be automatically set to zero if meltdown happens.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.NuclearReactors.NuclearReactor.AllowedFuel">
            <summary>
            Specifies input fuel protos that can be loaded into the reactor. Order is not significant.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.NuclearReactors.NuclearReactor.getTargetPowerAndSetState(Mafi.Core.Factory.NuclearReactors.NuclearReactor.State@)">
            <summary>
            Returns target power level based on reactor state. This also loads fuel if necessary.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.NuclearReactors.NuclearReactor.State.Broken">
            <summary>Broken due to maintenance</summary>
        </member>
        <member name="F:Mafi.Core.Factory.NuclearReactors.NuclearReactor.State.Meltdown">
            <summary>Reactor is overheated and is cooling down.</summary>
        </member>
        <member name="F:Mafi.Core.Factory.NuclearReactors.NuclearReactor.State.NotEnoughMaintenance">
            <summary>Reactor cannot start due to maintenance.</summary>
        </member>
        <member name="F:Mafi.Core.Factory.NuclearReactors.NuclearReactor.State.NotEnoughInput">
            <summary>Not enough fuel in reactor to start working.</summary>
        </member>
        <member name="P:Mafi.Core.Factory.NuclearReactors.NuclearReactorProto.ComputingConsumed">
            <summary>
            If this is non-zero, automated regulation using computing is possible, otherwise it is not possible.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.NuclearReactors.NuclearReactorProto.FuelData.Duration">
            <summary>
            How long the fuel last (at power level 1).
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Recipes.IRecipeForUi">
            <summary>
            Lightweight interface for UI.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.IRecipeForUi.Id">
            <summary>
            Recipe ID that uniquely identifies a recipe. This may be implemented in any way suitable,
            undefined proto ID or empty ID can be fine in some situations.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.IRecipeForUi.AllUserVisibleInputs">
            <summary>
            All inputs visible to the user.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.IRecipeForUi.AllUserVisibleOutputs">
            <summary>
            All outputs visible to the user.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.IRecipeForUi.Duration">
            <summary>
            Number of updates it takes to transform the products
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Recipes.IRecipe">
            <summary>
            General interface for recipe.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.IRecipe.OutputsAtEnd">
            <summary>
            Products, quantity and their assignments returned by the process when it ends its work.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.IRecipe.OutputsAtStart">
            <summary>
            Products returned at the beginning of the recipe execution (e.g. exhaust).
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.IRecipe.MinUtilization">
            <summary>
            Minimum utilization. When set, this recipe can be executed partially.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.IRecipe.QuantitiesGcd">
            <summary>
            To make the math on partial recipes faster, the greatest common divisor for all input and output quantities
            is precomputed here.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.IRecipe.Priority">
            <summary>
            Priority of this recipe. Lower number => higher priority.
            If -1 is on all the recipes than the default sorting will be used (sort by number of inputs).
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Recipes.IRecipeExecutorFactory">
            <summary>
            Factory for <see cref="T:Mafi.Core.Factory.Recipes.RecipeExecutor"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Recipes.IRecipeProtoBuilderState`1.AddInput(System.String,Mafi.Core.Products.ProductProto,Mafi.Quantity,System.Boolean)">
            <summary>
            Selector is a string of port names (A,B,C..) or "*" for any port.
            </summary>
            <example>Selector: "*" - selects all ports, "AB" - selects ports A and B.</example>
        </member>
        <member name="M:Mafi.Core.Factory.Recipes.IRecipeProtoBuilderState`1.AddOutput(System.String,Mafi.Core.Products.ProductProto,Mafi.Quantity,System.Boolean,System.Boolean)">
            <summary>
            Selector is a string of port names (A,B,C..) or "*" for any port.
            </summary>
            <example>Selector: "*" - selects all ports, "AB" - selects ports A and B.</example>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.RecipeEntityBase.RecipeExecutor">
            <summary>
            Subclasses have to set the executor.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.RecipeEntityBase.IsBoostRequested">
            <summary>
            Whether the player request boost. That doesn't mean that the boost is active if there isn't enough unity.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Recipes.RecipeExecutor">
            <summary>
            Implements standard way of executing recipes.
            </summary>
            <remarks>
            Takes care of restoration of buffers and port products map of BufferedInputPorts and BufferedOutputPorts after
            load.
            </remarks>
        </member>
        <member name="T:Mafi.Core.Factory.Recipes.RecipeExecutor.Status">
            <summary>
            The current state of the executor. Does not cover pause info.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeExecutor.Status.FullOutput">
            <summary>
            Output is full so the executor can't continue. Recipe can be in progress - e.g. periodical IO blocked.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeExecutor.Status.Working">
            <summary>
            Work in progress.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.RecipeExecutor.ProgressPerc">
            <summary>
            Progress on the current recipe.
            </summary>
            <remarks>
            If recipe takes 1 tick and is repeated all the time, you will get 1.0f from this method every time you ask.
            </remarks>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.RecipeExecutor.Recipes">
            <summary>
            Recipes that this entity can execute.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.RecipeExecutor.LastRecipeInProgress">
            <summary>
            Last recipe this entity has worked on (this might be old value if the entity didn't work for a longer time).
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.RecipeExecutor.WorkedThisTick">
            <summary>
            This allows to return progress for a super-fast recipes that take 1 tick. The reason is that fast recipes
            have m_recipeResult always None. Which would when calculating progress return 0. It is also correct because
            the entity really worked that tick (so even for slow entity it is correct. Another thing is that even machine
            has progress it doesn't mean that it actually runs. For instance if output ports are full, machine stops but
            progress is still 100%. For animations this is how to check that machine actually stopped to work.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.RecipeExecutor.StartedNewWorkThisTick">
            <summary>
            Whether this tick a new recipe was started. This helps animation to detect that machine started to work on
            new job. Because fully utilized machine has positive progress all the time.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeExecutor.m_lastWorkUtilization">
            <summary>
            Utilization from the last tick where we worked.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeExecutor.m_recipes">
            <summary>
            Recipes that this entity can execute.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeExecutor.m_recipeResult">
            <summary>
            Recipe result that is being worked on. No other recipe can be started until this one is empty.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeExecutor.RecipeProductionTicks">
            <summary>
            Number of performed ticks on current recipe so far.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeExecutor.ProductsManager">
            <summary>
            Signifies that we should search for a new recipe in the next update, if we have no recipe to work on. Used to
            limit number of searches for a new recipe, we only search for a new recipe when we have a reason to.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Recipes.RecipeExecutor.Contains(Mafi.Core.Factory.Recipes.IRecipe)">
            <summary>
            Whether the executor contains the given recipes. Warning! This is not a fast operation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Recipes.RecipeExecutor.AddRecipes(System.Collections.Generic.IEnumerable{Mafi.Core.Factory.Recipes.IRecipe})">
            <summary>
            Has the same effect as multiple calls to <see cref="M:Mafi.Core.Factory.Recipes.RecipeExecutor.AddRecipe(Mafi.Core.Factory.Recipes.IRecipe)"/>, but is more efficient with more recipes.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Recipes.RecipeExecutor.AddRecipe(Mafi.Core.Factory.Recipes.IRecipe)">
            <summary>
            Adds the given recipe to the set of executable recipes and initializes I/O buffers.
            </summary>
            <remarks>Capacity of existing buffers is increased if necessary.</remarks>
        </member>
        <member name="M:Mafi.Core.Factory.Recipes.RecipeExecutor.RemoveRecipe(Mafi.Core.Factory.Recipes.IRecipe)">
            <summary>
            Removes the given recipe from the set of executable recipe.
            </summary>
            <remarks>
            This method does not clear products in buffers! That depends on strategy of the superclass.
            </remarks>
        </member>
        <member name="M:Mafi.Core.Factory.Recipes.RecipeExecutor.ClearRecipes">
            <summary>
            Clears all recipes.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Recipes.RecipeExecutor.UpdateDisabled">
            <summary>
            Update of the state of the RecipeExecutor while it is not supposed to progress work.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Recipes.RecipeExecutor.Update">
            <summary>
            Update of the recipe of the recipe.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Recipes.RecipeExecutor.TryProduceProducts(Mafi.Core.Factory.Recipes.IRecipe,Mafi.Core.Factory.Recipes.RecipeExecutor.Status@,System.Boolean@)">
             <summary>
             Tries to run the recipe on input in buffers. Products that are used and their quantity are defined in <see
             cref="!:RecipeProto.InputsAtStart"/> and products that are created and their quantity are defined in <see
             cref="F:Mafi.Core.Factory.Recipes.RecipeProto.OutputsAtEnd"/>. Consumed products are automatically removed from the given input buffers
             if used. If the buffer contains enough products (at least as much as <see cref="!:RecipeProto.InputsAtStart"/>)
             a result equal to <see cref="F:Mafi.Core.Factory.Recipes.RecipeProto.OutputsAtEnd"/> is returned.
            
             All consumed and created products are reported to <see cref="T:Mafi.Core.Products.IProductsManager"/>.
             </summary>
             <remarks>WARNING: Returned instance must come from pool and should be returned there!</remarks>
        </member>
        <member name="M:Mafi.Core.Factory.Recipes.RecipeExecutor.tryRunPartial(Mafi.Core.Factory.Recipes.IRecipe,Mafi.Core.Factory.Recipes.RecipeExecutor.Status@,System.Boolean@)">
            <summary>
            Tries to start partial recipe. This will run the largest chunk of the recipe considering inputs count and
            output space.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Recipes.RecipeExecutorFactory">
            <summary>
            Factory for <see cref="T:Mafi.Core.Factory.Recipes.RecipeExecutor"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeOutput.TriggerAtStart">
            <summary>
            Whether this product should be output at the beginning of a recipe execution.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Recipes.RecipeProduct">
            <summary>
            Definition of input / output of <see cref="T:Mafi.Core.Factory.Recipes.RecipeProto"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeProduct.Ports">
            <summary>
            Ports of a machine / building that should be used for the input / output.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeProduct.HideInUi">
            <summary>
            Whether the product should be hidden in the UI (when displaying recipe to the player).
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Recipes.RecipeProto">
            <summary>
            Recipe that transforms some set of products to another set of products using some machine.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Recipes.RecipeProto.ID.op_Implicit(Mafi.Core.Factory.Recipes.RecipeProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeProto.AllInputs">
            <summary>
            Union of <see cref="!:InputsAtStart"/> and <see cref="!:InputsPeriodical"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeProto.AllOutputs">
            <summary>
            Union of <see cref="F:Mafi.Core.Factory.Recipes.RecipeProto.OutputsAtEnd"/> and <see cref="!:OutputsPeriodical"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.RecipeProto.AllUserVisibleInputs">
            <summary>
            All inputs visible to the user.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.RecipeProto.AllUserVisibleOutputs">
            <summary>
            All outputs visible to the user.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeProto.OutputsAtEnd">
            <summary>
            Products, quantity and their assignments returned by the process when it ends its work.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeProto.OutputsAtStart">
            <summary>
            Products, quantity and their assignments returned continuously by the process while it works.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Recipes.RecipeProto.Duration">
            <summary>
            Number of updates it takes to transform the products
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeProto.MinUtilization">
            <summary>
            Minimum utilization. When set, this recipe can be executed partially.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeProto.QuantitiesGcd">
            <summary>
            Greatest common divisor for input and output quantities.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Recipes.RecipeProto.ProductsDestroyReason">
            <summary>
            Reason with which this recipe destroys its products. E.g. dumped for waste pump.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Recipes.RecipeProtoBuilder.State.verifyRecipeIo">
            <summary>
            Verifies that the machine has adequate I/O ports for this recipe.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Recipes.RecipeResult.GetPooledInstance(Mafi.Core.Factory.Recipes.IRecipe,System.Int32)">
            <summary>
            Returns an instance (either from pool or new one).
            NOTE: The caller should perform operation and then return the object to the pool. Instances obtained from the
            pool should have very short life-span. For long-living objects create an instance using new.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Recipes.RecipeResult.ReturnToPool">
            <summary>
            Returns this instance to the object pool.
            IMPORTANT: The caller is responsible to ensure that he is the only owner of this instance and no other object
            have reference to this object.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Recipes.RecipeResult.#ctor">
            <summary>
            Consider using pool for new short-lived instances.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Sorters.Sorter.FilteredProducts">
            <summary>
            Products that are filtered out to a special output.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Sorters.Sorter.tryReleaseFirstProduct">
            <summary>
            Sends content of the buffer to one of the output ports.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Sorters.SorterProto.AssignableProducts">
            <summary>
            Products that can be assigned (in the UI) to the special sorter port.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Sorters.SorterProto.RequiredPower">
            <summary>
            Electricity consumed by the sorter.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Sorters.SorterProto.m_productsFilter">
            <summary>
            Filter for <see cref="P:Mafi.Core.Factory.Sorters.SorterProto.AssignableProducts"/>.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Transports.BuildTransportCmd">
            <summary>
            Creates a new transport from given pivots positions and start/end directions. First and last pivot position may
            be occupied with already existing pivot that has the same proto and is not fully connected.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.BuildTransportCmd.#ctor(Mafi.Core.Entities.Static.StaticEntityProto.ID,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Tile3i},System.Nullable{Mafi.Direction90},System.Nullable{Mafi.Direction90},System.Boolean,System.Boolean,Mafi.Core.EntityIdOption)">
            <summary>
            Build pivot at all given positions and connects them all with segments.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Transports.CanBuildTransportResult">
            <summary>
            A successful or unsuccessful result of transport build operation. All fields with `AtStart` and `AtEnd` are
            referring to the requested trajectory direction. The result might be reversed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanBuildTransportResult.RequestPivots">
            <summary>
            Original pivots request that resulted in this result.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanBuildTransportResult.RequestStartDirection">
            <summary>
            Requested start direction.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanBuildTransportResult.RequestEndDirection">
            <summary>
            Requested end direction.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanBuildTransportResult.NewTrajectory">
            <summary>
            New trajectory. Note that due to possible merges (mini-zippers), this trajectory
            may be subset of the original request. This may be None if the request has error, but should be always set
            for successful results.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanBuildTransportResult.PivotsWereReversed">
            <summary>
            Whether original pivots in resulting trajectory were reversed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanBuildTransportResult.NewTransportValue">
            <summary>
            Asset value or new trajectory.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanBuildTransportResult.SupportedTiles">
            <summary>
            List of verified pillar positions that will be able to support the <see cref="F:Mafi.Core.Factory.Transports.CanBuildTransportResult.NewTrajectory"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanBuildTransportResult.MiniZipJoinResultAtStart">
            <summary>
            If set, new transport will be joined via mini-zipper at the start
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanBuildTransportResult.MiniZipJoinResultAtEnd">
            <summary>
            If set, new transport will be joined via mini-zipper at the end
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanCutOutTransportTrajResult.StartSubTransport">
            <summary>
            New transport trajectory after cut at the start.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanCutOutTransportTrajResult.CutOutSubTransport">
            <summary>
            Cut-out trajectory. Only set when requested.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanCutOutTransportTrajResult.EndSubTransport">
            <summary>
            New transport trajectory after cut at the end.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Transports.CanCutOutTransportResult">
            <summary>
            A successful result of operation that cuts out a part of a transport, resulting in two smaller transports.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanCutOutTransportResult.CutOutFrom">
            <summary>
            The requested cut out start (note that this may not match the actual cut-out start).
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanCutOutTransportResult.CutOutTo">
            <summary>
            The requested cut out end (note that this may not match the actual cut-out end).
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanCutOutTransportResult.ReplacedTransport">
            <summary>
            Original transport that was cut into two.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanCutOutTransportResult.StartSubTransport">
            <summary>
            New transport trajectory after cut at the start.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanCutOutTransportResult.CutOutSubTransport">
            <summary>
            Cut-out trajectory. Only set when requested.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanCutOutTransportResult.EndSubTransport">
            <summary>
            New transport trajectory after cut at the end.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Transports.CanCutOutTransportAtResult">
            <summary>
            A successful result of operation that cuts out a tile from a transport, resulting in two smaller transports.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanCutOutTransportAtResult.CutOutPosition">
            <summary>
            Tile that was cut out. This is of course one of tiles of <see cref="F:Mafi.Core.Factory.Transports.CanCutOutTransportAtResult.ReplacedTransport"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanCutOutTransportAtResult.ReplacedTransport">
            <summary>
            Original transport that was cut into two.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanCutOutTransportAtResult.StartSubTransport">
            <summary>
            New transport trajectory after cut at the start.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.CanCutOutTransportAtResult.EndSubTransport">
            <summary>
            New transport trajectory after cut at the end.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Transports.CanPlaceMiniZipperAtResult">
            <summary>
            A successful result of cutting-out transport and placing mini-zipper in the cot-out tile.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Transports.Transport">
             <summary>
             Transport.
             </summary>
             <remarks>
             Notes from transport optimization (Change-Id: I9988f39e22133491718cbe14b8135a69ac022232)
            
             Transport trajectory representation was changed from segmented curve to discrete waypoints spaced out exactly
             by transport speed per tick. While this increases memory requirements for transports, it allows very significant
             optimizations for all processes. For example, transported products position on transport is just an index to
             waypoint array.
            
             Changed transported product representation from large and complex class to 8-byte struct. This makes operations
             on transported products memory-efficient since they are all located very close together.
            
             Significantly optimized transported product simulation, that is in many cases O(1), independent of the number
             of products transported:
              - This works by having transported product index split into absolute index which is per transport,
                and relative index per product.
              - If all or none products are moved, only the global index needs to be incremented.
              - Additionally, transported products remember if they are already at minimal spacing with previous product
                and can avoid spacing check when moving.
              - If all transported products are marked as "at minimal spacing", even transports that cannot move the first
                product can skip checking all remaining products and just increment global index (and not iterate all
                products to check if they can move).
             </remarks>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.Transport.MAX_TRANSPORT_WAYPOINTS">
            <summary>
            Transport length is limited so that the number of waypoints never gets close to `short.MaxValue`.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Transports.Transport.Status">
            <summary>
            The current state of the transport.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.Transport.Status.Idle">
            <summary>
            The transport is connected properly but is not moving (e.g. full consumer or the consumer does not accept
            the product we have).
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.Transport.Status.NotConnected">
            <summary>
            The transport is not fully connected.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.Transport.Status.Moving">
            <summary>
            The transport is currently moving products forward.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.Transport.Status.Paused">
            <summary>
            The transport is disabled.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.Transport.Status.PowerLow">
            <summary>
            The transport does not have enough electricity.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.Transport.Trajectory">
            <summary>
            Trajectory of this transport.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.Transport.LastPivotIndex">
            <summary>
            Index of last pivot. Shorthand for <c>Trajectory.Pivots.Length - 1</c>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.Transport.StartDirection">
            <summary>
            Normalized direction of the transport start. This direction always points away from the trajectory.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.Transport.EndDirection">
            <summary>
            Normalized direction of the transport end. This direction always points away from the trajectory.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.Transport.StartInputPort">
            <summary>
            Input port that is at the start of the trajectory.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.Transport.EndOutputPort">
            <summary>
            Output port that is at the end of the trajectory.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.Transport.TransportedProducts">
            <summary>
            All transported products in the order from oldest to newest (in order of delivery).
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.Transport.Mafi#Core#Factory#Transports#ITransportFriend#TransportedProductsMutable">
            <summary>
            Use only for rendering that needs to update
            <see cref="F:Mafi.Core.Factory.Transports.TransportedProductMutable.LastSeenIndexAbsoluteForUi"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.Transport.m_products">
            <summary>
            Products transported by the transport system in the order from oldest to newest (in order of delivery). Each
            entry represents one transported unit of a product. The transport has FIFO semantics as this queue, the front
            are the "oldest" products that will be delivered the first.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.Transport.FirstProduct">
            <summary>
            The product that is the closest to the output, the "first" or "oldest" in the queue.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.Transport.LastProduct">
            <summary>
            The product that is the closest to the input, the "last" or "youngest" in the queue.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.Transport.CanReceiveProducts">
            <summary>
            Whether this transport can receive products through ports.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.Transport.MovedStepsTotal">
            <summary>
            Total number of moved steps.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.Transport.IsMoving">
            <summary>
            Whether products on this transport were moved in the last sim step.  TODO: Only for tests? Kill?
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.Transport.IsFullyConnected">
            <summary>
            True when both ports are connected. Note that the transport can move even if this is false.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.Transport.ProductsStateVersion">
            <summary>
            This gets incremented by adding or removing of products from transport.
            It does not get incremented when transport moves but products don't change..
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.Transport.getCenterTile(Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Tile3i})">
            <summary>
            Returns tile in the center of transport. This affects icon position for example.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.Transport.TransferProductsSharedStart(Mafi.Core.Factory.Transports.Transport,Mafi.RelTile1f)">
            <summary>
            Transfers products from given transport to this transport assuming that the two transports share the same
            trajectory prefix (one is subset of the other, from start).
            </summary>
            <param name="source">Source transport</param>
            <param name="srcProductsDistFromStartBias">Bias applied to the distance of all transferred products on the
            source transport. This can be used to transfer products from the "middle" of the transport. However, no
            products are allowed to be in the "skipped" transport part.</param>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.Transport.TransferProductsSharedEnd(Mafi.Core.Factory.Transports.Transport)">
             <summary>
             Transfers products from given transport to this transport assuming that the two transports share the same
             trajectory suffix (one is subset of the other, from end).
            
             Note: This is more efficient if there are not too many extra products to transfer. If
             <see cref="M:Mafi.Core.Factory.Transports.Transport.TransferProductsSharedStart(Mafi.Core.Factory.Transports.Transport,Mafi.RelTile1f)"/> is also being called, call it first.
             </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.Transport.tryMoveProducts">
            <summary>
            Tries to move products and returns whether any products were moved.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.Transport.IsFlatAround(Mafi.Tile3i)">
            <summary>
            Returns whether the transport is flat at and around given position. If the position is a pivot, it makes
            sure that both neighboring pivots are on the same Z. If then position is a segment, it makes sure that the both
            surrounding pivots are on the same Z.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.Transport.removeProductOfType(Mafi.Core.Products.ProductProto,Mafi.Quantity,Mafi.Quantity@)">
            <summary>
            Returns if all instances of product were removed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportFlow.Empty">
            <summary>
            No products and no flow.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.ITransportFriend.InsertNewProduct(Mafi.Core.Products.ProductSlimId,Mafi.Quantity,System.Int32)">
            <summary>
            Inserts products on the transport. Ignores any spacing or quantity constraints.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Transports.TransportCrossSection">
            <summary>
            Defines visual representation of the transport and height of transported products. Cross section is procedurally
            extruded among transport curve to form a transport. Cross section can be consisted from more disconnected
            components so that's why vertices are stored in 2D arrays.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportCrossSection.StaticCrossSectionParts">
            <summary>
            Relative vertices of transport cross-section that are static and do not move with the transport.
            The origin [0, 0] is at coordinate [middle of transport, transport surface].
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportCrossSection.MovingCrossSectionParts">
            <summary>
            Relative vertices of transport cross section that move with the transport.
            The origin [0, 0] is at coordinate [middle of transport, transport surface].
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Transports.TransportedProductMutable">
            <summary>
            Very compact representation of transported product.
            WARNING: This struct is mutable, always use ref when trying to change it inside of collections.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportedProductMutable.TrajectoryIndexRelative">
            <summary>
            Relative trajectory index.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportedProductMutable.LastSeenIndexAbsoluteForUi">
            <summary>
            Last seen index, for use in UI. This totally breaks encapsulation but without it would be hard to know
            which products moved from where.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportedProductMutable.SeqNumber">
            <summary>
            Sequential number, each new product gets incremented number, this is used for randomization in UI.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Transports.TransportHelper">
            <summary>
            Collection of transport related functions.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportHelper.GetLowestNonCollidingHeight(Mafi.Core.Terrain.TerrainTile)">
            <summary>
            Returns minimal height on which can transport be placed without colliding with terrain.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportHelper.GetPillarBaseHeight(Mafi.Core.Terrain.TerrainTile)">
            <summary>
            Returns pillar's base height (lowest point).
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportHelper.GetOccupiedRangeForPivot(Mafi.Tile3i)">
            <summary>
            Computes occupied tile range for given pivot.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportHelper.IsAtGroundWithNoNeedForPillarBelow(Mafi.Core.Terrain.TerrainTile,Mafi.HeightTilesI)">
            <summary>
            Whether the given transport position is at its lowest position above terrain and there is no need
            for pillar below it.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportHelper.ComputeOccupiedTilesForSegment(Mafi.Tile3i,Mafi.Tile3i,Mafi.Collections.Lyst{Mafi.Core.Terrain.OccupiedTileRange},Mafi.Collections.Lyst{System.Nullable{Mafi.Core.Factory.Transports.TransportTileMetadata}})">
             <summary>
             Computes occupied tiles for a segment BETWEEN given positions. Returns no tiles if the given pivots are
             on the same height and directly next to each other tiles.
            
             Note that the <paramref name="start"/> and <paramref name="end"/> are NOT part of the output.
            
             This method is thread safe.
             </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportHelper.ComputeOccupiedTiles(Mafi.Core.Factory.Transports.TransportTrajectory)">
            <summary>
            Computes occupied tiles for given trajectory.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportHelper.ComputeOccupiedTiles(Mafi.Core.Factory.Transports.TransportTrajectory,Mafi.Collections.ImmutableCollections.ImmutableArray{System.Nullable{Mafi.Core.Factory.Transports.TransportTileMetadata}}@)">
            <summary>
            Computes occupied tiles for given trajectory including per-tile metadata.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportHelper.ComputeSupportableAlongTrajectory(Mafi.Core.Factory.Transports.TransportTrajectory,Mafi.Collections.Lyst{Mafi.Core.Factory.Transports.TransportSupportableTile})">
            <summary>
            Computes supportable positions along trajectory.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportTileMetadata.IsStraight">
            <summary>
            Whether the tile is straight or a turn.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Transports.TransportPathFinder">
             <summary>
             Transport path-finder that is highly optimized for its purpose. It implements a variant of A* that is able to
             handle "jumps" (transport ramps) but may not be able to find a valid path in some cases (see remarks).
            
             Both start and goals are not checked for collisions. Pillars checking is "best-effort" and found paths may not
             have valid solution for supporting via pillars.
            
             Path-finder works in limited space domain 64 x 64 x 8 tiles. This means that the requested goal may get clamped
             to this domain during initialization. See <see cref="P:Mafi.Core.Factory.Transports.TransportPathFinder.CurrentGoal"/>.
             </summary>
             <remarks>
             Reference: https://www.redblobgames.com/pathfinding/a-star/implementation.html
            
             The core is a standard A* graph search algorithm but there are following changes to make work for transports.
            
             ===== RAMPS =====
             Unlike standard A*, we need to be able to perform "jumps" between non-neighboring nodes which is not
             normally allowed in A*. These jumps correspond to transport ramps. Without jumps, we'd be limited only to
             straight up/down in the grid.
            
             The ramps present a new issue with self collisions: A ramp occupies a set of extra nodes that should not be
             used by the path. Every node remembers an extra set of ramp-occupied-tiles that needs to be check for
             collisions when expanding. We use pooled arrays to avoid large number of small allocations here.
            
             These jumps also cause a systematic issue with the algorithm. We can no longer guarantee that every path will be
             found, even if it exists, precisely because of the ramps that may block them. For example, imagine a path from
             A to C that goes through B. Then, a first explored path from A to B blocks C due to ramp. Unfortunately,
             the optimal path A -> X -> B -> C will be never explored because node B was already "expanded" and closed by the
             previous path. Concrete example: Path straight down from (0, 0, 1) to (0, 0, 0) where any ramp directly from
             start blocks the goal, but will be explored earlier than any other paths.
            
             ===== GOAL CHANGING =====
             It is typical that for one start there may be many goals tested as the player moves their mouse while building
             a transport.
            
             Goal-changing is implemented by re-computing priorities of all pending nodes. All already found nodes have
             optimal path lengths regardless of goal position (except when ramps screw us over).
            
             It is important that goal position must not affect any logic during the path-finding. For example, since goal
             may be on a banned tile, we need to expand into banned tiles, bot not from them.
            
             Support for goal changing also restricts us from only searching from the start. This means that we don't have
             an easy way of detecting blocked path before exploring ALL reachable nodes.
            
             ===== PILLARS CHECKING =====
             Path-finder does its best effort to check pillars and discard paths that cannot be supported, but the checking
             is not perfect. Since we cannot predict when supports will be available, path-finder does search until
             `2 * pillar_radius` tiles are not supported. For example, it will fail in these cases:
              1) Transport is shorter than `pillar_radius` and no pillars were found (a special case of #2).
              2) Goal is reached but more than `pillar_radius` (but less than `2 * pillar_radius`) of the last tiles are
                 not supported.
            
             Due to challenges with jumps and goal changing, it is not possible to discard paths to goal that do not
             satisfy pillars constraints since such paths might be explored further when goal is changed.
            
             ===== WHAT DID NOT WORK =====
             It is tempting to disallow certain path shapes by not expanding to certain neighbors. For example, we wanted
             to ban turns at start/end of ramps. This was easy, when expanding node and making a ramp, just check that parent
             was in the same direction as the extension. Similarly, after a ramp, only straight segment can be allowed.
            
             The big problem is that such rules break an important assumption that we are searching on a graph. Every node of
             a graph must have a list of neighbors regardless of its parent.
            
             For example, imagine we search a path A -> B -> C and node C has no neighbors coming from B. But there might be
             a longer path A -> X -> C where C does have a neighbor D, but this path will be never explored since A -> X -> C
             is longer than A -> B -> C and when expanding X to C, this expansion will be discarded since it is not the
             shortest path.
            
             The takeaway is: Since we don't explicitly construct a graph, neighbor expansion have rules that does make it
             behave like it was a graph. For example, neighbors must not depend on current node's parent.
            
             ===== PERF =====
             Many optimizations were done to make the path-finding as fast as possible and allocation free.
            
             1) All node's data are pre-allocated structs around start node. Size of this pre-allocated area is
                64 x 64 x 8 = 32k. This restricts the path-finder to search only in +-32 in X-Y, and +-4 in Z around start.
                Node's index can be easily translated to a coordinate using a few bit operations, but this also restricts
                domain dimensions to powers of two.
             2) Node data itself is tightly-packed 8-byte struct. This makes path-finder's pre-allocated data only 262 kB.
            	   The smaller the data the less cache misses during path-finding will occur.
             3) Collision checks for nodes are postponed. Instead of checking collisions during expansion and adding
                only valid nodes to the priority queue (as traditional A* does), we postpone expensive checks so that only
                nodes that are being taken out of the priority queue are being checked. This saves large amount of
            	   checks (proportional to queue size). Nodes that are never expanded are not even checked for collisions.
                The downsides are a slightly larger queue (can contain "blocked" nodes) and extra code complexity of
                collision checking.
             4) Terrain height is cached so that we query terrain only once per unique 2D tile. Additionally, 3D tiles that
                are in collision are marked as banned for faster rejection next time.
             5) Max pillars height is cached so that we pillars only once per unique 2D tile.
             6) Occupancy collisions are also cached in nodes so that once a node has a collision, is marked as banned
                and collision on such node is never checked again.
             7) Instead of tracking of used nodes so that they can be reset, clearing is done using `Array.Clear` that
                effectively clears ALL nodes at once. This turned out to be faster. The only downside is that we cannot
                store any persistent data in nodes such as node ID.
             </remarks>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportPathFinder.XY_SIZE">
            <summary>
            Size of pre-allocated node array in both X and Y directions. Must be power of two.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportPathFinder.Z_SIZE">
            <summary>
            Size of pre-allocated node array in both Z direction. Must be power of two.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.coordFromIndex(System.Int32)">
            <summary>
            Converts node index to relative coordinate. Does not check input.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.indexFromCoord(Mafi.RelTile3i)">
            <summary>
            Converts relative coordinate to node index. Does not check input.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportPathFinder.m_originCoord">
            <summary>
            Current absolute position of node at origin (corner) coord [0, 0, 0].
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportPathFinder.m_nodes">
            <summary>
            Pre-allocated array of PF nodes.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportPathFinder.m_terrainHeightLookup">
            <summary>
            Provides fast lookup and cache for terrain data. Stored value is 1 + min allowed relative z-coord.
            Use via <see cref="M:Mafi.Core.Factory.Transports.TransportPathFinder.isCollidingWithTerrain(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportPathFinder.CurrentGoal">
            <summary>
            Note that the current goal might be different from the requested goal due to clamping.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportPathFinder.OriginalGoal">
            <summary>
            Goal as requested.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportPathFinder.TotalStepsCount">
            <summary>
            Number of performed steps of the current task.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.ChangeGoal(Mafi.Tile3i)">
            <summary>
            Changes goal of the path-finding.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.ContinuePathFinding(System.Int32@)">
            <summary>
            Runs the path-finding for given number of iterations. Returns status of the operation. Should be called again
            only when <see cref="F:Mafi.PathFinding.PathFinderResult.StillSearching"/> is returned.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.computeCollisionsReturnConnCollided(System.Int32,System.Int32,System.Int16@)">
            <summary>
            Check whether a transport from <paramref name="parentIndex"/> to <paramref name="nodeIndex"/> has
            collisions ON THE WAY to the given node, ignoring collisions of the node itself. However, if the node has
            any collisions, it is marked as banned.
            </summary>
            <remarks>
            Node collisions are ignored to enable goals on blocked tiles and to have shortest paths computed to them.
            This is necessary to have goal changing working properly. However, any connections with segments in between
            them are discarded immediately.
            </remarks>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.areOccupiedIndicesColliding(Mafi.Collections.ReadonlyCollections.ReadOnlyArraySlice{System.UInt16},System.UInt16[])">
            <summary>
            Checks whether there are any identical values in the two given arrays.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.extendExtraOccupiedTiles(Mafi.Collections.ReadonlyCollections.ReadOnlyArraySlice{System.UInt16},System.UInt16[])">
            <summary>
            Adds new entry to <see cref="F:Mafi.Core.Factory.Transports.TransportPathFinder.m_extraOccupiedNodesData"/> by combining the two given arrays and returns
            index of the newly added record.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.tryGetStepCost(System.Int32,System.Int32,System.UInt16@)">
            <summary>
            Computes cost for a single step.
            Note that cost per step should not be larger than 255 on average (spikes are acceptable) since entire path
            cost must fit into <c>ushort</c>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.estPathCostToGoal(System.UInt16)">
            <summary>
            Returns estimated cost from given node to the goal node. This MUST NOT overestimate.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.isCollidingWithTerrain(System.Int32)">
            <summary>
            Efficient way to check whether a node is colliding with terrain.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.computeHeightData(System.Int32)">
            <summary>
            Computes and encodes min height
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.TestOnly_IsCollidingWithTerrain(Mafi.Tile3i)">
            <summary>
            Tests whether given position is in collision with terrain (using
            <see cref="M:Mafi.Core.Factory.Transports.TransportHelper.GetLowestNonCollidingHeight(Mafi.Core.Terrain.TerrainTile)"/>). This is exposed only for tests and works only
            in the PF domain.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.TestOnly_CanBeSupportedByPillar(Mafi.Tile3i)">
            <summary>
            Tests whether given position can be supported by pillar (using
            <see cref="M:Mafi.Core.Factory.Transports.IPillarsChecker.GetMaxPillarHeightAt(Mafi.Tile2i)"/>). This is exposed only for tests and works only
            in the PF domain.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.extendPath(System.Int32,System.Int32,Mafi.Core.Factory.Transports.TransportPathFinder.NodeMutable)">
            <summary>
            Extends path-finding tree from <paramref name="parentNode"/> to <paramref name="nodeIndex"/> if they are
            connectable according to the const function. Nodes that are not connectable will not be added to the <see
            cref="F:Mafi.Core.Factory.Transports.TransportPathFinder.m_toProcessHeap"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.insertInHeapToBeProcessed(System.UInt16,Mafi.Core.Factory.Transports.TransportPathFinder.NodeMutable@)">
            <summary>
            Inserts given node to the <see cref="F:Mafi.Core.Factory.Transports.TransportPathFinder.m_toProcessHeap"/> with key based on heuristic and marks it visited.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.ReconstructPath(Mafi.Collections.Lyst{Mafi.Tile3i},System.Boolean)">
            <summary>
            Reconstructs found path. This should be called only if <see cref="M:Mafi.Core.Factory.Transports.TransportPathFinder.ContinuePathFinding(System.Int32@,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Tile3i}@)"/> returned <see
            cref="F:Mafi.PathFinding.PathFinderResult.PathFound"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportPathFinder.GetExploredTiles(Mafi.Collections.Lyst{Mafi.Core.Factory.Transports.TransportPfExploredTile})">
            <summary>
            Fills given list with nodes that were explored during last or current path-finding run.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportPathFinder.NodeMutable.CurrentCost">
            <summary>
            Current minimal cost of the path to this node from start. Is set to ushort.MaxValue if the current node
            was not verified for collisions.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportPathFinder.NodeMutable.ParentOnPathIndex">
            <summary>
            Predecessor on the path from this node. It is used when reconstructing the path. Parent of the
            very first node on the path is set to itself by definition. When there is no parent (node was not
            processed yet, the value is <c>ushort.MaxValue</c>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportPathFinder.NodeMutable.ExtraOccupiedTilesIndex">
            <summary>
            Index to an auxiliary array that stores extra occupied tiles that needs to be checked for collisions.
            This is typically coming from up/down segments.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportPathFinder.NodeMutable.UnsupportedLength">
            <summary>
            Length of transport that is currently unsupported by pillars. Is zero at positions where pillar exists.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportPathFinder.NodeMutable.IsVisited">
            <summary>
            Whether this node was visited (present in heap) but its neighbors were not explored yet.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportPathFinder.NodeMutable.IsProcessed">
            <summary>
            Whether this node is processed all its neighbors have been explored.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportPillar.Height">
            <summary>
            Height of the pillar. This does include the transport attachment on the top-most tile!
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Transports.TransportPillarsBuilder">
            <summary>
            Helper class that instantiates transports.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Transports.TransportProto">
             <remarks>
            
             Important note about transport throughput. We can affect throughput by three values: Transport speed,
             product spacing, and stack quantity. However, speed is fixed to spacing since speed has to divide spacing
             without remainder. This gives us following relationship:
            
             <c>Th = Spd / Spc * Stack</c>, where Th is throughput, Spd is speed/tick, Spc is spacing, and Stack is stacking.
            
             But <c>Spc = Spd * w</c>, where w must be positive integer, so we have
            
             <c>Th = Spd / (Spd * w) * Stack</c>, which is
             <c>Th = Stack / w</c>
            
             This means tha for a selected value of stacking, only some throughput values are possible, regardless of
             speed or spacing. Table below shows possible values of throughput per 10 ticks (1 second):
             <code>
             Throughput / sec (10 ticks)
             |     w |   3   |   4   |   5   |   6   |   7   |   8   |   9   |  10   |
             | Stack +-------+-------+-------+-------+-------+-------+-------+-------+
             |     1 | 3.333 |  2.5  |   2   | 1.666 | 1.428 |  1.25 | 1.111 |   1   |
             |     2 | 6.666 |   5   |   4   | 3.333 | 2.857 |  2.5  | 2.222 |   2   |
             |     3 |  10   |  7.5  |   6   |   5   | 4.285 |  3.75 | 3.333 |   3   |
             |     4 | 13.33 |  10   |   8   | 6.666 | 5.714 |   5   | 4.444 |   4   |
             </code>
             To get speed and spacing for a chosen throughput, chose stacking row, in that row choose w with desired
             throughput. Then, choose spacing and speed is simply <c>Spd = w / Spc</c>.
             </remarks>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.MAX_TERRAIN_PENETRATION">
            <summary>
            Maximum terrain height that can penetrate into a transport and still be considered valid.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.SurfaceRelativeHeight">
            <summary>
            Surface height of the transport relative to the tile. Transported products will be on this relative height.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.MaxQuantityPerTransportedProduct">
            <summary>
            Maximum stacking quantity per transported product.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.TransportedProductsSpacing">
            <summary>
            Spacing of transported products.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.SpeedPerTick">
            <summary>
            Distance traveled per sim tick.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.ThroughputPerTick">
            <summary>
            Amount of transported products per tick.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.ProductSpacingWaypoints">
            <summary>
            Spacing of transported products in the number of waypoints.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.ProductSpacing">
            <summary>
            Spacing of transported products.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.ZStepLength">
            <summary>
            Number of straight tiles required for changing height by one. Value 1 means max 45 degrees up/down, 2 means
            30 degrees, etc. Value <see cref="P:Mafi.RelTile1i.MaxValue"/> represents the transport cannot go up/down.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.MaxPillarSupportRadius">
            <summary>
            Maximum radius of pillars support. Each tile of transport has to be at most at this distance from a pivot.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.NeedsPillarsAtGround">
            <summary>
            Whether this transport needs pillars at ground level.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.CanBeBuried">
            <summary>
            Whether transport collapses when buried under ground.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.TileSurfaceWhenOnGround">
            <summary>
            If set, this transport will have this tile surface floor when it is on the ground.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.PortsShape">
            <summary>
            Shape of ports of this transport. Only transports with the same port can be connected.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.BaseElectricityCost">
            <summary>
            Electricity consumed by the transport per ~450 tiles (given current formula).
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.CornersSharpnessPercent">
            <summary>
            Sharpness of corners in percent.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.IsBuildable">
            <summary>
            Whether this transport is buildable by the player.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.LengthPerCost">
            <summary>
            Length of transport per given cost.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.AllowMixedProducts">
            <summary>
            Whether this transport allows different products at the same time. If this is set to false, all products on
            the transport has to be identical.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportProto.NextTier">
            <summary>
            Next tier of transport (upgrade), if available.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.Graphics">
            <summary>
            Graphics-only properties that does not affect game simulation and are not needed or accessed by the game
            simulation.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportProto.CanGoUpDown">
            <summary>
            Whether this transport can go up/down. Note that this depends on <see cref="F:Mafi.Core.Factory.Transports.TransportProto.ZStepLength"/>,
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportProto.NeedsPillars">
            <summary>
            Whether this transport needs pillar supports.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportProto.Gfx.IconPath">
            <summary>
            Path for icon sprite.
            </summary>
            <remarks>This path is valid only after <see cref="M:Mafi.Core.Factory.Transports.TransportProto.Gfx.Initialize(Mafi.Core.Factory.Transports.TransportProto)"/> was called.</remarks>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.Gfx.IconIsCustom">
            <summary>
            Whether custom icon path was set. Otherwise, icon path is automatically generated.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.Gfx.SamplesPerCurvedSegment">
            <summary>
            Number of discrete samples per curved segment of this transports. More samples creates smoother curves
            but costs performance with model generation and drawing. This value is intentionally separate from the
            simulation because transports that do not show products may be simpler in sim but nice detailed in gfx.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.Gfx.MaterialPath">
            <summary>
            Material of this transport.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.Gfx.TransportUvLength">
            <summary>
            How long transport will be on the texture. This affect how much of the texture will be used for the
            transport because the same resolution of pixels is kept for both vertical and horizontal dimensions.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.Gfx.RenderTransportedProducts">
            <summary>
            Whether transported products should be rendered.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.Gfx.SoundOnBuildPrefabPath">
            <summary>
            Sound that is played when the transport is built.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.Gfx.FlowIndicator">
            <summary>
            Optional prefab of the flow indicator that will be placed on each segment.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.Gfx.PillarAttachments">
            <summary>
            Pillar attachments. Not all types need to be set. Same attachment prefab can be used for more types.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.Gfx.FlowIndicatorSpec.IndicatorSubmodelName">
            <summary>
            Name of sub-model that has the flow indicator material. Only one child is supported.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportProto.Gfx.FlowIndicatorSpec.SkipTransportLength">
            <summary>
            How long space should be skipped in the actual transport model for the flow indicator. Zero means no
            skipping.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Transports.TransportsBuilder">
            <summary>
            Helper class that instantiates transports.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Transports.TransportsConstructionHelper">
            <summary>
            Helper class for computing how a new transport can be joined with existing ones. Only trajectory validation
            is performed by this class. No collision, terrain, or pillars validation is done.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportsConstructionHelper.canBuildOrJoinTransport(Mafi.Core.Factory.Transports.TransportProto,Mafi.Collections.ReadonlyCollections.ReadOnlyArraySlice{Mafi.Tile3i},System.Boolean,System.Nullable{Mafi.Direction90}@,System.Nullable{Mafi.Direction90}@,Mafi.Option{Mafi.Core.Factory.Transports.TransportTrajectory}@,System.Boolean@,System.Nullable{Mafi.Core.Factory.Transports.CanPlaceMiniZipperAtResult}@,System.Nullable{Mafi.Core.Factory.Transports.CanPlaceMiniZipperAtResult}@,System.Nullable{Mafi.Core.Factory.Transports.CanChangeDirectionResult}@,System.Nullable{Mafi.Core.Factory.Transports.CanChangeDirectionResult}@,Mafi.Localization.LocStrFormatted@,System.Predicate{Mafi.Core.Factory.Transports.Transport},System.Boolean,System.Boolean)">
            <summary>
            Checks whether a transport with given parameters is buildable. This also considers joining the transport
            with other transports via mini-zipper or changing existing transports end direction.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportsConstructionHelper.CanJoinTo(Mafi.Core.Factory.Transports.TransportProto,Mafi.Collections.ReadonlyCollections.ReadOnlyArraySlice{Mafi.Tile3i},System.Nullable{Mafi.Direction90},System.Nullable{Mafi.Direction90},Mafi.Core.Factory.Transports.Transport,System.Boolean,System.Boolean,System.Boolean,System.Boolean@,System.Boolean@,Mafi.Option{Mafi.Core.Factory.Transports.TransportTrajectory}@,System.Nullable{Mafi.Core.Factory.Transports.CanPlaceMiniZipperAtResult}@,System.Nullable{Mafi.Core.Factory.Transports.CanChangeDirectionResult}@,Mafi.Localization.LocStrFormatted@)">
             <summary>
             Determines whether the given pivots can be joined to the given existing transport either at start
             (of the pivots array) or at the end (based on <paramref name="atStart"/>).
             This assumes that the transports are overlapping at start/end.
            
             There are two cases on connection:
             1) Connection via mini-zipper. In this case the <paramref name="miniZipJoinResult"/> will contain details
             of the split of the existing transport and the <paramref name="newTraj"/> will contain the new trajectory
             which will be shorter by the one tile where mini-zipper was placed.
             2) Soft-join with neighboring transport by orienting current and existing transport's directions towards
             each other so that they will be merged once they are both built. This happens when they meet at the end.
             In this case the <paramref name="changeDirectionResult"/> will contain details about change of direction of
             the existing transport and the <paramref name="newTraj"/> will contain the new trajectory which will be
             shorter by the one tile where the transport overlap.
            
             When false is returned, <paramref name="error"/> will contain useful info about the error.
             </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportsConstructionHelper.CanChangeDirectionOf(Mafi.Core.Factory.Transports.Transport,Mafi.Direction90,System.Boolean,System.Nullable{Mafi.Core.Factory.Transports.CanChangeDirectionResult}@)">
            <summary>
            Whether start/end direction of the given transport can be changed to the given direction.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportsConstructionHelper.CanPlaceMiniZipperAt(Mafi.Core.Factory.Transports.Transport,Mafi.Tile3i,Mafi.Core.Factory.Transports.CanPlaceMiniZipperAtResult@,Mafi.Localization.LocStrFormatted@,System.Nullable{Mafi.Direction90})">
            <summary>
            Determines whether mini-zipper can be placed on transport at the given position.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportsConstructionHelper.TryFindPillarsForTrajectory(Mafi.Core.Factory.Transports.TransportTrajectory,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Tile3i}@,System.Int32@,System.Int32@)">
            <summary>
            Finds supporting pillars for given trajectory. Returns whether the entire trajectory was successfully
            supported by pillars and the found supported tiles are at <paramref name="supportedTiles"/>.
            </summary>
            <remarks>
            Rules for pillars placement are as follows:
            1) Try to reuse all existing pillars along the trajectory that can be extended to the required height.
            2) If there are no reused pillars on the first or last <c>ceil(support_radius / 2)</c> tiles, try to place
               extra new pillars there even if the tiles are already supported (start testing from start/end, moving
               inwards). This is to avoid visually unsupported transports that have long ends without pillars.
            3) Add new pillars to all unsupported tiles, trying to support as many tiles as possible at once by finding
               the first unsupported tile at index <c>i</c> and trying to place a pillar furthest forward first (at
               <c>i + support_radius</c>), then trying to lower all the way to <c>i - support_radius</c>.
            </remarks>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportsManager.tryMergeTransports(Mafi.Core.Factory.Transports.Transport,Mafi.Core.Factory.Transports.Transport,Mafi.Collections.ReadonlyCollections.ReadOnlyArraySlice{Mafi.Tile3i},System.Boolean,Mafi.Core.Factory.Transports.Transport@)">
            <summary>
            Tries to merge the given transports to one. The first transport's end point must be directed at the first
            connecting pivot, and the second transport's start point must be directed at the last connecting pivot.
            If no connecting pivots are given, both transports should point at each other. Both transport must be
            constructed.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportsManager.removeZipperIfNeeded(Mafi.Core.Factory.Zippers.MiniZipper)">
            <summary>
            Removes the given mini-zipper if any of the following conditions are met:
            1) Mini-zipper has no ports connected.
            2) Mini-zipper has only 1 port connected, and the connected port is a transport, and the transport can be
               extended to replace that mini-zipper. If any of the previous conditions are not met, mini-zipper stays.
            3) Mini-zipper has exactly 2 connected transports and they can be connected through the removed mini-zipper.
               If ports are not two transports, or the transports cannot be connected (due to direction for example),
               the mini-zipper stays.
            4) If mini-zipper has connected 1 transport and 1 non-transport, and the transport can be extended to
               connect to the non-transport port.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportsManager.checkPillarAndReplaceIfNeeded(Mafi.Core.Factory.Transports.TransportPillar)">
            <summary>
            Checks if pillar has transport at its top. If not, shortens the pillar as much as possible, or removes it
            when no transports are being supported anymore.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportsManager.TryCreateTrajectorySnapToPorts(Mafi.Core.Factory.Transports.TransportProto,Mafi.Collections.ReadonlyCollections.ReadOnlyArraySlice{Mafi.Tile3i},System.Nullable{Mafi.Direction90},System.Nullable{Mafi.Direction90},System.Boolean,System.Boolean,Mafi.Core.Factory.Transports.TransportTrajectory@,System.Boolean@,Mafi.Localization.LocStrFormatted@)">
             <summary>
             Tries to create a transport trajectory from given pivots and optional start/end directions and returns
             <c>true</c> if it was successfully created.
            
             If start/end directions are not provided, they will "snap" to a first matching neighboring port, or
             they will be chosen based on transport direction so that they are valid.
            
             This also verifies that transport has a correct direction and in case of miss match (e.g. start connected
             to input port) the order of pivots will be reversed. If both connected ports are input (or output),
             this will fail.
            
             Note that <paramref name="trajectory"/> may be set even when <c>false</c> is returned. This "invalid"
             trajectory can be still shown to user along with error message.
             </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportsManager.ComputeTrajDirectionsSnapToPorts(Mafi.Core.Factory.Transports.TransportProto,Mafi.Collections.ReadonlyCollections.ReadOnlyArraySlice{Mafi.Tile3i},System.Nullable{Mafi.Direction90},System.Nullable{Mafi.Direction90},Mafi.RelTile3i@,Mafi.RelTile3i@,System.Boolean)">
            <summary>
            Port snapping used in <see cref="M:Mafi.Core.Factory.Transports.TransportsManager.TryCreateTrajectorySnapToPorts(Mafi.Core.Factory.Transports.TransportProto,Mafi.Collections.ReadonlyCollections.ReadOnlyArraySlice{Mafi.Tile3i},System.Nullable{Mafi.Direction90},System.Nullable{Mafi.Direction90},System.Boolean,System.Boolean,Mafi.Core.Factory.Transports.TransportTrajectory@,System.Boolean@,Mafi.Localization.LocStrFormatted@)"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportsManager.CanBuildOrJoinTransport(Mafi.Core.Factory.Transports.TransportProto,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Tile3i},System.Nullable{Mafi.Direction90},System.Nullable{Mafi.Direction90},System.Boolean,Mafi.Core.Factory.Transports.CanBuildTransportResult@,Mafi.Localization.LocStrFormatted@,Mafi.Option{Mafi.Core.Entities.Static.IStaticEntity}@,System.Boolean,System.Boolean)">
             <summary>
             Verifies whether a transport constructed from given parameters is buildable. This also considers joining
             a transport with mini-zippers or changing direction of existing transports.
            
             If a transport is not buildable, the <paramref name="result"/> still may have some useful data on what was
             attempted (like a trajectory) that can be displayed to the player.
            
             If start/end directions are not provided, they will "snap" to a first matching neighboring port, or
             they will be chosen based on transport direction so that they are valid.
            
             This also verifies that transport has a correct direction and in case of miss match (e.g. start connected
             to input port) the order of pivots will be reversed. If both connected ports are input (or output),
             this will fail.
            
             Note that resulting transport pivots may be different (shorter and/or reversed) than provided.
             </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportsManager.TryBuildOrJoinTransport(Mafi.Core.Factory.Transports.TransportProto,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Tile3i},Mafi.Direction90,Mafi.Direction90,Mafi.Option{Mafi.Core.Factory.Transports.Transport}@,Mafi.Option{Mafi.Core.Factory.Zippers.MiniZipper}@,Mafi.Option{Mafi.Core.Factory.Zippers.MiniZipper}@,Mafi.Localization.LocStrFormatted@)">
             <summary>
             Tries to build a transport supported by pillars on given tiles.
            
             This verifies that:
             1) Transport itself can be built based on occupancy. The given trajectory is assumed valid.
                Use <see cref="M:Mafi.Core.Factory.Transports.TransportsManager.TryCreateTrajectorySnapToPorts(Mafi.Core.Factory.Transports.TransportProto,Mafi.Collections.ReadonlyCollections.ReadOnlyArraySlice{Mafi.Tile3i},System.Nullable{Mafi.Direction90},System.Nullable{Mafi.Direction90},System.Boolean,System.Boolean,Mafi.Core.Factory.Transports.TransportTrajectory@,System.Boolean@,Mafi.Localization.LocStrFormatted@)"/> or <see cref="M:Mafi.Core.Factory.Transports.TransportTrajectory.TryCreateFromPivots(Mafi.Core.Factory.Transports.TransportProto,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Tile3i},System.Nullable{Mafi.RelTile3i},System.Nullable{Mafi.RelTile3i},Mafi.Core.Factory.Transports.TransportTrajectory@,System.String@,System.Boolean,System.Boolean)"/>
                to create one.
             2) Transporting has no self-collisions (this is not guaranteed by <see cref="T:Mafi.Core.Factory.Transports.TransportTrajectory"/>).
             3) Transport is adequately supported on given 2D tiles by existing or new pillars.
            
             It is OK to have extra or invalid pillars in the pillars array, but they will be discarded. If transport
             is still valid without them, it will be built.
             </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportsManager.TryBuildOrJoinTransport(Mafi.Core.Factory.Transports.TransportProto,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Tile3i},System.Nullable{Mafi.Direction90},System.Nullable{Mafi.Direction90},System.Boolean,Mafi.Option{Mafi.Core.Factory.Transports.Transport}@,Mafi.Option{Mafi.Core.Factory.Zippers.MiniZipper}@,Mafi.Option{Mafi.Core.Factory.Zippers.MiniZipper}@,Mafi.Localization.LocStrFormatted@)">
            <summary>
            Allows port snapping.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportsManager.TryBuildOrJoinTransport(Mafi.Core.Factory.Transports.TransportProto,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Tile3i},System.Nullable{Mafi.Direction90},System.Nullable{Mafi.Direction90},System.Boolean,Mafi.Option{Mafi.Core.Factory.Transports.Transport}@,Mafi.Option{Mafi.Core.Factory.Zippers.MiniZipper}@,Mafi.Option{Mafi.Core.Factory.Zippers.MiniZipper}@,Mafi.Localization.LocStrFormatted@,Mafi.Core.Factory.Transports.CanBuildTransportResult@,Mafi.Option{Mafi.Core.Entities.Static.IStaticEntity}@)">
            <summary>
            Exposes more info about the build attempt.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportsManager.buildOrExtendPillarNoChecks(Mafi.Tile2i,Mafi.HeightTilesI,System.Boolean)">
            <summary>
            Builds a pillar without any checks.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Transports.TransportTrajectory">
            <summary>
            Immutable representation of discretized transport trajectory.
            </summary>
            <remarks>
            This class computes its data on-demand because some use-cases (such as previews in UI) don't need some data
            such as the waypoints, which are actually quite expensive to compute. This also simplifies loading.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportTrajectory.TransportProto">
            <summary>
            Proto of transport of this trajectory.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportTrajectory.Curve">
            <summary>
            The original curve for this trajectory. This is used by GFX that generates transport meshes which may use
            different discretization settings.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportTrajectory.PivotSegmentIndices">
            <summary>
            Maps a pivot index to a curve segment index that contains the pivot.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportTrajectory.OccupiedTiles">
            <summary>
            Occupied tiles of the transport. There may be more than one entry per 2D tile if transport is crossing
            above/below itself. This class does not guarantee no self-intersections.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportTrajectory.OccupiedTilesMetadata">
            <summary>
            Metadata for <see cref="P:Mafi.Core.Factory.Transports.TransportTrajectory.OccupiedTiles"/>. If the metadata of a tile is null, that occupied tile is
            "helper" tile that just blocks area above/below pivot due to ramps. Such tile has no transport through it.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportTrajectory.Pivots">
            <summary>
            Pivots of this transport trajectory. Neighboring pivots must differ in X or Y, but not both (each segment
            must be parallel to either X or Y). Pivots cannot be above each other (only differ in Z).
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportTrajectory.StartDirection">
            <summary>
            Direction of the first pivot. This direction always points away from the trajectory.
            </summary>
            <remarks>
            While all transports in game should have the Z component always zero, we allow to have trajectories with
            non-zero direction to enable constructing sub-transports for example for highlighting.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportTrajectory.EndDirection">
            <summary>
            Direction of the last pivot. This direction always points away from the trajectory.
            </summary>
            <remarks>
            While all transports in game should have the Z component always zero, we allow to have trajectories with
            non-zero direction to enable constructing sub-transports for example for highlighting.
            </remarks>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportTrajectory.Waypoints">
            <summary>
            Discretized waypoints of this trajectory. Distance between waypoints is equal to transport speed per tick.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportTrajectory.CurveSegmentWaypointIndices">
            <summary>
            Curve segment <c>i</c> starts at waypoint given by this array on index <c>i</c> and ends at <c>i + 1</c>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportTrajectory.TrajectoryLength">
            <summary>
            Total length of all segments
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportTrajectory.MaxProducts">
            <summary>
            Max number of products on the transport, given that all products obey spacing.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Transports.TransportTrajectory.SupportableTiles">
             <summary>
             Tiles ordered along the trajectory that need to be supported by pillars. A pillar will support all tiles
             around index <c>i</c> in radius <see cref="F:Mafi.Core.Factory.Transports.TransportProto.MaxPillarSupportRadius"/> indices.
             All pairs of neighboring tiles are at distance 1 to each other.
            
             This differs from <see cref="P:Mafi.Core.Factory.Transports.TransportTrajectory.OccupiedTiles"/> since that array has some extra entries where
             with null metadata. All supportable tiles have valid metadata.
             </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportTrajectory.recomputeCurveOrThrow(Mafi.Curves.CubicBezierCurve3f@,Mafi.Collections.ImmutableCollections.ImmutableArray{System.Int32}@)">
            <summary>
            Re-computes curve, usually happens after load. If this fails, <see cref="T:System.Exception"/> is thrown.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportTrajectory.TryCreateFromPivots(Mafi.Core.Factory.Transports.TransportProto,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Tile3i},System.Nullable{Mafi.RelTile3i},System.Nullable{Mafi.RelTile3i},Mafi.Core.Factory.Transports.TransportTrajectory@,System.String@,System.Boolean,System.Boolean)">
             <summary>
             Tries to create trajectory fom given pivots and optional start/end directions.
            
             If start/end directions are not given, they will be set based on transport direction on each end.
             </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportTrajectory.TryCreateCurveFromPivots(Mafi.Core.Factory.Transports.TransportProto,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Tile3i},Mafi.RelTile3i,Mafi.RelTile3i,Mafi.Curves.CubicBezierCurve3f@,Mafi.Collections.ImmutableCollections.ImmutableArray{System.Int32}@,System.String@,System.Boolean)">
            <summary>
            Creates transport curve. The curve represents a trajectory that is taken by the products. This method does
            all the necessary validation of the pivots.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportTrajectory.OptimizePivots(Mafi.Collections.Lyst{Mafi.Tile3i})">
            <summary>
            Optimizes pivots in-place by removing pivots from straight lines keeping only corners and ramps.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportTrajectory.getPivotEndPoints(Mafi.Vector3f,Mafi.Vector3f@,Mafi.Vector3f@)">
            <summary>
            Computes end-point of pivot that are on the boundary of the pivot. Returned points are relative to the origin
            [0, 0, 0].
            </summary>
            <param name="directionToNext">Direction towards next pivot</param>
            <param name="ptInFront">Point that is at intersection of pivot boundary and direction vector.</param>
            <param name="ptBehind">Point that is at intersection of pivot boundary and negative direction vector.</param>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportTrajectory.ComputeRotation(Mafi.Curves.CubicBezierCurve3f,System.Int32,Mafi.Percent)">
            <summary>
            Computes quaternion rotation based on position among a curve.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportTrajectory.StartDirectionOf(System.Int32)">
            <summary>
            Returns start direction of requested pivot.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportTrajectory.EndDirectionOf(System.Int32)">
            <summary>
            Returns end direction of requested pivot.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportTrajectory.ComputeStartAndEndDirections(Mafi.Collections.ReadonlyCollections.ReadOnlyArraySlice{Mafi.Tile3i},System.Nullable{Mafi.RelTile3i},System.Nullable{Mafi.RelTile3i},Mafi.RelTile3i@,Mafi.RelTile3i@)">
             <summary>
             Computes any missing start/end directions based on transport start/end direction.
            
             For a single-tile transport with no preferred directions, a direction along X axis is chosen.
             </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Transports.TransportTrajectory.s_tryGetLowPivotIndexForTilesTmp">
            <summary>
            Cache for the `TryGetLowPivotIndexFor` method. Do not use this anywhere else to keep the
            `TryGetLowPivotIndexFor` thread safe.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Transports.TransportTrajectory.TryGetLowPivotIndexFor(Mafi.Tile3i,System.Int32@,System.Boolean@)">
             <summary>
             Returns the lower index of a pivot surrounding transport segment at given coordinate, or index of the pivot
             itself. The <paramref name="isAtPivot"/> will be true when given position is a pivot and returned index is index of that pivot.
             Returns null when given coordinate is not on this transport.
            
             This method is thread safe.
             </summary>
        </member>
        <member name="T:Mafi.Core.Factory.WellPumps.IVirtualResourceMiningEntity">
            <summary>
            Entity that mines virtual terrain resources.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.WellPumps.IVirtualResourceMiningEntity.Description">
            <summary>
            Describes to the player what is the resource state.
            </summary>
        </member>
        <member name="T:Mafi.Core.Factory.Zippers.MiniZipper">
            <summary>
            Mini-zipper is simplified version of zipper. Since there are many of these in the factory the code is optimized
            and does not simply derive from a Zipper.
            </summary>
            <remarks>
            Mini-zipper does not use electricity to make is even more simple. Electricity is used by the connected
            transports which should be enough.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Factory.Zippers.Zipper.m_inputBuffer">
            <summary>
            Input buffer that can accept one product per port to make input prioritization logic possible.
            Indexed by port index.
            </summary>
        </member>
        <member name="P:Mafi.Core.Factory.Zippers.Zipper.ForceEvenInputs">
            <summary>
            When set, all connected inputs will accept same amounts of products.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Zippers.Zipper.m_outputBuffer">
             <summary>
             Internal buffer of products waiting for output.
             </summary>
             <remarks>
             |====================|====================|====================|
             |              any input allowed          |priority input only |
             |priority output only|           any output allowed            |
            
             |»                  «|
             When buffer is in this range, any input is allowed (priority ports are preferred) but only priority output
             is allowed. This happens when there are not enough inputs. This range must be big enough to handle
             full throughput of priority output ports to no leak products to non-priority ports.
            
                                  |»                  «|
             In the mid range, any inputs and outputs are allowed (priority ports are preferred). This happens when
             priority outputs cannot deal with the amount of products so non-priority ports output are being used.
             This range needs to be big enough to handle throughput of non-priority input and output ports
            
                                                       |»                  «|
             In the last range, buffer is too full and only priority inputs are allowed. This happens when too many
             products are flowing in the buffer. This range has to be large enough to allow priority input
             throughput.
             </remarks>
        </member>
        <member name="P:Mafi.Core.Factory.Zippers.Zipper.ForceEvenOutputs">
            <summary>
            When set, all connected outputs will receive the same amounts of products.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Zippers.Zipper.recomputeBufferSizeAndThresholds">
            <summary>
            Recomputes buffer size and thresholds based on the current port connections and priorities to have as
            small buffer as possible but not affect correct operation and throughput.
            </summary>
        </member>
        <member name="M:Mafi.Core.Factory.Zippers.Zipper.TrySetPortPriorityForPort(System.Char,System.Nullable{System.Boolean})">
            <summary>
            Returns whether requested port name was found and priority was set.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Zippers.ZipperSetPriorityPortsCmd.IsPrioritized">
            <summary>
            Acts like toggle if null.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Zippers.ZipperProto.PortsShape">
            <summary>
            Shape of zipper ports. All ports of zipper have the same shape.
            </summary>
        </member>
        <member name="F:Mafi.Core.Factory.Zippers.ZipperProto.RequiredPower">
            <summary>
            Electricity consumed by the zipper. Can be zero to turn off power consumption.
            </summary>
        </member>
        <member name="P:Mafi.Core.Fleet.BattleFleet.IsInBattle">
            <summary>
            Whether this fleet is currently in battle. No changes to the fleet can be made during battle.
            </summary>
        </member>
        <member name="T:Mafi.Core.Fleet.BattleResult">
            <summary>
            Battle result that has detailed info about the battle.
            </summary>
        </member>
        <member name="T:Mafi.Core.Fleet.PlayersBattleResult">
            <summary>
            Battle results from the player's view.
            </summary>
            <remarks>
            All players results are stored in saved game for statistics. Do not store any references to game objects here.
            </remarks>
        </member>
        <member name="P:Mafi.Core.Fleet.IBattleSimulator.OngoingBattle">
            <summary>
            Ongoing battle.
            </summary>
        </member>
        <member name="M:Mafi.Core.Fleet.IBattleSimulator.StartBattle(Mafi.Core.Fleet.BattleFleet,Mafi.Core.Fleet.BattleFleet)">
            <summary>
            Starts a battle. This can be done only when no other battles are in progress.
            </summary>
        </member>
        <member name="P:Mafi.Core.Fleet.IBattleSimulator.AllBattleResults">
            <summary>
            History of all battle results in the current game.
            </summary>
        </member>
        <member name="T:Mafi.Core.Fleet.BattleSimulator">
             <summary>
             Battle simulator resolves battles using turn-based simulation.
             </summary>
             <remarks>
             To evaluate a battle, use <see cref="M:Mafi.Core.Fleet.BattleSimulator.StartBattle(Mafi.Core.Fleet.BattleFleet,Mafi.Core.Fleet.BattleFleet)"/> method.
            
             State of a battle is held in the <see cref="T:Mafi.Core.Fleet.BattleState"/> class so that the simulator can evaluate the battle in
             time-sliced manner over multiple game steps. Only one battle can be happening at a time and is accessible via
             <see cref="P:Mafi.Core.Fleet.BattleSimulator.OngoingBattle"/>.
            
             Battle is evaluated in rounds. Each round, every entity from both fleets gets to perform an action using <see
             cref="M:Mafi.Core.Fleet.FleetEntity.StepBattle(Mafi.Core.Fleet.BattleFleet,Mafi.Core.Fleet.BattleState)"/>. Order of entities each round is fixed and based on <see
             cref="P:Mafi.Core.Fleet.FleetEntity.BattlePriority"/>. Note that defender has a small priority advantage <see
             cref="P:Mafi.Core.Fleet.IBattleSimConfig.DefenderExtraBattlePriority"/>.
            
             Battle ends when at least one fleet has no entities with <see cref="P:Mafi.Core.Fleet.FleetEntity.CanContinueBattle"/>. There is a
             safety counter <see cref="P:Mafi.Core.Fleet.IBattleSimConfig.MaxBattleRounds"/> to prevent potential infinite battles. In this case
             or in case of draw (which currently should not happen), the defender is considered a winner.
             </remarks>
        </member>
        <member name="M:Mafi.Core.Fleet.BattleSimulator.stepBattle(Mafi.Core.Fleet.BattleState)">
            <summary>
            Simulates one battle round for all ongoing battles.
            </summary>
        </member>
        <member name="P:Mafi.Core.Fleet.BattleState.BattleSortedEntities">
            <summary>
            Entities sorted by their <see cref="P:Mafi.Core.Fleet.FleetEntity.BattlePriority"/>. Defender entities has bonus <see
            cref="P:Mafi.Core.Fleet.IBattleSimConfig.DefenderExtraBattlePriority"/>.
            </summary>
        </member>
        <member name="T:Mafi.Core.Fleet.DestructibleFleetPartProto">
            <summary>
            Represents fleet entity with HP and armor.
            </summary>
        </member>
        <member name="T:Mafi.Core.Fleet.FleetEntity">
             <summary>
             An instance of fleet entity that has state.
            
             Fleet entity is made of parts that give weapons or upgrades.
             </summary>
        </member>
        <member name="F:Mafi.Core.Fleet.FleetEntity.DistancePerStep">
            <summary>
            World map distance per step.
            </summary>
        </member>
        <member name="F:Mafi.Core.Fleet.FleetEntity.DistancePerFuel">
            <summary>
            World map distance per 1 unit of fuel.
            </summary>
        </member>
        <member name="T:Mafi.Core.Fleet.FleetEntityPartProto">
            <summary>
            Adds part to a fleet entity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Fleet.FleetEntityPartProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Fleet.FleetEntityPartProto.ID.op_Implicit(Mafi.Core.Fleet.FleetEntityPartProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Fleet.FleetEntityGfx.GameObjectToShow">
            <summary>
            Name of sub-models that will be shown.
            </summary>
        </member>
        <member name="P:Mafi.Core.Fleet.FleetEntitySlot.ExistingPart">
            <summary>
            Part that is currently assigned to this slot.
            </summary>
        </member>
        <member name="T:Mafi.Core.Fleet.FleetEntityStats">
            <summary>
            Stats about ship. Mostly used in UI. Allows to preview upgrades easily.
            </summary>
        </member>
        <member name="T:Mafi.Core.Fleet.FleetEntityHullProto">
            <summary>
            Hull represents the main part of the entity. If hull is destroyed, the whole entity is destroyed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Fleet.FleetEntityHullProto.BattlePriority">
            <summary>
            Battle priority determines order of ships turns in a battle round.
            </summary>
        </member>
        <member name="F:Mafi.Core.Fleet.FleetEntityHullProto.HitChanceWeight">
            <summary>
            Weight that determines chance to be picked as a target when ship is switching targets.
            </summary>
        </member>
        <member name="F:Mafi.Core.Fleet.FleetEntityHullProto.ExtraRoundsToEscape">
            <summary>
            Extra rounds to escape for this ship.
            </summary>
        </member>
        <member name="F:Mafi.Core.Fleet.FleetEntityHullProto.Gfx.IconContentWidth">
            <summary>
            Defines the width of the ship in the icon (from left).
            </summary>
        </member>
        <member name="F:Mafi.Core.Fleet.FleetEntityHullProto.Gfx.IconContentTopOffset">
            <summary>
            Defines the percent of height (from top) which is unoccupied.
            </summary>
        </member>
        <member name="F:Mafi.Core.Fleet.FleetEntityHullProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Fleet.FleetEntityHullProto.ID.op_Implicit(Mafi.Core.Fleet.FleetEntityHullProto.ID)~Mafi.Core.Fleet.FleetEntityPartProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Fleet.FleetEntityPartProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Fleet.FleetEntityHullProto.ID.op_Implicit(Mafi.Core.Fleet.FleetEntityHullProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="T:Mafi.Core.Fleet.FleetHull">
            <summary>
            Actual hull instance in the fleet entity.
            </summary>
        </member>
        <member name="T:Mafi.Core.Fleet.UpgradeHullProto">
            <summary>
            Upgrades hull properties.
            </summary>
        </member>
        <member name="T:Mafi.Core.Fleet.FleetWeaponProto">
            <summary>
            Specifies a weapon family.
            </summary>
        </member>
        <member name="F:Mafi.Core.Fleet.FleetWeaponProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Fleet.FleetWeaponProto.ID.op_Implicit(Mafi.Core.Fleet.FleetWeaponProto.ID)~Mafi.Core.Fleet.FleetEntityPartProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Fleet.FleetEntityPartProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Fleet.FleetWeaponProto.ID.op_Implicit(Mafi.Core.Fleet.FleetWeaponProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="T:Mafi.Core.Fleet.FleetWeapon">
            <summary>
            Actual weapon instance in the fleet entity.
            </summary>
        </member>
        <member name="P:Mafi.Core.Fleet.FleetWeapon.AvgDamagePer10Rounds">
            <summary>
            Average DPR is computed as: (Damage / ReloadTIme) * AvgAccuracy.
            </summary>
        </member>
        <member name="P:Mafi.Core.Fleet.IBattleSimConfig.DefenderExtraBattlePriority">
            <summary>
            All defender's entities get extra battle priority. This gives a slight advantage to the defender.
            </summary>
        </member>
        <member name="P:Mafi.Core.Fleet.IBattleSimConfig.MaxBattleRounds">
            <summary>
            Maximum number of battle rounds. This prevents infinite battles in case of some bug. Note that one battle
            steps is one sim step.
            </summary>
        </member>
        <member name="P:Mafi.Core.Fleet.IBattleSimConfig.StartingExtraFleetDistance">
            <summary>
            Extra distance added between fleets before the battle begins.
            </summary>
        </member>
        <member name="T:Mafi.Core.Fleet.UpgradableIntProto">
            <summary>
            Defines int upgrade.
            </summary>
            <remarks>Note that this is not real proto as it does not derive from Proto.</remarks>
        </member>
        <member name="T:Mafi.Core.Fleet.UpgradablePercentProto">
            <summary>
            Defines percent upgrade.
            </summary>
            <remarks>Note that this is not real proto as it does not derive from Proto.</remarks>
        </member>
        <member name="F:Mafi.Core.Fleet.BattleFleetId.Value">
            <summary>
            Underlying int value of this Id.
            </summary>
        </member>
        <member name="T:Mafi.Core.GameLoop.BackgroundTaskRunner">
            <summary>
            This class takes <see cref="T:Mafi.Core.GameLoop.IBackgroundTask"/> and allows running it in a background thread. This class handles
            all the synchronization.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.BackgroundTaskRunner.IsRunning">
            <summary>
            Whether the background thread is currently working.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.BackgroundTaskRunner.WasOverTime">
            <summary>
            Whether last <see cref="M:Mafi.Core.GameLoop.BackgroundTaskRunner.WaitForFinishWork"/> call waited for the work thread.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.BackgroundTaskRunner.LastOvertimeDuration">
            <summary>
            Duration of the wait for the task.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.BackgroundTaskRunner.LastWorkDuration">
            <summary>
            Duration of the last work cycle.
            </summary>
        </member>
        <member name="M:Mafi.Core.GameLoop.BackgroundTaskRunner.PerformWork(System.Boolean)">
            <summary>
            Performs the task either in sync or in background thread.
            </summary>
        </member>
        <member name="M:Mafi.Core.GameLoop.BackgroundTaskRunner.WaitForFinishWork">
            <summary>
            Blocks current thread until background thread is finished. Does nothing if the work was performed in sync.
            Returns whether the work was overtime (calling thread had to wait for the thread);
            </summary>
        </member>
        <member name="M:Mafi.Core.GameLoop.BackgroundTaskRunner.Terminate">
            <summary>
            Terminates the worker thread and blocks until the thread is done.
            </summary>
        </member>
        <member name="M:Mafi.Core.GameLoop.BackgroundTaskRunner.threadMain">
            <summary>
            Main method of the background thread.
            </summary>
        </member>
        <member name="T:Mafi.Core.GameLoop.GameLoopEvents">
             <summary>
             Game loop events control the main loop of the game.
            
             Inner game loop is running at the fastest possible rate which is usually the refresh rate of the monitor (60 Hz,
             can be 120 Hz). Frequency can slow down if the hardware is not fast enough.
            
             All core game logic should run in the simulation thread and use <see cref="T:Mafi.Core.Simulation.ISimLoopEvents"/>. These game loop
             events should be used only for rendering front-end and user input.
            
             All events are invoked on the main (rendering) thread.
             </summary>
             <remarks>
             The game loop events are called as follows:
             <code>
             if ( game is loaded from file ) {
            		Use [InitAfterLoad] attribute
             } else {
            		NewGameCreated()
            		while( any( INeedsSimUpdatesForInit.NeedsMoreSimUpdates ) ) {
            			perform sim loop
            		}
            		NewGameInitialized()
             }
            
             RendererInitState()
            
             while ( not terminate game ) {
            		if ( simulation update is due ) {
            			SyncUpdateStart()
            			SyncUpdate()
            		}
            
            		InputUpdate()
            		InputUpdateEnd()
            
            		RenderUpdate()
             }
            
             Terminate()
             </code>
             </remarks>
        </member>
        <member name="P:Mafi.Core.GameLoop.GameLoopEvents.SimUpdateInit">
            <summary>
            All registered classes for sim update init. Note that this will return null after sip update is finished.
            </summary>
        </member>
        <member name="T:Mafi.Core.GameLoop.INeedsSimUpdatesForInit">
            <summary>
            Marks class that need som updates after new game is created to so in-game initialization. The class has to
            register itself using <see cref="M:Mafi.Core.GameLoop.GameLoopEvents.RegisterInitSimUpdate(Mafi.Core.GameLoop.INeedsSimUpdatesForInit)"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.INeedsSimUpdatesForInit.NeedsMoreSimUpdates">
            <summary>
            Whether derived class needs more sim updates in order to finish its initialization.
            </summary>
        </member>
        <member name="F:Mafi.Core.GameLoop.GameLoopState.None">
            <summary>
            No game loop method is being invoked right now.
            </summary>
        </member>
        <member name="M:Mafi.Core.GameLoop.GameRunner.TrySetMainThreadName">
            <summary>
            Sets name of the main thread for assertions.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.GameRunner.SimUpdateCount">
            <summary>
            Number of sim updates performed from the start of the game.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.GameRunner.GameDurationMs">
            <summary>
            Total game duration in milliseconds.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.GameRunner.SimUpdateDurationMs">
            <summary>
            Current length of sim update. It is sum of <see cref="F:Mafi.Core.GameTime.DEFAULT_SIM_STEP_DURATION_MS"/> and <see
            cref="P:Mafi.Core.GameLoop.GameRunner.ExtraSimUpdateMs"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.GameRunner.ExtraSimUpdateMs">
            <summary>
            Extra duration of sim step for slowing the game down when sim is too slow. Only positive values are allowed.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.GameRunner.LongTaskSteps">
            <summary>
            Number of sim steps for long-running tasks.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.GameRunner.OnUpdateStart">
            <summary>
            Invoked at the very beginning of <see cref="M:Mafi.Core.GameLoop.GameRunner.Update(Mafi.Fix32)"/>. This event is very special, do not use it if you don't
            have a really good reason to do so.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.GameRunner.OnSyncStart">
            <summary>
            Invoked at the very beginning of Sync. This event is very special, do not use it if you don't
            have a really good reason to do so.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.GameRunner.RunSimulationInBackgroundThread">
            <summary>
            Whether game simulation is run synchronously in single (main) thread or the simulation runs in its own
            background thread. Can be dynamically toggled during the game (hi-tech!, super cool for debugging!). In
            production, sim should always run in background thread of course.
            </summary>
        </member>
        <member name="M:Mafi.Core.GameLoop.GameRunner.#ctor(Mafi.Core.GameLoop.IGameRunnerConfig,Mafi.Core.Input.InputScheduler,Mafi.Core.Simulation.SimulationBackgroundTask,Mafi.Core.Simulation.SimLoopEvents,Mafi.Core.GameLoop.GameLoopEvents,Mafi.DependencyResolver)">
            <summary>
            Creates new instance of game runner and starts all background threads. Must be called on the main thread.
            </summary>
        </member>
        <member name="M:Mafi.Core.GameLoop.GameRunner.Initialize(System.Boolean)">
            <summary>
            Initializes the game. Should be called on the main thread.
            </summary>
        </member>
        <member name="M:Mafi.Core.GameLoop.GameRunner.Terminate">
            <summary>
            Terminates the game and simulation thread. Should be called on the main thread. This game runner instance is
            unusable after this call.
            </summary>
        </member>
        <member name="T:Mafi.Core.GameLoop.IBackgroundTask">
            <summary>
            This class represents a task that will be ran on a separate thread. All the threading and synchronization is
            handled by the <see cref="T:Mafi.Core.GameLoop.BackgroundTaskRunner"/>.
            WARNING: Correct implementation of this class is not trivial!
            </summary>
        </member>
        <member name="M:Mafi.Core.GameLoop.IBackgroundTask.PerformSync">
            <summary>
            Called by the <see cref="M:Mafi.Core.GameLoop.BackgroundTaskRunner.Sync"/> when the work of this task was finished and it is in
            sync with its parent thread.
            </summary>
        </member>
        <member name="M:Mafi.Core.GameLoop.IBackgroundTask.PerformWork">
            <summary>
            This method performs the main work. Note that no threads should be created here as this method is already
            invoked on its own thread!
            </summary>
        </member>
        <member name="M:Mafi.Core.GameLoop.IBackgroundTask.Terminated">
            <summary>
            Called when the parent loop is bing terminated.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.IGameLoopEvents.CurrentState">
            <summary>
            State of game loop. What method is currently being invoked. This is useful for assertions and debugging.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.IGameLoopEvents.LastState">
            <summary>
            Last state that was set.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.IGameLoopEvents.GameWasLoaded">
            <summary>
            Whether the game was wither created or loaded.
            </summary>
        </member>
        <member name="M:Mafi.Core.GameLoop.IGameLoopEvents.RegisterNewGameCreated(System.Object,System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            Registers given callback for invoking once per game lifetime at the very start of a new game. This is not
            called for loaded games.
            </summary>
        </member>
        <member name="M:Mafi.Core.GameLoop.IGameLoopEvents.RegisterNewGameInitialized(System.Object,System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            Registers given callback for invoking once per game lifetime just after initial sim updates are done. This is
            not called for loaded games.
            </summary>
        </member>
        <member name="M:Mafi.Core.GameLoop.IGameLoopEvents.RegisterRendererInitState(System.Object,System.Collections.Generic.IEnumerator{System.String})">
            <summary>
            Registers given callback for invoking right before the main game loop. This should be used by renderers to
            fetch their state. Renderers should NOT be registered to any sim events or load any data before this event.
            </summary>
        </member>
        <member name="M:Mafi.Core.GameLoop.IGameLoopEvents.RegisterInitSimUpdate(Mafi.Core.GameLoop.INeedsSimUpdatesForInit)">
            <summary>
            Registers a class that needs to perform sim update before the game starts. Registration must happen before
            any game loop events are invoked, ideally in the class' constructor.
            </summary>
        </member>
        <member name="M:Mafi.Core.GameLoop.IGameLoopEvents.InvokeInSyncNotSaved(System.Action)">
            <summary>
            Invokes the given action at the start of next sync.
            This is handy when a sim-thread event needs to continue its work in sync without constant polling.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.IGameLoopEvents.SyncUpdateStart">
            <summary>
            Called when simulation loop has finished and is in sync with the main thread. This event represents start of
            sync update critical section and should be used for preparations for <see cref="P:Mafi.Core.GameLoop.IGameLoopEvents.SyncUpdate"/>. All renderers
            should be updated on <see cref="P:Mafi.Core.GameLoop.IGameLoopEvents.SyncUpdate"/> so this method can serve for preparation.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.IGameLoopEvents.SyncUpdate">
            <summary>
            Called when simulation loop has finished and is in sync with the main thread. This event serves for signal
            (or data) exchange between simulation and visualization. This event is in critical section and should be used
            for very basic operations such as reference swaps.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.IGameLoopEvents.InputUpdate">
            <summary>
            Called every frame (~60 times per second) as a first callback in the loop that should process input from the
            player. Use game time to make continuous inputs frame rate independent.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.IGameLoopEvents.InputUpdateEnd">
            <summary>
            Called every frame just after <see cref="P:Mafi.Core.GameLoop.IGameLoopEvents.InputUpdate"/>. This may be used to process collected information
            during <see cref="P:Mafi.Core.GameLoop.IGameLoopEvents.InputUpdate"/> and prepare it for rendering.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.IGameLoopEvents.RenderUpdate">
            <summary>
            Called every frame. This should be used for updating renderers. Use game time to make continuous inputs frame
            rate independent.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameLoop.IGameLoopEvents.Terminate">
            <summary>
            Called once at the end of the game.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameTime.TimeSinceStartMs">
             <summary>
             Absolute time from the start of the game in milliseconds.
            
             NOTE: This does not count in the time spent in game pause!
             </summary>
        </member>
        <member name="P:Mafi.Core.GameTime.TimeSinceLoadMs">
             <summary>
             Absolute time from the game load. Is not saved and resets every load. This is useful for shaders.
            
             NOTE: This does not count in the time spent in game pause!
             </summary>
        </member>
        <member name="P:Mafi.Core.GameTime.SimStepsCount">
            <summary>
            Total number of sim steps.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameTime.TotalElapsedSimStepsSmooth">
            <summary>
            Total number of elapsed sim ticks from game start. This includes fractions.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameTime.DeltaSimStepsApprox">
            <summary>
            Approximate number of sim steps that passed during last frame. This is not affected by sped mult.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameTime.TimeSinceLastSimUpdateMs">
            <summary>
            Time from the last sim update in milliseconds. Can be zero if the sim update occurred right at the instant of
            the frame.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameTime.DeltaTimeMs">
            <summary>
            Duration of the last frame in milliseconds.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameTime.AbsoluteT">
             <summary>
             Absolute interpolation parameter that represents time between last two sim updates. Values are from 0 to 1.
             Intended usage:
             <code>
             // Interpolation:
             float value = MafiMath.Lerp(lastState, currentState, AbsoluteT);
            
             // On update-state:
             lastState = currentState;
             currentState = newState;
             </code>
             Advantage of this interpolation is that is does not have to store current value, it is directly computed.
             However, your implementation have to store previous simulation state, current (latest) simulation state, and
             those two can produce interpolated value (that is usually stored, too).
            
             On the other hand <see cref="P:Mafi.Core.GameTime.RelativeT"/> does not require to store previous simulation state.
             </summary>
        </member>
        <member name="P:Mafi.Core.GameTime.RelativeT">
             <summary>
             Relative interpolation parameter that represents amount of change between last state (not simulation state)
             and current simulation state. Values are from 0 to 1. Intended usage:
             <code>
             // Interpolation:
             float value = MafiMath.Lerp(value, currentState, RelativeT);
            
             // On update-state:
             currentState = newState;
             // Do not do: 'value = currentState;' before the assignment of the new state value.
             </code>
             A big advantage of this interpolation is that you have to store only the last simulation state. Together with
             current value you can compute a new value. Unlike with <see cref="P:Mafi.Core.GameTime.AbsoluteT"/> you do not have to keep two
             states in order to do the interpolation. If the state is large this can create large savings in memory and
             CPU.
            
             Please keep in mind that the logic behind this interpolation parameter is smart to automatically adjust the
             values to varying lengths of frames and sim updates. Do not set new value on copy-state!
             </summary>
        </member>
        <member name="P:Mafi.Core.GameTime.DeltaT">
            <summary>
            Changed amount from last frame. This is difference between last frames and this frames <see
            cref="P:Mafi.Core.GameTime.AbsoluteT"/>. The first frame after sync this is equal to <see cref="P:Mafi.Core.GameTime.AbsoluteT"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameTime.IsGamePaused">
            <summary>
            Whether the current simulation is paused. Means that render, input and sync updates are still being processed
            including commands but the simulation itself is paused.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameTime.GameSpeedMult">
            <summary>
            Current game speed multiplier. This should be for example used as a speed multiplier for all animations.
            It's zero during pause.
            </summary>
        </member>
        <member name="P:Mafi.Core.GameTime.CurrSimUpdateDurationMs">
            <summary>
            Current duration of a sim update.
            </summary>
        </member>
        <member name="M:Mafi.Core.Game.GameBuilder.BuildNewGameTimeSliced(Mafi.Core.Game.StartNewGameArgs,System.Boolean,System.Action{Mafi.DependencyResolver},System.Action{Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod}},System.Action{Mafi.Core.Mods.ProtoRegistrator,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod}},System.Action{Mafi.Core.Mods.ProtoRegistrator,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod}},System.Action{Mafi.DependencyResolverBuilder,Mafi.Core.Prototypes.ProtosDb,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod}},System.Action{Mafi.DependencyResolver})">
            <summary>
            Builds a game instance with given mods and configs in time-sliced manner.
            </summary>
        </member>
        <member name="M:Mafi.Core.Game.GameBuilder.BuildLoadedGameTimeSliced(Mafi.Core.Game.LoadGameArgs,System.Boolean,System.Action{Mafi.DependencyResolver},System.Action{Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod}},System.Func{Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.SaveGame.LoadedModInfo},Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.SaveGame.LoadedModInfo}},System.Action{Mafi.Core.Mods.ProtoRegistrator,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod}},System.Action{Mafi.Core.Mods.ProtoRegistrator,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod}},System.Action{Mafi.DependencyResolverBuilder,Mafi.Core.Prototypes.ProtosDb,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod}},System.Action{Mafi.DependencyResolver})">
            <summary>
            Builds a game from saved data.
            </summary>
        </member>
        <member name="M:Mafi.Core.Game.GameBuilder.InstantiateConfigs(Mafi.Collections.Set{System.Reflection.Assembly},System.Collections.Generic.IEnumerable{Mafi.Core.Game.IConfig})">
            <summary>
            Instantiates all classes implementing <see cref="T:Mafi.Core.Game.IConfig"/> from assemblies of all given mod types.
            </summary>
        </member>
        <member name="M:Mafi.Core.Game.GameBuilder.InstantiateModsOrThrow(Mafi.Collections.ImmutableCollections.ImmutableArray{System.Type},Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Game.IConfig})">
            <summary>
            Instantiates all mods from given list of types. Returned mods are in topological order - all dependencies of
            a mod come before the mod itself. Note that there are usually more topological orderings of the mods graph
            and any valid ordering can be returned.
            </summary>
            <exception cref="T:Mafi.Core.Game.GameBuilderException">Throws when any error is encountered.</exception>
            <remarks>We use dependency resolver for this to not worry about correct order of instantiation.</remarks>
        </member>
        <member name="M:Mafi.Core.Game.GameBuilder.validateNameOrThrow(Mafi.Core.Mods.IMod)">
            <summary>
            Checks if name of given mod is valid.
            </summary>
            <exception cref="T:Mafi.Core.Game.GameBuilderException">If mod name is not valid.</exception>
        </member>
        <member name="M:Mafi.Core.Game.GameBuilder.RegisterModDependenciesOrThrow(Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod},Mafi.Core.Prototypes.ProtosDb,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Game.IConfig},Mafi.Core.IFileSystemHelper,System.Boolean)">
            <summary>
            Registers dependencies and custom registrations of all given mods.
            </summary>
            <exception cref="T:Mafi.Core.Game.GameBuilderException">On error.</exception>
        </member>
        <member name="M:Mafi.Core.Game.GameBuilder.InitializeModsOrThrow(Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod},Mafi.DependencyResolver,System.Boolean)">
            <summary>
            Initializes all given mods with given resolver. Throws <see cref="T:Mafi.Core.Game.GameBuilderException"/> if any exception is
            throw during the initialization process.
            </summary>
        </member>
        <member name="M:Mafi.Core.Game.GameBuilder.RegisterModsPrototypesOrThrow(Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod},Mafi.Core.Mods.ProtoRegistrator)">
            <summary>
            Registers all prototypes of all given mods. Throws <see cref="T:Mafi.Core.Game.GameBuilderException"/> if any exception is
            throw during the registration process.
            </summary>
            <exception cref="T:Mafi.Core.Game.GameBuilderException">On error.</exception>
        </member>
        <member name="M:Mafi.Core.Game.GameBuilder.registerDependenciesOrThrow(Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod},Mafi.DependencyResolverBuilder,Mafi.Core.Prototypes.ProtosDb,System.Boolean)">
            <summary>
            Registers all global and manual dependencies of all given mods. Throws <see cref="T:Mafi.Core.Game.GameBuilderException"/> if
            any exception is throw during the registration process.
            </summary>
        </member>
        <member name="M:Mafi.Core.Game.GameBuilder.registerCustomHandlers(Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod},Mafi.Core.Mods.RegistrationContext)">
            <summary>
            Goes through all given mods in order and finds all that implement <see cref="T:Mafi.Core.Mods.IRegistrationMod`1"/> and
            calls the <see cref="M:Mafi.Core.Mods.IRegistrationMod`1.Register(Mafi.Collections.ImmutableCollections.ImmutableArray{`0},Mafi.Core.Mods.RegistrationContext)"/> method with all matching mods.
            </summary>
        </member>
        <member name="M:Mafi.Core.Game.GameBuilder.registerCustomMod(Mafi.Core.Mods.IMod,System.Type,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod},Mafi.Core.Mods.RegistrationContext)">
            <summary>
            Calls <see cref="M:Mafi.Core.Mods.IRegistrationMod`1.Register(Mafi.Collections.ImmutableCollections.ImmutableArray{`0},Mafi.Core.Mods.RegistrationContext)"/> on given mod instance with given arguments.
            </summary>
        </member>
        <member name="T:Mafi.Core.Game.GameDifficultyConfig">
            <summary>
            IMPORTANT!
            When adding new property make sure to
            - update IsSameAsMethod
            - add it to the NewGameWizard UI
            </summary>
        </member>
        <member name="P:Mafi.Core.Game.GameDifficultyConfig.ExtraStartingMaterial">
            <summary>
            E.g. 100% will give twice more material to start with.
            </summary>
        </member>
        <member name="P:Mafi.Core.Game.GameDifficultyConfig.MaintenanceDiff">
            <summary>
            E.g. -20% will reduce maintenance, +10% will increase it
            </summary>
        </member>
        <member name="P:Mafi.Core.Game.GameDifficultyConfig.FuelConsumptionDiff">
            <summary>
            E.g. -20% will reduce fuel usage for vehicles and cargo ships, +10% will increase it
            </summary>
        </member>
        <member name="P:Mafi.Core.Game.GameDifficultyConfig.RainYieldDiff">
            <summary>
            E.g. -20% will increase rain yield, +10% will reduce it
            </summary>
        </member>
        <member name="P:Mafi.Core.Game.GameDifficultyConfig.BaseHealthDiff">
            <summary>
            E.g. -20% will reduce base health, +10% will increase it
            </summary>
        </member>
        <member name="P:Mafi.Core.Game.GameDifficultyConfig.ResourceMiningDiff">
            <summary>
            E.g. -20% will mine 20% less material from same quantity, +10% will mine 10% more material
            </summary>
        </member>
        <member name="P:Mafi.Core.Game.GameDifficultyConfig.SettlementConsumptionDiff">
            <summary>
            E.g. -20% will consume less, +10% will consume more
            </summary>
        </member>
        <member name="P:Mafi.Core.Game.GameDifficultyConfig.WorldMinesReservesDiff">
            <summary>
            -20% reserve - world map mines, oil rigs, research labs consume 20% less.
            Try to keep multipliers of 20%.
            </summary>
        </member>
        <member name="P:Mafi.Core.Game.GameDifficultyConfig.FarmsYieldDiff">
            <summary>
            -20% reserve - world map mines, oil rigs, research labs consume 20% less.
            Try to keep multipliers of 20%.
            </summary>
        </member>
        <member name="P:Mafi.Core.Game.GameDifficultyConfig.UnityProductionDiff">
            <summary>
            E.g. 20% will increase unity generated in settlements, -10% will reduce it
            </summary>
        </member>
        <member name="P:Mafi.Core.Game.GameDifficultyConfig.PowerProductionDiff">
            <summary>
            E.g. 20% will increase power generated in all generators, -10% will reduce it
            </summary>
        </member>
        <member name="P:Mafi.Core.Game.GameDifficultyConfig.ConstructionCostsDiff">
            <summary>
            E.g. 20% will increase construction costs, -20% will reduce them
            </summary>
        </member>
        <member name="P:Mafi.Core.Game.GameDifficultyConfig.QuickRepair">
            <summary>
            If true, player is allowed to quick repair
            </summary>
        </member>
        <member name="T:Mafi.Core.Game.IConfig">
             <summary>
             Classes marked with this interface are global configs that will be instantiated before a game is created.
            
             Configs are instantiated via resolver and may take other configs in the constructor. However, no other
             dependencies are allowed.
            
             Configs marked with <c>[GlobalDependency]</c> attribute can be instantiated automatically if not provided.
            
             Configs with <c>Serialize</c> method (or ones marked with <c>[GenerateSerializer]</c> attribute will be saved,
             thus their values are persistent over saves. Serializable configs marked with <c>[GlobalDependency]</c> will be
             instantiated at first and then persisted throughout the save.
             </summary>
             <remarks>
             Note that configs are handled in a special way, different from other global dependencies. See
             <see cref="T:Mafi.Core.Game.GameBuilder"/> for more details.
             </remarks>
        </member>
        <member name="F:Mafi.Core.Gfx.CrossSectionVertex.Coord">
            <summary>
            Coord in X-Z plane relative to the transport curve.
            </summary>
        </member>
        <member name="F:Mafi.Core.Gfx.CrossSectionVertex.Normal">
            <summary>
            Normal of this vertex.
            </summary>
        </member>
        <member name="F:Mafi.Core.Gfx.CrossSectionVertex.TextureCoordY">
            <summary>
            Y texture coordinate. X is computed during extrusion.
            </summary>
        </member>
        <member name="M:Mafi.Core.Gfx.CrossSectionVertex.#ctor(Mafi.RelTile2f,Mafi.Vector2f,System.Single)">
            <summary>
            Creates new cross section vertex. Given normal does not need to be normalized.
            </summary>
        </member>
        <member name="M:Mafi.Core.IFileSystemHelper.GetFileName(System.String,Mafi.Core.FileType)">
            <summary>
            Returns cleaned file name with an extension based on <paramref name="fileType"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.IFileSystemHelper.GetExtension(Mafi.Core.FileType)">
            <summary>
            Returns extension of given <paramref name="fileType"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.IFileSystemHelper.GetDirName(Mafi.Core.FileType)">
            <summary>
            Returns name of directory.
            </summary>
        </member>
        <member name="M:Mafi.Core.IFileSystemHelper.GetDirPath(Mafi.Core.FileType,System.Boolean,System.String)">
            <summary>
            Returns canonical full path of given directory. Optionally ensures its existence.
            </summary>
        </member>
        <member name="M:Mafi.Core.IFileSystemHelper.GetAllFiles(Mafi.Core.FileType,System.String)">
            <summary>
            Returns all files in requested directory. Pattern is applied before extension.
            </summary>
        </member>
        <member name="F:Mafi.Core.SaveFileInfo.NameNoExtension">
            <summary>
            Filename without extensions. May be empty string.
            </summary>
        </member>
        <member name="M:Mafi.Core.FileSystemHelperExtensions.FileExists(Mafi.Core.IFileSystemHelper,System.String,Mafi.Core.FileType,System.Boolean)">
            <summary>
            Returns whether given file exists.
            </summary>
        </member>
        <member name="M:Mafi.Core.FileSystemHelperExtensions.GetTimestampedFileName(Mafi.Core.IFileSystemHelper,System.String,Mafi.Core.FileType,System.Boolean)">
            <summary>
            Returns a file name starting with current timestamp and given suffix.
            </summary>
        </member>
        <member name="M:Mafi.Core.FileSystemHelperExtensions.GetTimestampedFilePath(Mafi.Core.IFileSystemHelper,System.String,Mafi.Core.FileType,System.Boolean,System.String)">
            <summary>
            Returns clean and canonical a file path starting with current timestamp and given suffix.
            </summary>
        </member>
        <member name="M:Mafi.Core.FileSystemHelperExtensions.GetFilePath(Mafi.Core.IFileSystemHelper,System.String,Mafi.Core.FileType,System.Boolean,System.String)">
            <summary>
            Returns clean and canonical path of given file with an extension based on <paramref name="fileType"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.FileSystemHelperExtensions.GetSaveFilePath(Mafi.Core.IFileSystemHelper,System.String)">
            <summary>
            Returns full clean path for given save name.
            </summary>
        </member>
        <member name="M:Mafi.Core.FileSystemHelperExtensions.DeleteSaveFile(Mafi.Core.IFileSystemHelper,System.String)">
            <summary>
            Requests to delete the given save file. Returns true if delete succeeded.
            </summary>
        </member>
        <member name="T:Mafi.Core.Input.ICommandProcessor`1">
            <summary>
            Interface that defines generic command processor interface. All command processors should derive this interface.
            </summary>
            <typeparam name="T">Type of processed command.</typeparam>
        </member>
        <member name="P:Mafi.Core.Input.InputCommand`1.IsProcessed">
            <summary>
            Whether this command was processed.
            </summary>
        </member>
        <member name="P:Mafi.Core.Input.InputCommand`1.IsProcessedAndSynced">
            <summary>
            Whether this command was processed and sync was performed.
            </summary>
        </member>
        <member name="P:Mafi.Core.Input.InputCommand`1.ProcessedAtStep">
            <summary>
            Sim step of when this command was processed.
            </summary>
        </member>
        <member name="M:Mafi.Core.Input.InputCommand`1.Mafi#Core#Input#IInputCommandFriend#MarkProcessed(Mafi.SimStep)">
            <summary>
            Marks this input command processed. This should be called only by the <see cref="T:Mafi.Core.Input.InputScheduler"/>.
            </summary>
        </member>
        <member name="T:Mafi.Core.Input.InputScheduler">
            <summary>
            Collects input commands and invokes them in the right time. It also makes sure that input commands are correctly
            synchronized input between main and sim threads.
            </summary>
            <remarks>
            This class is a core of input processing system and cannot be replaced by a mod. The purpose of <see
            cref="T:Mafi.Core.Input.IInputScheduler"/> is to expose only some API to the users.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Input.InputScheduler.m_mainCommands">
            <summary>
            Temporary storage for commands scheduled from the main thread.
            </summary>
        </member>
        <member name="F:Mafi.Core.Input.InputScheduler.m_simCommands">
            <summary>
            Temporary storage for commands scheduled from the sim thread.
            </summary>
        </member>
        <member name="F:Mafi.Core.Input.InputScheduler.m_commandsToProcess">
            <summary>
            Commands waiting to be processed at the next processing event.
            </summary>
        </member>
        <member name="F:Mafi.Core.Input.InputScheduler.m_newlyProcessedCommands">
            <summary>
            New processed commands since last sync.
            </summary>
        </member>
        <member name="P:Mafi.Core.Input.InputScheduler.ProcessedCommandsInThisSessionAffectingSave">
            <summary>
            All processed commands. This contains info to reconstruct a replay of the game.
            </summary>
        </member>
        <member name="P:Mafi.Core.Input.InputScheduler.OnCommandScheduled">
            <summary>
            Invoked at the very beginning of <see cref="M:Mafi.Core.Input.InputScheduler.ScheduleInputCmd``1(``0)"/> (on the same thread as scheduled
            command).
            </summary>
        </member>
        <member name="M:Mafi.Core.Input.InputScheduler.AddCmdToReplay(Mafi.Core.Input.IInputCommand)">
            <summary>
            Adds a given command with set result to the replay at the current sim step. The command is marked as
            processed in the process.
            </summary>
        </member>
        <member name="M:Mafi.Core.Input.InputScheduler.CollectCommands">
            <summary>
            Collects commands from main and sim threads. This should be called in sync.
            </summary>
        </member>
        <member name="M:Mafi.Core.Input.InputScheduler.ProcessCommands">
            <summary>
            Processes all commands. This should be called on the sim thread.
            </summary>
        </member>
        <member name="M:Mafi.Core.Input.ReplayManager.StartLoggingCommandsAsCSharpTo(System.IO.StreamWriter,Mafi.DependencyResolver)">
            <summary>
            Starts logging commands as C# to given stream. This class takes the stream ownership and closes it on game
            termination.
            </summary>
        </member>
        <member name="M:Mafi.Core.Input.TilesRectSelection.EnumerateVertices">
            <summary>
            Enumerates vertices of this area rather than tile coordinates that are enumerated directly of this type.
            </summary>
        </member>
        <member name="M:Mafi.Core.Maintenance.IEntityMaintenanceProvider.SetExtraMultiplierProperty(Mafi.Core.PropertiesDb.IProperty{Mafi.Percent})">
            <summary>
            Used to set extra property that can affect the maintenance.
            </summary>
        </member>
        <member name="T:Mafi.Core.Maintenance.EntityMaintenanceProvider">
            <summary>
            Handles communication between <see cref="T:Mafi.Core.Maintenance.MaintenanceManager"/> and <see cref="T:Mafi.Core.Maintenance.IMaintainedEntity"/>.
            </summary>
        </member>
        <member name="T:Mafi.Core.Maintenance.IMaintainedEntity">
             <summary>
             Makes derived entity need maintenance to function.
            
             To correctly implement this interface:
              1) Use <see cref="T:Mafi.Core.Maintenance.IEntityMaintenanceProvidersFactory"/> to get a <see cref="T:Mafi.Core.Maintenance.IEntityMaintenanceProvider"/>
            		and assign it to <see cref="P:Mafi.Core.Maintenance.IMaintainedEntity.Maintenance"/> property.
              2) Use <see cref="P:Mafi.Core.Maintenance.IEntityMaintenanceProvider.Status"/> and <see cref="F:Mafi.Core.Maintenance.MaintenanceStatus.IsBroken"/>
                 as part of entities' <see cref="!:IEntityGeneral.IsEnabled"/> state.
             </summary>
        </member>
        <member name="P:Mafi.Core.Maintenance.IMaintenanceConfig.BufferMaxCapacity">
            <summary>
            Maintenance buffer max capacity in terms on in-game duration.
            </summary>
        </member>
        <member name="P:Mafi.Core.Maintenance.IMaintenanceConfig.ReliabilityIssuesStartAt">
            <summary>
            A threshold of maintenance buffer fill when reliability starts decreasing, to not punish for
            short-term reliability outages.
            </summary>
        </member>
        <member name="P:Mafi.Core.Maintenance.IMaintenanceConfig.MaxBreakdownChance">
            <summary>
            Maximum breakdown chance when maintenance buffer reaches zero.
            </summary>
        </member>
        <member name="P:Mafi.Core.Maintenance.IMaintenanceConfig.MaxReplenishSpeed">
            <summary>
            Speed of maintenance replenishment compared to regular drain. This is to limit abrupt maintenance
            consumption of a few machines that get are processed first during shortages. Should be larger than 100%.
            </summary>
        </member>
        <member name="P:Mafi.Core.Maintenance.IMaintenanceConfig.IdleMaintenanceMultiplier">
            <summary>
            Maintenance reduction for entities that are idle.
            </summary>
        </member>
        <member name="P:Mafi.Core.Maintenance.IMaintenanceConfig.BaseReplenishPerMonth">
            <summary>
            Maintenance replenish amount in addition to <see cref="P:Mafi.Core.Maintenance.IMaintenanceConfig.MaxReplenishSpeed"/>. This will make
            entities with smaller buffer replenish faster.
            </summary>
        </member>
        <member name="P:Mafi.Core.Maintenance.IMaintenanceConfig.BrokenDurationMin">
            <summary>
            Minimal broken duration (interpolated with <see cref="P:Mafi.Core.Maintenance.IMaintenanceConfig.BrokenDurationMax"/> based on maintenance buffer fill).
            </summary>
        </member>
        <member name="P:Mafi.Core.Maintenance.IMaintenanceConfig.BrokenDurationMax">
            <summary>
            Maximal broken duration (interpolated with <see cref="P:Mafi.Core.Maintenance.IMaintenanceConfig.BrokenDurationMin"/> based on maintenance buffer fill).
            </summary>
        </member>
        <member name="P:Mafi.Core.Maintenance.IMaintenanceConfig.DailyBreakdownChanceWhenShouldBeBroken">
             <summary>
             When entity should be broken, we test this probability whether it will actually get broken, otherwise we
             postpone the breakage event. This is to not break down all entities at once when maintenance is running out.
            
             This percentage is basically the amount of actually broken entities out of pool of all entities that
             should be broken. Values below 10% are advised.
             </summary>
        </member>
        <member name="P:Mafi.Core.Maintenance.IMaintenanceConfig.CanQuickRepair">
            <summary>
            If quick repair for Unity is enabled.
            </summary>
        </member>
        <member name="M:Mafi.Core.Maintenance.MaintenanceManager.GetNewEntityWontBreakPeriod(Mafi.Core.Entities.EntityProto)">
            <summary>
            Returns duration of a new entity when it has guaranteed 100% reliability.
            </summary>
        </member>
        <member name="M:Mafi.Core.Maintenance.MaintenanceManager.ApplyExtraMaintenanceCost(Mafi.Core.Maintenance.EntityMaintenanceProvider,Mafi.PartialQuantity)">
            <summary>
            Applies extra maintenance cost to given provider.
            </summary>
        </member>
        <member name="M:Mafi.Core.Maintenance.MaintenanceManager.ApplyExtraMaintenanceCost(Mafi.Core.Maintenance.EntityMaintenanceProvider,Mafi.Percent)">
            <summary>
            Applies multiplier to the maintenance buffer of given provider. Value is clamped to range
            [0, max maintenance].
            </summary>
        </member>
        <member name="P:Mafi.Core.Maintenance.MaintenanceManager.Buffer.MonthlyNeededMaintenanceMax">
            <summary>
            Does not take idleness into account.
            </summary>
        </member>
        <member name="F:Mafi.Core.Maintenance.MaintenanceStatus.IsBroken">
            <summary>
            Whether the entity is currently broken.
            </summary>
        </member>
        <member name="F:Mafi.Core.Maintenance.MaintenanceStatus.MaintenancePointsCurrent">
            <summary>
            Current amount of maintenance points. Note that this may be more than <see cref="F:Mafi.Core.Maintenance.MaintenanceStatus.MaintenancePointsMax"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Maintenance.MaintenanceStatus.MaintenancePointsMax">
            <summary>
            Max amount of stored maintenance points.
            </summary>
        </member>
        <member name="F:Mafi.Core.Maintenance.MaintenanceStatus.CurrentBreakdownChance">
            <summary>
            Chance to breakdown. On average, this is the amount of time this entity is broken compared to running.
            </summary>
        </member>
        <member name="F:Mafi.Core.Maintenance.MaintenanceStatus.BrokenDurationDays">
            <summary>
            When broken, this is duration in days until fixed.
            When not broken, this is accumulator for breakdown duration.
            </summary>
        </member>
        <member name="P:Mafi.Core.Maintenance.MaintenanceStatus.MissingPointsToFull">
            <summary>
            Amount of missing points to full buffer. If the buffer has more than max, this value is zero.
            </summary>
        </member>
        <member name="T:Mafi.Core.Map.ChunkHeightFromCellsProcessor">
            <summary>
            Handles computation of smooth base tile height base on cell heights.
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.ChunkHeightFromCellsProcessor.InitializeForChunk(Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Map.MapCell},Mafi.Chunk2i)">
            <summary>
            Initializes processing of given chunk.
            </summary>
            <param name="nearbyCells">All cells that may affect the chunk.</param>
            <param name="chunkCoord">Chunk coordinate to initialize.</param>
        </member>
        <member name="M:Mafi.Core.Map.ChunkHeightFromCellsProcessor.GetHeight(Mafi.TileInChunk2i)">
            <summary>
            Returns height of a tile relative to chunk that is currently initialized. Thread safe for currently
            initialized chunk.
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.ChunkHeightFromCellsProcessor.computeHeightAt(Mafi.Tile2i)">
            <summary>
            Computes exact height based on distance from nearby cells. This is computationally intensive.
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.ChunkHeightFromCellsProcessor.Clear">
            <summary>
            Clears the initialization. Should be called when done with chunk to ensure <see cref="M:Mafi.Core.Map.ChunkHeightFromCellsProcessor.GetHeight(Mafi.TileInChunk2i)"/> is not
            called without proper initialization.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.IIslandMapGenerator.Name">
            <summary>
            Name of the generator.
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.IIslandMapGenerator.GenerateIslandMapTimeSliced">
            <summary>
            Returns an enumerator for time-sliced map generation. Enumerator returns string that describes what was
            performed in that step.
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.IIslandMapGenerator.GetMapAndClear">
            <summary>
            Returns generated map and clears any temporary data used during generation.
            This method should be called only after an iterator from <see cref="M:Mafi.Core.Map.IIslandMapGenerator.GenerateIslandMapTimeSliced"/> finished.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.Cells">
            <summary>
            Map cells represented as convex irregular polygons.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.ControlPoints">
            <summary>
            All control points that were used to generate the map. Note that not all points will end up as actual cells.
            For example, points on boundary may not form an enclosed cell.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.CellControlPoints">
            <summary>
            Subset of <see cref="F:Mafi.Core.Map.IslandMap.ControlPoints"/> that did end up as cells.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.NonCellControlPoints">
            <summary>
            Subset of <see cref="F:Mafi.Core.Map.IslandMap.ControlPoints"/> that did not end up as cells.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.CellEdgePoints">
            <summary>
            Locations of perimeter points (vornoi points).
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.Bedrock">
            <summary>
            Default material that will fill the terrain if no other material is present.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.ResourcesGenerators">
            <summary>
            All resource generators on the map in the correct order.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.CellEdgeTerrainGenerators">
            <summary>
            Edge terrain generator obtained from cells.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.AllTerrainGenerators">
            <summary>
            All terrain generators, incl <see cref="F:Mafi.Core.Map.IslandMap.ResourcesGenerators"/> and <see cref="F:Mafi.Core.Map.IslandMap.CellEdgeTerrainGenerators"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.VirtualResources">
            <summary>
            All virtual resources on the map. These resources are not present as products in the tiles but are mineable
            with special API. These can be for example oil or water.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.Chunks">
            <summary>
            Coordinates of all chunks that are part of least one map cell.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.MinChunk">
            <summary>
            Coordinate of lower-left chunk coordinate of map bounding box. The whole map is contained between this and
            <see cref="F:Mafi.Core.Map.IslandMap.MaxChunk"/>. Note that this chunk coordinate may not be part of <see cref="F:Mafi.Core.Map.IslandMap.Chunks"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.MaxChunk">
            <summary>
            Coordinate of upper-right chunk coordinate of map bounding box. The whole map is contained between <see
            cref="F:Mafi.Core.Map.IslandMap.MinChunk"/> and this. Note that this chunk coordinate may not be part of <see cref="F:Mafi.Core.Map.IslandMap.Chunks"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.Size">
            <summary>
            Size of map bounding box in chunks.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.MapVerticesAvgHeights">
            <summary>
            List of average map vertices heights. A map vertex has height equal to the mean of adjacent map cell heights.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.CellsPerMapVertex">
            <summary>
            Index i has all map cells that are touching map vertex i.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.EdgesCanonical">
            <summary>
            All map edges. Every edge has <see cref="F:Mafi.Core.Map.CellEdge.C1"/> ID smaller than <see cref="F:Mafi.Core.Map.CellEdge.C2"/>.
            Additionally, all edges are sorted by the <see cref="F:Mafi.Core.Map.CellEdge.C1"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.m_chunkToCells">
            <summary>
            Cached map from chunk to cells.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMap.m_chunkNearbyCells">
            <summary>
            Cached map from chunks to cells that are "nearby". A cell is "nearby" to a chunk if it or any of its 8
            neighbors contain the cell.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.IslandMap.CellCoastLines">
            <summary>
            Lines that are on the boundary between ocean and non-ocean cells.
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.IslandMap.GetCellsNearbyChunk(Mafi.Chunk2i)">
            <summary>
            Returns cells that are nearby given cell. A cell is "nearby" to a chunk if it or any of its 8 neighbors
            contain the cell.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMapConfig.OceanFloorFlatDistance">
            <summary>
            Distance from coast (cell edges that are between ocean and land) on which ocean floor is flat.
            After this distance, a slope down of <see cref="F:Mafi.Core.Map.IslandMapConfig.OceanFloorHeightPerDistanceFromCoast"/> is applied.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMapConfig.OceanFloorBaseHeight">
            <summary>
            Base ocean floor height before it starts sloping down. This number should be negative and less or
            equal to <see cref="F:Mafi.Core.Map.IslandMapConfig.MAX_OCEAN_FLOOR_HEIGHT"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.IslandMapConfig.OceanFloorHeightPerDistanceFromCoast">
            <summary>
            Ocean floor height per distance from coast. This should be negative number so that oceans are deeper
            the further away from coast they are.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.IslandMapDifficultyConfig.MineableResourceSizeBonus">
            <summary>
            Resource size bonus that applies to all mineable resources (can be negative).
            Values in range[-50%, +100%].
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.IslandMapDifficultyConfig.MineableResourceDepthBias">
            <summary>
            Depth bias for mineable resources. Positive values will make resources higher above ground (easier to mine)
            while negative values will make them deeper underground (harder to mine). Recommended values range [-4, +4].
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.IslandMapDifficultyConfig.ForestsSizeBonus">
            <summary>
            Forest size bonus (can be negative). Values in range [-50%, +100%] are recommended.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.IslandMapDifficultyConfig.CellHeightsBias">
            <summary>
            Map cell heights will be adjusted by this value (can be negative). Value of -10% will lower all cells
            by 10% of their height. Values in range [-30%, +50%] are recommended.
            </summary>
        </member>
        <member name="T:Mafi.Core.Map.MapCell">
            <summary>
            A polygon that specifies an area on the map that is specified by center tile and perimeter tiles (vertices). Each
            cell should be convex. Cells form a graph through <see cref="P:Mafi.Core.Map.MapCell.Neighbors"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.MapCell.Id">
            <summary>
            Cell ID is also an index to a consecutive array of all cells.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.MapCell.CenterPointIndex">
            <summary>
            Index into <see cref="F:Mafi.Core.Map.IslandMap.ControlPoints"/> of tile in the center of this cell.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.MapCell.CenterTile">
            <summary>
            Tile in the center of this cell.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.MapCell.PerimeterIndices">
            <summary>
            Indices of the perimeter points. These indices are pointing to <see cref="F:Mafi.Core.Map.IslandMap.CellEdgePoints"/>.
            Indices at [i, i+ 1] are shared with neighbor cell at index i.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.MapCell.NeighborCellsIndices">
            <summary>
            Neighboring cell IDs in counterclockwise order around the center tile.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.MapCell.NeighborCellsValidIndices">
            <summary>
            Only valid neighboring cell indices. Note that the order does not correlate with <see
            cref="F:Mafi.Core.Map.MapCell.PerimeterIndices"/> anymore.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.MapCell.IsOnMapBoundary">
            <summary>
            Whether this cell is on map boundary (some neighbors are `None`).
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.MapCell.IsOcean">
            <summary>
            Whether this cell is ocean.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.MapCell.IsNextToOcean">
            <summary>
            Whether at least one neighbor is ocean cell. Note: This value is not valid until the cell generation is
            finalized.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.MapCell.Chunks">
            <summary>
            Coordinates of all terrain chunks that have at least one tile in this cell.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.MapCell.OuterRadius">
            <summary>
            A radius of a circle with center in the cell center that fits the whole cell.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.MapCell.InnerRadius">
            <summary>
            A radius of a circle with center in the cell center that fits inside of the cell without sticking out.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.MapCell.GroundHeight">
            <summary>
            Base ground height of this cell.
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.MapCell.computeChunksFromPerimeter">
            <summary>
            Helper function that computes all the chunks of this cell.
            </summary>
            <remarks>This is intentionally a static function because it is called from constructor.</remarks>
        </member>
        <member name="M:Mafi.Core.Map.MapCell.EnumeratePerimeterTiles">
            <summary>
            Enumerates all tiles around the perimeter of this cell in counter-clock wise order. Returned tiles are
            computed on the fly with enumerator semantics. It is possible that some tiles repeat if the edges are
            "pointy".Memory complexity is O(1).
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.MapCell.GetEdgeToNeighbor(System.Int32)">
            <summary>
            Returns edge to given neighbor index. This cell is to the left of returned line.
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.MapCell.GetEdgeToNeighbor(Mafi.Core.Map.MapCell)">
            <summary>
            Returns edge line to given neighbor cell. This cell is to the left of returned line, the <paramref
            name="neighborCell"/> is to the right.
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.MapCell.GetNeighborEdgeLength(Mafi.Core.Map.MapCell)">
            <summary>
            Returns edge length between this cell and given neighbor. Given cell must be in <see cref="P:Mafi.Core.Map.MapCell.Neighbors"/>.
            Returned value is always positive.
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.MapCell.Contains(Mafi.Tile2i)">
            <summary>
            Whether given point is inside of this cell. Note that this computation is mathematically exact, thus, each
            tile can be contained only in one cell, except, when it is exactly on the boundary between two cells. This
            does not match how <see cref="M:Mafi.Core.Map.MapCell.EnumeratePerimeterTiles"/> works.
            </summary>
            <remarks>This test assumes that perimeter is in counter-clock order.</remarks>
        </member>
        <member name="M:Mafi.Core.Map.MapCell.SignedBoundaryDistanceTo(Mafi.Tile2i)">
            <summary>
            Computes signed distance to the boundary. This distance is positive for points outside of this cell and
            negative for points inside of this cell.
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.MapCell.SignedBoundaryDistanceSqrTo(Mafi.Tile2i)">
            <summary>
            Computes signed squared distance to the boundary. This distance is positive for points outside of this cell
            and negative for points inside of this cell. This is more efficient than <see
            cref="M:Mafi.Core.Map.MapCell.SignedBoundaryDistanceTo(Mafi.Tile2i)"/> as it avoids square root computation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.MapCell.BoundaryDistanceSqrTo(Mafi.Tile2i)">
            <summary>
            Computes squared distance to the boundary. This distance is always positive.
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.MapCell.SignedBoundaryDistanceTo(Mafi.Chunk2i)">
            <summary>
            Returns approximate distance to given chunk. Returned value may be negative if the chunk is in the cell.
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.MapCell.EnumerateTiles">
            <summary>
            Enumerates all tiles in this cell. Tiles computed on the fly so caller can enumerate them in time-sliced
            manner.
            </summary>
            <remarks>
            While this returns tiles in time-sliced manner the resulting algorithm has to cache all the tiles along the
            way so memory complexity is O(number of returned tiles).
            </remarks>
        </member>
        <member name="F:Mafi.Core.Map.MapCellState.NotAvailable">
            <summary>
            Cell is not available to unlock. This may be when the cell has no neighbors that are unlocked.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.MapCellState.PendingAvailableToUnlock">
            <summary>
            Terrain under cell is being generated and it will be available to unlock one it finishes.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.MapCellState.AvailableToUnlock">
            <summary>
            Cell can be unlocked by the player.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.MapCellState.PendingUnlocked">
            <summary>
            Cell is being unlocked. This involves setting all tiles to unlocked state.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.MapCellState.Unlocked">
            <summary>
            Cell is unlocked. The player can build/mine on it.
            </summary>
        </member>
        <member name="T:Mafi.Core.Map.IMapCellFriend">
            <summary>
            Internal functions that are called during game play.
            </summary>
        </member>
        <member name="T:Mafi.Core.Map.IMapCellGeneratorFriend">
            <summary>
            Internal functions that can be called only during map generation.
            </summary>
        </member>
        <member name="T:Mafi.Core.Map.MapCellsGenerator">
            <summary>
            Helper class that generates map cells from given points using Vornoi segmentation algorithm. Keep in mind that
            points that will not form fully enclosed Vornoi cells will not end up being map cells.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.MapCellSurfaceGeneratorProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.MapCellSurfaceGeneratorProto.ID.op_Implicit(Mafi.Core.Map.MapCellSurfaceGeneratorProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="T:Mafi.Core.Map.MapManager">
            <summary>
            Manages an island map (collection of <see cref="T:Mafi.Core.Map.MapCell"/>). Allows unlocking cells and schedules terrain
            creation under unlocked or available-to-unlock cells.
            </summary>
        </member>
        <member name="M:Mafi.Core.Map.MapManager.GetCellForTile(Mafi.Tile2i)">
            <summary>
            Returns cell that contains given tile coordinate. Note that for tiles that are exactly on the boundary this
            returns arbitrary but deterministic cell.
            </summary>
        </member>
        <member name="T:Mafi.Core.Map.ProceduralIslandMapGenerator">
            <summary>
            Generates map cells in a circular shape with starting cell at center left. Cells are getting larger as they are
            further from starting cell.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.ProceduralIslandMapGeneratorConfig.MAX_CELLS">
            <summary>
            Maximum number of cells generated. This is more of a safety guard to not generate way too many cells if some
            other parameters are ill-defined.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.ProceduralIslandMapGeneratorConfig.MinCellDiameter">
            <summary>
            Approximate minimal cell diameter.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.ProceduralIslandMapGeneratorConfig.StartingTerrainResourcesAmountMult">
            <summary>
            Amount multiplier for starting resources. If not positive, no starting resources will be generated.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.ProceduralIslandMapGeneratorConfig.ResourcesRichnessMultDistance">
            <summary>
            At what distance form starting cell is resource richness multiplied by <see
            cref="P:Mafi.Core.Map.ProceduralIslandMapGeneratorConfig.ResourcesRichnessMultExpBase"/>. Then it continues exponentially, at n-times this distance resources
            multiplier will be <c>base^n</c>. Minimum value is 100.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.ProceduralIslandMapGeneratorConfig.ResourcesRichnessMultExpBase">
            <summary>
            Base of exponential resource growth. Value 2.0 means that each <see cref="P:Mafi.Core.Map.ProceduralIslandMapGeneratorConfig.ResourcesRichnessMultDistance"/>
            will resources multiplier be doubled.
            </summary>
        </member>
        <member name="T:Mafi.Core.Map.SquareMapGenerator">
            <summary>
            Very simple map generator that generates a grid of cells based on config. This is mainly for tests.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.SquareMapGeneratorConfig.ChunksCountPerMapEdge">
            <summary>
            Chunks count per map edge. Total number of chunks will be this number squared.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.SquareMapGeneratorConfig.OceanAtDirection">
            <summary>
            Whether ocean map cells should be generated in the given direction.
            </summary>
        </member>
        <member name="P:Mafi.Core.Map.SquareMapGeneratorConfig.CellsGroundHeight">
            <summary>
            Height of all ground cells.
            </summary>
        </member>
        <member name="T:Mafi.Core.Map.DevOnlyMapAttribute">
            <summary>
            Marks map to be dev only. This is mainly flag for map generator to make this map dev-only.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.StaticIslandMapPreviewData.ResourcesStats">
            <summary>
            Statistics of available resources on the map.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.StaticIslandMapPreviewData.TilesAtOrAboveElevationDataSorted">
            <summary>
            Each entry contains number of tiles at or above certain elevation. Note that some heights might be missing
            if there are no tiles at that particular elevation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.StaticIslandMapPreviewData.NonOceanTilesCount">
            <summary>
            Number of tiles that are not ocean.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.StaticIslandMapPreviewData.FlatNonOceanTilesCount">
            <summary>
            Number of tiles that are flat.
            </summary>
        </member>
        <member name="T:Mafi.Core.Map.TestMapGenerator">
            <summary>
            Highly customizable and configurable map generator that is mostly for tests.
            </summary>
            <remarks>
            Generated map has following layout:
            <code>
                           Y
                           |
                 +---------+-----------+---------------------------+-----------------------------+
                 |  ~      |           #                           |                             |
                 |         |           #                           |                             |
                 |         |           #                           |                             |
                 |       ~ |           #                           |                             |
                 | ~       |           c                           |                             |
                 |  Extra  |   Extra   l                           |                             |
                 |  cell   |   cell    i         Cell cell         |           Cell cell         |
                 | 2x4 ch  |   2x4 ch  f        4x4 chunks         |          4x4 chunks         |
                 |         |   [low]   f          [high]           |            [high]           |
                 |    ~    |           #                           |                             |
                 |         |           #                           |                             |
                 |         |           #                           |                             |
                 |  ~      |           #                           |                             |
                 |       ~ |           #                           |                             |
                 | ~       |           #                           |                             |
                 +---------+-----------+###cliff########cliff######+#####cliff########cliff######+
                 |      ~  |           |                           |                             |
                 |   ~     |           |                           |                             |
                 |         |           |                           |                             |
                 | ~    ~  |           |                           |                             |
                 |         |           |                           |                             |
                 |         |           |                           |                             |
                 | Cell #0 |  Cell #1  |          Cell #2          |            Cell #n          |
            X -- | 2x4 ch  0   2x4 ch  |         4x4 chunks        |          4x4 chunks         | -- X
                 |         |           |                           |                             |
                 |    ~    |    . t .  | . r .   . r .   . r .     |                             |
                 |         |    . r .  | . e .   . e .   . e .     |                             |
                 |  ~    ~ |    . e .  | . s .   . s .   . s .  ...|                             |
                 |     ~   |    . e .  | . # .   . # .   . # .  etc|                             |
                 |  ~      |    . s .  | . 1 .   . 2 .   . 3 .     |                             |
                 |         |     trees |   trees   trees   trees   |    trees   trees   trees    |
                 +---------+-----------+---------------------------+-----------------------------+
                           |
                           Y
            </code>
            </remarks>
        </member>
        <member name="M:Mafi.Core.Map.TestMapGenerator.GetCliffOrigin">
            <summary>
            Returns low XY tile where cliff area starts.
            </summary>
        </member>
        <member name="F:Mafi.Core.Map.MapCellId.Value">
            <summary>
            Underlying int value of this Id.
            </summary>
        </member>
        <member name="E:Mafi.Core.MessageNotifications.IMessageNotificationsManager.OnNotificationAdded">
            <summary>
            Raised when message notification should be added to the UI.
            </summary>
        </member>
        <member name="E:Mafi.Core.MessageNotifications.IMessageNotificationsManager.OnNotificationRemoved">
            <summary>
            Raised when message notification should be removed from the UI.
            </summary>
        </member>
        <member name="E:Mafi.Core.MessageNotifications.MessageNotificationsManager.OnNotificationAdded">
            <summary>
            Raised when message notification should be added to the UI.
            </summary>
        </member>
        <member name="E:Mafi.Core.MessageNotifications.MessageNotificationsManager.OnNotificationRemoved">
            <summary>
            Raised when message notification should be removed from the UI.
            </summary>
        </member>
        <member name="F:Mafi.Core.Messages.MessageProto.ForceOpen">
            <summary>
            Whether this message should force open on the screen once delivered. This is used
            for the welcome message.
            </summary>
        </member>
        <member name="F:Mafi.Core.Messages.MessageProto.Author">
            <summary>
            Who sent this message. Used in conversations.
            </summary>
        </member>
        <member name="F:Mafi.Core.Messages.MessageProto.AlwaysNotify">
            <summary>
            This message should always be notified to the player no matter if they saw it in a previous game sessions.
            </summary>
        </member>
        <member name="E:Mafi.Core.Messages.MessagesManager.OnNewMessage">
            <summary>
            Raised when message notification should be added to the UI.
            </summary>
        </member>
        <member name="T:Mafi.Core.Mods.IMod">
             <summary>
             A class marked by this interface is a game mod - a set of functionalities and data for the game.
            
             Every mod can have dependencies which are listed as arguments of its constructor. All dependent mods are
             instantiated before the child mod. Cyclic dependencies are not supported. Optional dependencies are supported
             through <see cref="T:Mafi.Option"/> class. All the registration and initialization methods are called in the topological
             order, that is, a method of a mod is called only after all of its dependencies were called so the mod can be sure
             that all of its dependencies are initialized first.
            
             When mod is registered and instantiated the <see cref="M:Mafi.Core.Mods.IMod.RegisterPrototypes(Mafi.Core.Mods.ProtoRegistrator)"/> method is called. In this method the
             mod should use the provided <see cref="T:Mafi.Core.Mods.ProtoRegistrator"/> class to register prototypes. It is also allowed to
             remove existing prototypes or replace them with different ones.
            
             Then, mod's assembly is scanned for all types that are marked with the <see cref="T:Mafi.GlobalDependencyAttribute"/>.
             These types are automatically registered to the dependency resolver builder. Additional types or instances can be
             registered with <see cref="M:Mafi.Core.Mods.IMod.RegisterDependencies(Mafi.DependencyResolverBuilder,Mafi.Core.Prototypes.ProtosDb,System.Boolean)"/> method using the provided <see
             cref="T:Mafi.DependencyResolverBuilder"/>. Note that automatic registration of global dependencies happens only one per
             assembly in case there are more than one mod per assembly.
            
             All implemented methods should be implemented explicitly to avoid accidental call from dependent classes. All
             mods implementations should be sealed classes.
             </summary>
        </member>
        <member name="P:Mafi.Core.Mods.IMod.Name">
            <summary>
            Human-readable name of the mod. This value will be showed in-game.
            </summary>
        </member>
        <member name="P:Mafi.Core.Mods.IMod.Version">
            <summary>
            Version of the mod.
            </summary>
        </member>
        <member name="P:Mafi.Core.Mods.IMod.IsUiOnly">
            <summary>
            Whether this mod is UI only and does not affect game state. All non-UI mods should not depend or use Unity
            and UI-only mods should not contribute to game state changes.
            </summary>
            <remarks>UI mods are not instantiated in headless games such as determinism verification.</remarks>
        </member>
        <member name="M:Mafi.Core.Mods.IMod.ChangeConfigs(Mafi.Collections.Lyst{Mafi.Core.Game.IConfig})">
            <summary>
            Allows mods to add, remove, or change configs. This is called before prototypes are registered.
            </summary>
        </member>
        <member name="M:Mafi.Core.Mods.IMod.RegisterPrototypes(Mafi.Core.Mods.ProtoRegistrator)">
            <summary>
            Register all prototypes of this mod.
            </summary>
        </member>
        <member name="M:Mafi.Core.Mods.IMod.RegisterDependencies(Mafi.DependencyResolverBuilder,Mafi.Core.Prototypes.ProtosDb,System.Boolean)">
             <summary>
             Registers all dependencies such as components or custom implementations of any dependencies that should
             override default behaviors.
            
             All prototypes of all mods are registered and prototypes database is locked before this method is called.
             </summary>
        </member>
        <member name="M:Mafi.Core.Mods.IMod.Initialize(Mafi.DependencyResolver,System.Boolean)">
            <summary>
            Called exactly once before the game starts and after all the mods are registered and dependency builder is
            created.
            </summary>
            <remarks>
            This is the only place where mods can do some pre-processing, initialization, and checking after the whole
            game is loaded and ready to start. We use this for loading of UI that cannot be done in any other step since
            not all protos are loaded.
            </remarks>
        </member>
        <member name="T:Mafi.Core.Mods.DataOnlyMod">
            <summary>
            Mod that can only register game data using proto registrator. No mutation of dependencies or save/load state
            is possible.
            </summary>
        </member>
        <member name="T:Mafi.Core.Mods.IRegistrationMod`1">
             <summary>
             This interface marks a mod as registration service for another group of mods. This can effectively extend mod
             registrations system for new capabilities.
            
             This mechanism is used by the game itself to extend Unity UI without Core knowing about any UI.
            
             To use this interface, a mod has to define new interface that extends <see cref="T:Mafi.Core.Mods.IMod"/>, for example
             <c>IMySuperMod</c> and then define new methods on this interface. All mods implementing the new
             <c>IMySuperMod</c> have to implement all new methods too.
            
             Now, an existing mod can derive <see cref="T:Mafi.Core.Mods.IRegistrationMod`1"/> with <c>TMod</c> set to the
             <c>IMySuperMod</c>. This mod has now authority to register all instances of <c>IMySuperMod</c> with <see
             cref="M:Mafi.Core.Mods.IRegistrationMod`1.Register(Mafi.Collections.ImmutableCollections.ImmutableArray{`0},Mafi.Core.Mods.RegistrationContext)"/> function.
             </summary>
        </member>
        <member name="M:Mafi.Core.Mods.IRegistrationMod`1.Register(Mafi.Collections.ImmutableCollections.ImmutableArray{`0},Mafi.Core.Mods.RegistrationContext)">
            <summary>
            Given an array of all mods of requested type, any kind of registration can be performed. This always happens
            after all prototypes and dependencies are registered.
            </summary>
        </member>
        <member name="T:Mafi.Core.Mods.ProtoRegistrator">
            <summary>
            Helper designed for mods to register their prototypes.Prototypes registration should be organized into data
            classes implementing the interface <see cref="T:Mafi.Core.Mods.IModData"/>. Each data class should be provided with this
            class from which it can get all necessary dependencies.
            </summary>
        </member>
        <member name="P:Mafi.Core.Mods.ProtoRegistrator.RegisteredDataClasses">
            <summary>
            List of types of modules that were registered with <see cref="M:Mafi.Core.Mods.ProtoRegistrator.RegisterData``1(System.Action{``0})"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Mods.ProtoRegistrator.RegisterData``1(System.Action{``0})">
            <summary>
            Creates instance of given type <typeparamref name="TData"/> and calls <see
            cref="M:Mafi.Core.Mods.IModData.RegisterData(Mafi.Core.Mods.ProtoRegistrator)"/> on it. Use this when registering your prototypes organized into data classes.
            </summary>
            <exception cref="T:Mafi.Core.Mods.DataRegistrationException">When module registration throws.</exception>
        </member>
        <member name="M:Mafi.Core.Mods.ProtoRegistrator.RegisterData(Mafi.Core.Mods.IModData)">
            <summary>
            Calls <see cref="M:Mafi.Core.Mods.IModData.RegisterData(Mafi.Core.Mods.ProtoRegistrator)"/> on the given instance. Use this when registering your
            prototypes organized into data classes.
            </summary>
            <exception cref="T:Mafi.Core.Mods.DataRegistrationException">When module registration throws.</exception>
        </member>
        <member name="M:Mafi.Core.Mods.ProtoRegistrator.RegisterAllProducts(System.Reflection.Assembly)">
            <summary>
            Automatically registers all products from calling assembly.
            </summary>
        </member>
        <member name="T:Mafi.Core.Notifications.GenericNotificator`1">
            <summary>
            Convenience wrapper for handling a given notification of type <see cref="F:Mafi.Core.Notifications.NotificationType.Continuous"/>. Main
            purpose is to reduce boilerplate code in classes using notifications while providing caching.
            </summary>
        </member>
        <member name="P:Mafi.Core.Notifications.GenericNotificator`1.Notification">
            <summary>
            Notification of this notificator, if it is active.
            </summary>
        </member>
        <member name="M:Mafi.Core.Notifications.GenericNotificator`1.NotifyIff(`0,System.Boolean)">
            <summary>
            If true given it will send a notification (if it wasn't already send). If false given it will remove
            notification if the notification was send previously and wasn't removed yet.
            </summary>
        </member>
        <member name="E:Mafi.Core.Notifications.INotificationsManager.NotificationAdded">
            <summary>
            Raised when notification should be added to the UI.
            </summary>
        </member>
        <member name="E:Mafi.Core.Notifications.INotificationsManager.NotificationRemoved">
            <summary>
            Raised when notification should be removed entirely.
            </summary>
        </member>
        <member name="M:Mafi.Core.Notifications.INotificationsManager.FetchAllNotifications">
            <summary>
            Expensive and used only to fetch notifs from UI after game load.
            </summary>
        </member>
        <member name="M:Mafi.Core.Notifications.INotificationsManager.CreateNotificatorFor(Mafi.Core.Notifications.GeneralNotificationProto.ID)">
            <summary>
            Creates a <see cref="T:Mafi.Core.Notifications.INotificator"/> to be used for reporting <see cref="F:Mafi.Core.Notifications.NotificationType.Continuous"/> types
            of notifications.
            </summary>
        </member>
        <member name="M:Mafi.Core.Notifications.INotificationsManager.CreateNotificatorFor(Mafi.Core.Notifications.EntityNotificationProto.ID,Mafi.Core.Entities.IEntity)">
            <summary>
            Creates a <see cref="T:Mafi.Core.Notifications.INotificator"/> to be used for reporting <see cref="F:Mafi.Core.Notifications.NotificationType.Continuous"/> types
            of notifications.
            </summary>
        </member>
        <member name="T:Mafi.Core.Notifications.INotificator`1">
            <remarks>
            The <typeparamref name="TParam"/>'s default equality comparison is used to determine redundant notifications,
            make sure the supplied type equality is implemented as desired.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Notifications.NotificationKey.ExtraKey">
            <summary>
            To distinguish parametrized notifications, this is typically the english message itself.
            </summary>
        </member>
        <member name="F:Mafi.Core.Notifications.EntityNotificationProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Notifications.EntityNotificationProto.ID.op_Implicit(Mafi.Core.Notifications.EntityNotificationProto.ID)~Mafi.Core.Notifications.NotificationProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Notifications.NotificationProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Notifications.EntityNotificationProto.ID.op_Implicit(Mafi.Core.Notifications.EntityNotificationProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Notifications.GeneralNotificationProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Notifications.GeneralNotificationProto.ID.op_Implicit(Mafi.Core.Notifications.GeneralNotificationProto.ID)~Mafi.Core.Notifications.NotificationProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Notifications.NotificationProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Notifications.GeneralNotificationProto.ID.op_Implicit(Mafi.Core.Notifications.GeneralNotificationProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Notifications.NotificationProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Notifications.NotificationProto.ID.op_Implicit(Mafi.Core.Notifications.NotificationProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Notifications.NotificationProto.Style">
            <summary>
            Determines only its look in the UI.
            </summary>
        </member>
        <member name="F:Mafi.Core.Notifications.NotificationProto.Type">
            <summary>
            Determines the way how the notification is reported and removed. Read more at <see cref="T:Mafi.Core.Notifications.NotificationType"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Notifications.NotificationProto.IconAssetPath">
            <summary>
            Icon asset path to be used next to the alert in the UI. Leave None to use a generic one.
            </summary>
        </member>
        <member name="F:Mafi.Core.Notifications.NotificationProto.EntityIconSpec">
            <summary>
            Optional icon that will be shown above the entity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Notifications.NotificationProto.TimeToLive">
            <summary>
            Duration until which the notification will be removed if not done by the player (0 is undefined). This is
            mandatory if you use <see cref="F:Mafi.Core.Notifications.NotificationType.OneTimeOnly"/>. For instance we don't want to have
            notification like "New research unlocked" hanging there for 15 minutes. Don't use this for critical alerts.
            They should be removed immediately once the thing is fixed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Notifications.NotificationType.Continuous">
            <summary>
            Notification that is reported frequently and is also removed by the entity that reported it. It is usually
            about some state that holds for some amount of time like: "Not enough electricity". If the player dismisses
            such notification it is only internally suppressed (not removed) so it can be reported every update and still
            won't bother the player.
            </summary>
        </member>
        <member name="F:Mafi.Core.Notifications.NotificationType.OneTimeOnly">
            <summary>
            Notification that is reported only once. And it is not expected from the entity that reported it to remove
            it. E.g. "Achievement unlocked". Notification is removed on dismiss so reporting this every update would spam
            the user heavily.
            </summary>
        </member>
        <member name="F:Mafi.Core.Notifications.EntityNotificationProto`1.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mafi.Core.Notifications.EntityNotificationProto`1.ID.op_Implicit(Mafi.Core.Notifications.EntityNotificationProto{`0}.ID)~Mafi.Core.Notifications.NotificationProto{`0}.ID" -->
        <member name="M:Mafi.Core.Notifications.EntityNotificationProto`1.ID.op_Implicit(Mafi.Core.Notifications.EntityNotificationProto{`0}.ID)~Mafi.Core.Notifications.NotificationProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Notifications.NotificationProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Notifications.EntityNotificationProto`1.ID.op_Implicit(Mafi.Core.Notifications.EntityNotificationProto{`0}.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Notifications.GeneralNotificationProto`1.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mafi.Core.Notifications.GeneralNotificationProto`1.ID.op_Implicit(Mafi.Core.Notifications.GeneralNotificationProto{`0}.ID)~Mafi.Core.Notifications.NotificationProto{`0}.ID" -->
        <member name="M:Mafi.Core.Notifications.GeneralNotificationProto`1.ID.op_Implicit(Mafi.Core.Notifications.GeneralNotificationProto{`0}.ID)~Mafi.Core.Notifications.NotificationProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Notifications.NotificationProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Notifications.GeneralNotificationProto`1.ID.op_Implicit(Mafi.Core.Notifications.GeneralNotificationProto{`0}.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="T:Mafi.Core.Notifications.NotificationProto`1">
            <remarks>
            We require that <typeparamref name="TParam"/> implements IEquatable to ensure proper elimination of redundant
            notifications.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Notifications.NotificationProto`1.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Notifications.NotificationProto`1.ID.op_Implicit(Mafi.Core.Notifications.NotificationProto{`0}.ID)~Mafi.Core.Notifications.NotificationProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Notifications.NotificationProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Notifications.NotificationProto`1.ID.op_Implicit(Mafi.Core.Notifications.NotificationProto{`0}.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="E:Mafi.Core.Notifications.NotificationsManager.NotificationAdded">
            <summary>
            Raised when notification should be added to the UI.
            </summary>
        </member>
        <member name="E:Mafi.Core.Notifications.NotificationsManager.NotificationRemoved">
            <summary>
            Raised when notification should be removed from the UI.
            </summary>
        </member>
        <member name="P:Mafi.Core.Notifications.NotificationsManager.Notification.IsSuppressed">
            <summary>
            Whether the notification was dismissed by the user and shouldn't be displayed again for a while.
            </summary>
        </member>
        <member name="T:Mafi.Core.Notifications.Notificator">
            <summary>
            Convenience wrapper for handling a given notification of type <see cref="F:Mafi.Core.Notifications.NotificationType.Continuous"/>. Main
            purpose is to reduce boilerplate code in classes using notifications while providing caching.
            </summary>
        </member>
        <member name="P:Mafi.Core.Notifications.Notificator.Notification">
            <summary>
            Notification of this notificator, if it is active.
            </summary>
        </member>
        <member name="M:Mafi.Core.Notifications.Notificator.NotifyIff(System.Boolean)">
            <summary>
            If true given it will send a notification (if it wasn't already send). If false given it will remove
            notification if the notification was send previously and wasn't removed yet.
            </summary>
        </member>
        <member name="T:Mafi.Core.Numerics.ExtraChecks">
            <summary>
            Extra custom checks that are not generated. Consider adding these to the generator.
            </summary>
        </member>
        <member name="M:Mafi.Core.ThicknessIRange.Intersect(Mafi.Core.ThicknessIRange)">
            <summary>
            Intersects this and the given range by computing max from From, and min from To. If ranges
            are not overlapping this will return a range with negative height.
            </summary>
        </member>
        <member name="T:Mafi.Core.PathFinding.ClearancePathabilityProvider">
             <summary>
             Data structure that provides efficient querying of navigability based on terrain slope, height clearance, and tile
             pathability.
            
             Additionally this same data structure keeps track pf path-finding nodes. This is makes everything easier, even
             though the class is more complex.
             </summary>
             <remarks>
             This class only stores data that has been queried (lazy evaluation). This may cause queries into new or stale
             chunks significantly slower.
            
             This class can do a pathability query for area of NxN tiles in just N logical AND operations and one if. It is
             implemented using overlapping data chunks that store pathability data encoded in ulong.
            
             Currently, chunks are 8x8 tiles with extra 4 tiles of overlap which makes them 12x12. Each tile stores 5 bits of
             data which results in 60 bits per row that is conveniently stored in an ulong.
            
             The overlap allows queries for size up to (overlap + 1), in our case 5x5.
            
             Note that this class will work with dynamic terrain (adding chunks during the game) only when there are no PF
             nodes on the newly created chunks. This can be achieved by having non-pathable areas around map edges.
             </remarks>
        </member>
        <member name="P:Mafi.Core.PathFinding.ClearancePathabilityProvider.RecomputedChunksCount">
            <summary>
            This gets incremented every time a <see cref="T:Mafi.Core.PathFinding.ClearancePathabilityProvider.DataChunk"/> or <see cref="T:Mafi.Core.PathFinding.ClearancePathabilityProvider.CapabilityChunkData"/> gets
            recomputed. Since re-computation is relatively expensive, this can be used by caller to ensure PF is not
            taking too long when many chunks are being recomputed.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.GetChunkAt(Mafi.Tile2i)">
            <summary>
            Returns an existing chunk at given coordinate. This chunk might not have all neighbors and might be dirty.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.GetOrCreateChunkAt(Mafi.Tile2i,System.Boolean)">
            <summary>
            Returns existing chunk or creates a new chunk at given coordinate. This chunk might not have all neighbors
            and might be dirty.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.GetOrCreatePfNodeAt(Mafi.Tile2i,System.Int32)">
            <summary>
            Returns or creates a valid PF node at given coord. If a node is returned, it is guaranteed to be not dirty
            if no nodes are visited and have all neighbors that are also not dirty if no nodes are visited there.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.GetPathabilityQueryMask(Mafi.RelTile1i,Mafi.Core.PathFinding.SteepnessPathability,Mafi.Core.PathFinding.HeightClearancePathability)">
            <summary>
            Returns mask that can be used to efficiently query pathability using <see cref="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.IsPathableRaw(Mafi.Tile2i,System.UInt64)"/>.
            </summary>
            <param name="clearanceSize">Width and height of required clearance area.</param>
            <param name="heightClearance">Required height clearance for entire area.</param>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.GetPathabilityMaskRaw(Mafi.RelTile1i,Mafi.Core.PathFinding.SteepnessPathability,Mafi.Core.PathFinding.HeightClearancePathability)">
            <summary>
            Returns raw mask without clearance encoded.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.GetPathabilityClassIndex(System.UInt64)">
            <summary>
            Returns an index for given pathability capability.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.IsPathableRaw(Mafi.Tile2i,System.UInt64)">
            <summary>
            Tests whether an area specified by <paramref name="pathabilityMask"/> is pathable. Mask can be obtained via <see
            cref="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.GetPathabilityQueryMask(Mafi.RelTile1i,Mafi.Core.PathFinding.SteepnessPathability,Mafi.Core.PathFinding.HeightClearancePathability)"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.ExtractClearanceFromMask(System.UInt64@)">
            <summary>
            Extracts clearance information from given pathability mask.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.getOriginTile(Mafi.Tile2i)">
            <summary>
            Returns origin tile of a <see cref="T:Mafi.Core.PathFinding.ClearancePathabilityProvider.DataChunk"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.getChunkKey(Mafi.Tile2i)">
            <summary>
            Returns a key that uniquely identifies <see cref="T:Mafi.Core.PathFinding.ClearancePathabilityProvider.DataChunk"/> that owns given <paramref
            name="tileCoord"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.createAndConnectChunkAt(Mafi.Tile2i,System.Boolean)">
            <summary>
            Creates data chunk and ensures that it has chunks on its overlapping area.
            </summary>
            <remarks>
            Chunk that does not have neighbor at +X, +Y, or +XY also does not have updated data in its overlap in the
            respective direction. Only once a new chunk on the overlap is created, its data is copied to our overlap
            in <see cref="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.connectNeighbors(Mafi.Core.PathFinding.ClearancePathabilityProvider.DataChunk)"/>.
            </remarks>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.connectNeighbors(Mafi.Core.PathFinding.ClearancePathabilityProvider.DataChunk)">
            <summary>
            Connects given chunk to available -x, -y, and -xy neighbors and copies data from the given chunk to the
            connected neighbors overlap areas.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.ValidateData">
            <summary>
            Validates that all chunks have data matching the terrain and all overlapped areas have correctly
            propagated data.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.GetPathabilityDebugInfoAt(Mafi.Tile2i)">
            <summary>
            Returns human-friendly pathability info. Handy for debugging and can be invoked via immediate console.
            </summary>
        </member>
        <member name="T:Mafi.Core.PathFinding.ClearancePathabilityProvider.DataChunk">
            <summary>
            Holds pathability data and reference to neighbors for fast updating.
            </summary>
        </member>
        <member name="P:Mafi.Core.PathFinding.ClearancePathabilityProvider.DataChunk.HasAllNeighbors">
            <summary>
            Whether this chunk has all neighboring chunks. Currently only +-X, ++XY, and +-Y chunks are tracked.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.DataChunk.markPfDataDirty">
            <summary>
            Marks all PF data chunks on this chunk as dirty. This may remove them.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.DataChunk.GetDecodedDataAt(System.Int32,System.Int32,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Returns decoded pathability info at relative coord.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.DataChunk.GetPfData(System.Int32)">
            <summary>
            Returns current PF data for the given capability index.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.DataChunk.GetOrCreatePfData(System.Int32)">
            <summary>
            Gets or creates PF data for the given capability index. This also ensures that neighbors are created.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.DataChunk.EnsureAllNeighbors">
            <summary>
            Ensures that this chunk has data chunks covering its overlaps.
            </summary>
        </member>
        <member name="T:Mafi.Core.PathFinding.ClearancePathabilityProvider.CapabilityChunkData">
            <summary>
            Data for a pathability class.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.CapabilityChunkData.EnsureNotDirtyIfNoNodesVisited">
             <summary>
             Recomputes PF data if it is dirty and no nodes are visited.
            
             We do not recompute chunks that have nodes visited to not affect ongoing pathfinding.
             It is responsibility of the pathfinder to release visited nodes ASAP to not block recomputations (e.g.
             right after PF is node, not waiting until next PF request).
             </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.ClearancePathabilityProvider.CapabilityChunkData.tryConnectToNeighbor(Mafi.Core.PathFinding.PfNode,Mafi.Option{Mafi.Core.PathFinding.ClearancePathabilityProvider.DataChunk})">
            <summary>
            Returns true when neighbor was connected, false when connection was attempted but failed, and null when
            no connection was attempted.
            </summary>
        </member>
        <member name="T:Mafi.Core.PathFinding.HeightClearancePathability">
            <summary>
            Requirements for height clearance.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.HeightClearancePathability.CanPassUnder">
            <summary>
            Can pass under entities that have at least <see cref="F:Mafi.Core.PathFinding.ClearancePathabilityProvider.BASIC_HEIGHT_CLEARANCE"/>
            tiles of clearance.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.HeightClearancePathability.NoPassingUnder">
            <summary>
            Cannot pass under entities.
            </summary>
        </member>
        <member name="T:Mafi.Core.PathFinding.SteepnessPathability">
            <summary>
            Requirements for height clearance.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.SteepnessPathability.SlightSlopeAllowed">
            <summary>
            Can drive on slight slopes.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.SteepnessPathability.NoSlopeAllowed">
            <summary>
            Cannot drive on slopes.
            </summary>
        </member>
        <member name="T:Mafi.Core.PathFinding.DirectVehiclePathFinder">
            <summary>
            A path finder that always returns a straight path to the first goal location. This is for testing and debugging only.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.Goals.IVehicleGoal.IsGoalValid(Mafi.Core.Entities.Dynamic.PathFindingEntity,System.Boolean@)">
            <summary>
            Whether goal is valid for given vehicle and can start navigating to it.
            This is called periodically by the owning vehicle.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.Goals.IVehicleGoal.NotifyGoalFound(Mafi.Tile2i)">
            <summary>
            Called when pathfinding is finished. The goal index represents is related to the last call of
            <see cref="M:Mafi.Core.PathFinding.Goals.IVehicleGoal.GetGoalTiles(Mafi.Tile2i,Mafi.Core.PathFinding.VehiclePathFindingParams,Mafi.Collections.Lyst{Mafi.Tile2i},Mafi.Tile2i@,System.Int32,Mafi.RelTile1i)"/>. If not set, found goal was not part of the original goal tiles.
            </summary>
        </member>
        <member name="P:Mafi.Core.PathFinding.Goals.TerrainDesignationVehicleGoal.ActualGoalDesignation">
            <summary>
            Actual goal designation to which the path was found. Sen when pathfinding is done.
            </summary>
        </member>
        <member name="T:Mafi.Core.PathFinding.Goals.VehicleGoalBase">
            <summary>
            This class provides height-based goal checking. If derived goal class does not need this, it can implement
            <see cref="T:Mafi.Core.PathFinding.Goals.IVehicleGoal"/> directly.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.Goals.VehicleGoalBase.Initialize">
            <summary>
            Ctor and initialization are separate to support pooling.
            </summary>
        </member>
        <member name="T:Mafi.Core.PathFinding.Goals.VehicleGoalsFactory">
            <summary>
            Simplifies creation of all vehicle goals.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.IVehiclePathFinder.TryExtendGoals">
            <summary>
            Adds new goal nodes to the ongoing or failed path finding run. This can be used to extend search without
            starting completely new rerun.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.IVehiclePathFinder.ReconstructFoundPath(Mafi.Collections.Lyst{Mafi.Tile2i},Mafi.Tile2i@)">
            <summary>
            Reconstructs found path. This should be only called when either <see cref="M:Mafi.Core.PathFinding.IVehiclePathFinder.InitVehiclePathFinding(Mafi.Core.PathFinding.IVehiclePathFindingTask,System.Int32@)"/>
            returned <see cref="F:Mafi.Core.PathFinding.VehiclePathFinderInitResult.GoalAlreadyReached"/> or <see cref="M:Mafi.Core.PathFinding.IVehiclePathFinder.ContinueVehiclePathFinding(System.Int32@,System.Boolean,System.Boolean)"/>
            returned <see cref="F:Mafi.PathFinding.PathFinderResult.PathFound"/>.
            Returned path may be empty if start/goal are on top of each other.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.IVehiclePathFinder.GetExploredTiles(Mafi.Collections.Lyst{Mafi.Core.PathFinding.ExploredPfNode})">
            <summary>
            Reconstructs all explored nodes. Can be called at any stage of PF.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.IVehiclePathFinder.FindClosestValidPosition(Mafi.Tile2i,Mafi.Core.PathFinding.VehiclePathFindingParams)">
            <summary>
            Finds closest valid position for given pf params. This does not have to be the very closest empty space
            but rather some position that is known to be valid, like previously visited or explored position.
            This is used to unstuck vehicles.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFinderInitResult.Unknown">
            <summary>
            No result, pathfinding not started.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFinderInitResult.GoalAlreadyReached">
            <summary>
            Goal is already reached, no PF was needed.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFinderInitResult.PathFound">
            <summary>
            Trivial path exists. No further PF needed.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFinderInitResult.ReadyForPf">
            <summary>
            PF initialized and ready for processing.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFinderInitResult.NoStarts">
            <summary>
            No start tiles returned by the task.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFinderInitResult.AllStartsInvalid">
            <summary>
            All returned starts are invalid.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFinderInitResult.NoGoals">
            <summary>
            No goals returned by the task.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFinderInitResult.AllGoalsInvalid">
            <summary>
            All returned goals are invalid.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.IVehiclePathFindingManager.EnqueueTask(Mafi.Core.PathFinding.IManagedVehiclePathFindingTask)">
            <summary>
            Enqueues given task for path finding.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.IVehiclePathFindingManager.AbortTask(Mafi.Core.PathFinding.IManagedVehiclePathFindingTask)">
            <summary>
            Aborts given task and removes it from the queue.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.IVehiclePathFindingManager.GetHomeEntityFor(Mafi.Core.Entities.Dynamic.Vehicle)">
            <summary>
            Returns home entity for given vehicle. Lost vehicles will return to its home entity. Returns None if there
            is no home entity available.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.IVehiclePathFindingManager.FindClosestValidPfNode(Mafi.Tile2i,Mafi.Core.PathFinding.VehiclePathFindingParams)">
            <summary>
            Finds closest valid position for given pf params. This does not have to be the very closest empty space
            but rather some position that is known to be valid, like previously visited or explored position.
            This is used to unstuck vehicles.
            </summary>
        </member>
        <member name="P:Mafi.Core.PathFinding.IVehiclePathFindingTask.StartTiles">
            <summary>
            Start tiles. Only valid after `InitializeStartAndGoals` call.
            </summary>
        </member>
        <member name="P:Mafi.Core.PathFinding.IVehiclePathFindingTask.GoalTiles">
            <summary>
            Goal tiles. Only valid after `InitializeStartAndGoals` call.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.IVehiclePathFindingTask.InitializeStartAndGoals(System.Int32)">
            <summary>
            Initializes goal tiles (discards previously stored ones). Note that for retires > 0 only goals should
            be updated.
            </summary>
            <returns>Whether this task is already completed.</returns>
        </member>
        <member name="P:Mafi.Core.PathFinding.IManagedVehiclePathFindingTask.IsWaitingForProcessing">
            <summary>
            Whether this task is waiting in the path-finder's queue for processing.
            </summary>
        </member>
        <member name="P:Mafi.Core.PathFinding.IManagedVehiclePathFindingTask.IsBeingProcessed">
            <summary>
            Whether this task is being currently processed by the path finder.
            </summary>
        </member>
        <member name="T:Mafi.Core.PathFinding.IPathFindingResult">
            <summary>
            Read-only interface for path finding result.
            </summary>
        </member>
        <member name="P:Mafi.Core.PathFinding.IPathFindingResult.RawPath">
            <summary>
            Result path as a stack - first element is next target and last element is the goal.
            As the vehicle moves, the path gets shorter.
            </summary>
        </member>
        <member name="P:Mafi.Core.PathFinding.IPathFindingResult.ExploredTiles">
            <summary>
            All explored tiles it they were requested. Otherwise it's empty. Note that this is for debugging and is not
            saved.
            </summary>
        </member>
        <member name="T:Mafi.Core.PathFinding.VehiclePathFindingTask">
            <summary>
            Re-usable path finder task. This class is intended to be instantiated by owning vehicle and it should be reused
            for all of its path-finding tasks.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFindingTask.Vehicle">
            <summary>
            Vehicle that owns this task.
            </summary>
        </member>
        <member name="P:Mafi.Core.PathFinding.PfNode.CurrentNeighbors">
            <summary>
            Current neighbors that might not include all available due to non-existing or dirty neighbors.
            </summary>
        </member>
        <member name="P:Mafi.Core.PathFinding.PfNode.IsVisited">
            <summary>
            Whether this node was visited but its neighbors were not explored yet.
            </summary>
        </member>
        <member name="P:Mafi.Core.PathFinding.PfNode.IsProcessed">
            <summary>
            Whether this node is processed all its neighbors have been explored.
            </summary>
        </member>
        <member name="P:Mafi.Core.PathFinding.PfNode.HasParent">
            <summary>
            Whether this node has parent that is not equal to itself. By our convention, start/goal nodes have parents
            set to themselves.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.PfNode.GetAllValidNeighbors">
            <summary>
            Returns edges to all neighbors. This ensures that all surrounding chunks have valid non-dirty data.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.PfNode.EnsureAllPfNeighbors">
            <summary>
            Ensures neighbors that this node potentially touches are not dirty if no nodes are visited.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFinder.CLOSEST_NODE_IMPROVEMENTS_ATTEMPTS">
            <summary>
            How many PF iterations to do when searching for the closest node and new nodes are not improving the current
            minimum.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFinder.CLOSEST_NODE_MAX_DISTANCE">
            <summary>
            This is distance at which path-finding tasks will succeed when require only to get close in order to
            complete, such as construction. Smaller values will result that such PF tasks fail more easily, larger
            values may cause that tasks are completed at too far distance, possibly creating ways for players to cheat.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFinder.m_toProcessList">
            <summary>
            Visited nodes that awaiting processing.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFinder.m_processedList">
            <summary>
            Nodes that were already processed (all neighbors were expanded).
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFinder.m_trackedClosestStartSetNodeToGoal">
            <summary>
            When this is set, path finding is also tracking the closest node from start set and terminates when new
            closer nodes are not found for <see cref="F:Mafi.Core.PathFinding.VehiclePathFinder.CLOSEST_NODE_IMPROVEMENTS_ATTEMPTS"/> attempts.
            This is used for cases when we need a path to the closes point even if the goal is blocked.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.VehiclePathFinder.ResetState">
            <summary>
            Resets state and frees all nodes from internal lists. This should be called when PF is done and path is
            reconstructed.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.VehiclePathFinder.GetPfNodeAt(Mafi.Tile2i,System.Nullable{System.Int32})">
            <summary>
            Returns PF node at given coord from the given capability index (or from the last used one).
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.VehiclePathFinder.getClosestNodeToGoalFromNodesVisitedFromStart">
            <summary>
            Returns the closest processed PF node (to goal) visited from any start nodes.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.VehiclePathFinder.continuePathFinding(System.Int32@,System.Boolean)">
            <summary>
            Runs the path-finding for given number of iterations. Returns status of the operation. Should be called again
            only when <see cref="F:Mafi.PathFinding.PathFinderResult.StillSearching"/> is returned.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.VehiclePathFinder.TryExtendGoals">
            <summary>
            Adds new goal nodes to the ongoing or failed path finding run. This can be used to extend search without
            starting completely new rerun.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.VehiclePathFinder.GetExploredTiles(Mafi.Collections.Lyst{Mafi.Core.PathFinding.ExploredPfNode})">
            <summary>
            Fills given list with nodes that were explored during last or current path-finding run.
            </summary>
        </member>
        <member name="P:Mafi.Core.PathFinding.VehiclePathFinder.AStarHeap.VisitedFromStartSetSize">
            <summary>
            Number of nodes in this list that were explored from start node ( <see
            cref="P:Mafi.PathFinding.AStarNode`1.IsVisitedFromStart"/> set to true).
            </summary>
        </member>
        <member name="P:Mafi.Core.PathFinding.VehiclePathFinder.AStarHeap.VisitedFromGoalSetSize">
            <summary>
            Number of nodes in this list that were explored from goal nodes ( <see
            cref="P:Mafi.PathFinding.AStarNode`1.IsVisitedFromStart"/> set to false).
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.VehiclePathFinder.AStarHeap.Clear">
            <summary>
            Clears this heap and calls <see cref="M:Mafi.PathFinding.AStarNode`1.Clear"/> on all saved nodes.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFindingManager.m_waitingTasks">
            <summary>
            Tasks waiting to be processed.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFindingManager.m_currentTask">
            <summary>
            Task of currently ongoing path-finding. This is to avoid passing it around. May be null if no path-finding is
            currently ongoing.
            </summary>
        </member>
        <member name="P:Mafi.Core.PathFinding.VehiclePathFindingManager.CompletedPfTasks">
            <summary>
            This gets incremented every time PF task completes.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.VehiclePathFindingManager.updatePathFindingTasks">
            <summary>
            Processes current or next task. At most one task will be finished per call.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.VehiclePathFindingManager.startTask(Mafi.Core.PathFinding.IManagedVehiclePathFindingTask,System.Int32@)">
            <summary>
            Starts new path finding task. Returns true when new task was started and is ready for stepping. False is
            returned when new task either succeeded or failed right away and should not be stepped.
            </summary>
        </member>
        <member name="F:Mafi.Core.PathFinding.VehiclePathFindingParams.MaterialTraversalSensitivity">
            <summary>
            Controls how sensitive is the vehicle for material penalties. For example, excavator with track is not very
            sensitive a should have this value below 100%.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.VehiclePathFindingParams.ConvertToCornerTileSpace(Mafi.Tile2i)">
            <summary>
            Converts the given center-based coord to corner-based space where clearance is a square towards +XY, not
            around a point.
            </summary>
        </member>
        <member name="M:Mafi.Core.PathFinding.VehiclePathFindingParams.ConvertToCenterTileSpace(Mafi.Tile2i)">
            <summary>
            Converts corner-based tile space to center-based coords.
            </summary>
        </member>
        <member name="T:Mafi.Core.Population.BirthRateCategoryProto">
            <summary>
            Used for statistics and overview table in UI.
            </summary>
        </member>
        <member name="P:Mafi.Core.Population.BirthRateCategoryProto.Gfx.IconPath">
            <summary>
            Icon asset path to be used in UI.
            </summary>
        </member>
        <member name="F:Mafi.Core.Population.DiseaseProto.MonthlyMortalityRate">
            <summary>
            Morality rate (based on the total population).
            </summary>
        </member>
        <member name="F:Mafi.Core.Population.DiseaseProto.MinDistanceTraveled">
            <summary>
            Minimum distance traveled on the map so this disease can be eligible for selection.
            </summary>
        </member>
        <member name="P:Mafi.Core.Population.Edicts.Edict.IsEnabled">
            <summary>
            Whether the edict was enabled by the player.
            </summary>
        </member>
        <member name="P:Mafi.Core.Population.Edicts.Edict.IsActive">
            <summary>
            Whether the edict is active which mean it is enabled + all its prerequisites are satisfied.
            </summary>
        </member>
        <member name="F:Mafi.Core.Population.Edicts.EdictProto.MonthlyUpointsCost">
            <summary>
            If negative, the edict actually generates unity.
            </summary>
        </member>
        <member name="T:Mafi.Core.Population.Edicts.FoodConsumptionEdictProto">
            <summary>
            Increases consumption of food in exchange for more unity.
            </summary>
        </member>
        <member name="T:Mafi.Core.Population.Edicts.PopsBoostEdictProto">
            <summary>
            Edict that boosts population growth.
            </summary>
        </member>
        <member name="T:Mafi.Core.Population.Edicts.PopsEvictionEdictProto">
            <summary>
            Edict that evicts population - reduces number of pops in the settlement.
            </summary>
        </member>
        <member name="T:Mafi.Core.Population.Edicts.PopsGrowthPauseEdictProto">
            <summary>
            Edict that pauses population growth.
            </summary>
        </member>
        <member name="F:Mafi.Core.Population.Edicts.PopsQuarantineEdictProto.DiseaseReduction">
            <summary>
            Reduced both health and mortality effect of a disease.
            </summary>
        </member>
        <member name="F:Mafi.Core.Population.Edicts.PopsQuarantineEdictProto.WorkersToWithhold">
            <summary>
            Percentage of population to withhold from working.
            </summary>
        </member>
        <member name="T:Mafi.Core.Population.HealthPointsCategoryProto">
            <summary>
            Used for statistics and overview table in UI.
            </summary>
        </member>
        <member name="P:Mafi.Core.Population.HealthPointsCategoryProto.Gfx.IconPath">
            <summary>
            Icon asset path to be used in UI.
            </summary>
        </member>
        <member name="P:Mafi.Core.Population.IEntityWorkersAssigner.HasAllRequiredWorkers">
            <summary>
            True even in case entity has no work places.
            </summary>
        </member>
        <member name="M:Mafi.Core.Population.IEntityWorkersAssigner.CanWork(System.Boolean)">
            <summary>
            Called to check that entity has workers and can work. This also actively tries to get workers if they are not
            present.
            NOTE: Do no use this from UI!
            </summary>
        </member>
        <member name="M:Mafi.Core.Population.IEntityWorkersAssigner.ReturnWorkersVoluntarily">
            <summary>
            Used by our entity / us to voluntarily return workers.
            </summary>
        </member>
        <member name="F:Mafi.Core.Population.MedicalSuppliesParam.MortalityDeductionWhenProvided">
            <summary>
            Value will be subtracted from current mortality.
            </summary>
        </member>
        <member name="F:Mafi.Core.Population.PopNeedProto.Unity">
            <summary>
            Unity generated per fully satisfied population.
            </summary>
        </member>
        <member name="F:Mafi.Core.Population.PopNeedProto.HealthGiven">
            <summary>
            Health difference when this need is fully provided.
            </summary>
        </member>
        <member name="P:Mafi.Core.Population.PopNeedProto.Gfx.IconPath">
            <summary>
            Icon asset path to be used in UI.
            </summary>
        </member>
        <member name="F:Mafi.Core.Population.PopsHealthManager.MIN_HEALTH">
            <summary>
            Once health drops under this value, pops start to die
            </summary>
        </member>
        <member name="F:Mafi.Core.Population.PopsHealthManager.UPOINTS_PER_HEALTHPOINT">
            <summary>
            Points given or deducted based on health points above / below MIN_HEALTH
            </summary>
        </member>
        <member name="F:Mafi.Core.Population.PopsHealthManager.UPOINTS_FOR_ABOVE_MIN">
            <summary>
            Given if health is above MIN_HEALTH
            </summary>
        </member>
        <member name="F:Mafi.Core.Population.PopsHealthManager.UpointsForHealthLastMonth">
            <summary>
            Note: can be negative
            </summary>
        </member>
        <member name="T:Mafi.Core.Population.UpointsCategoryProto">
             <summary>
             Used for statistics and overview table in UI.
            
             It works the following way:
             Each stats entry has to have UpointsCategoryProto assigned, this give it place in overview.
             However each has to have UpointsStatsCategoryProto assigned as well (but it can be this).
             - This one is used for further grouping in statistics (history chart data).
            
             Example:
             A) Boost has UpointsCategoryProto called Boost, and UpointsStatsCategoryProto this (Boost again).
             So for Furnace and Boiler boost we get this:
             Table:
             - Boost => tooltip showing Furnace and Boiler boost
             Stats:
             - Boost
             B) Settlement service has each own special UpointsCategoryProto but they all share UpointsStatsCategoryProto
             So for Water and Food we get this:
             Table:
             - Water
             - Food
             Stats:
             - Services (containing sum of Water and Food).
             </summary>
        </member>
        <member name="F:Mafi.Core.Population.UpointsCategoryProto.HideCount">
            <summary>
            If true, UI will sum up all the values under same UpointsCategoryProto but it won't prefix
            the count. Used for services for instance as count does not make much sense there.
            </summary>
        </member>
        <member name="P:Mafi.Core.Population.UpointsCategoryProto.IsOneTimeAction">
            <summary>
            One time actions like quick deliver, vehicle recover etc.
            </summary>
        </member>
        <member name="M:Mafi.Core.Population.UpointsManager.onNewMonthEnd">
            <summary>
            Any unity generation or edict run on onNewMonth. So by doing this in end we make
            sure that consumers come last.
            </summary>
        </member>
        <member name="M:Mafi.Core.Population.UpointsManager.ConsumeAsMuchAs(Mafi.Core.Prototypes.Proto.ID,Mafi.Upoints,Mafi.Option{Mafi.Core.Entities.IEntity},System.Nullable{Mafi.Localization.LocStr})">
            <summary>
            Returns how much was removed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Population.UpointsStats.m_alreadyRegisteredConsumers">
            <summary>
            This avoids recording 1 unique demand multiple times per month.
            </summary>
        </member>
        <member name="T:Mafi.Core.Population.UpointsStatsCategoryProto">
            <summary>
            Read UpointsCategoryProto documentation to understand how this works.
            </summary>
        </member>
        <member name="P:Mafi.Core.Population.UpointsStatsCategoryProto.Title">
            <summary>
             Title is used for grouping in overview table.
            </summary>
        </member>
        <member name="P:Mafi.Core.Population.UpointsStatsCategoryProto.Gfx.IconPath">
            <summary>
            Icon asset path to be used in UI.
            </summary>
        </member>
        <member name="P:Mafi.Core.Population.IWorkersManager.AmountOfFreeWorkersOrMissing">
             <summary>
             Number of available workers. Can be negative if there is not enough workers. Good for UI.
            
             Only updated on sim step end.
             </summary>
        </member>
        <member name="P:Mafi.Core.Population.IWorkersManager.WorkersAmountChanged">
            <summary>
            Only fired once per sim step on sim end.
            </summary>
        </member>
        <member name="T:Mafi.Core.Ports.BufferedPorts.BufferedInputPorts">
            <summary>
            Encapsulates a list of buffered input ports.
            </summary>
            <remarks>
            Port products map is not saved/loaded, the owner of an instance of has to recreate it after load. The owner is
            also responsible for addition of all buffers on load, only quantities fo those buffers are saved/loaded.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Ports.BufferedPorts.BufferedInputPorts.m_buffers">
             <summary>
             Input buffers for currently selected process.
             </summary>
             <remarks>
             Buffers are separated from ports to enable:
             1) One port receiving multiple different products.
             2) One product received by multiple ports.
            
             Non virtual buffers are saved in SaveLoadInBuffers property.
            
             TODO: We should have some mechanic to prune buffers that are not needed.
             </remarks>
        </member>
        <member name="F:Mafi.Core.Ports.BufferedPorts.BufferedInputPorts.m_customStrategy">
            <summary>
            Strategy to use instead of the default one.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.BufferedPorts.BufferedInputPorts.#ctor(Mafi.Core.Entities.Static.ILayoutEntity,Mafi.Core.IoPortId.Factory,Mafi.Core.Ports.Io.IIoPortsManager,Mafi.Core.Entities.Static.IVirtualBuffersMap,Mafi.Core.Products.IProductsManager,Mafi.Core.Vehicles.IVehicleBuffersRegistry,System.Nullable{System.Int32},Mafi.Core.Vehicles.IInputBufferPriorityProvider,System.Boolean)">
            <remarks>
            The <paramref name="entity"/> parameter has to have the Transform property correctly filled (even after
            load).
            </remarks>
        </member>
        <member name="M:Mafi.Core.Ports.BufferedPorts.BufferedInputPorts.Remove(Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Factory.Recipes.RecipeInput},System.Nullable{Mafi.Core.Products.DestroyReason})">
            <summary>
            Removes products from input buffers.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.BufferedPorts.BufferedInputPorts.storeProducts(Mafi.Core.ProductQuantity)">
            <summary>
            Called by ports to store products.
            </summary>
        </member>
        <member name="T:Mafi.Core.Ports.BufferedPorts.BufferedInputPorts.WasteInputPortPriorityProvider">
            <summary>
            We are using normal priority for waste to not bother logistics. IF anything needs to get
            rid of waste it will have high prio set on its own.
            </summary>
        </member>
        <member name="T:Mafi.Core.Ports.BufferedPorts.BufferedOutputPorts">
            <summary>
            Encapsulates a list of buffered output ports.
            </summary>
            <remarks>
            Port products map is not saved/loaded, the owner of an instance of has to recreate it after load. The owner is
            also responsible for addition of all buffers on load, only quantities fo those buffers are saved/loaded.
            </remarks>
        </member>
        <member name="P:Mafi.Core.Ports.BufferedPorts.BufferedOutputPorts.ProductsInNeedOfTransports">
            <summary>
            Products that can't be transported by vehicles and in the last update, we tried to send them
            to ports that have no transports connected.
            </summary>
        </member>
        <member name="F:Mafi.Core.Ports.BufferedPorts.BufferedOutputPorts.m_buffers">
            <summary>
            Output buffers for currently selected process.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.BufferedPorts.BufferedOutputPorts.CanAdd(Mafi.Core.Factory.Recipes.RecipeOutput)">
            <summary>
            Check availability space in output buffers.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.BufferedPorts.BufferedOutputPorts.CanAdd(Mafi.Core.Products.ProductProto,Mafi.Quantity)">
            <summary>
            Check availability space in output buffers.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.BufferedPorts.BufferedOutputPorts.CreateAsMuchAs(Mafi.Core.Products.ProductProto,Mafi.Quantity,Mafi.Core.Products.CreateReason,System.Boolean)">
            <summary>
            Returns amount created and stored.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.BufferedPorts.BufferedOutputPorts.OutputProducts(Mafi.Core.ProductQuantity[])">
            <summary>
            Passes given products to output buffers. The quantities in the array are decreased by the amount passed to
            the output buffers.
            </summary>
            <returns>Whether all products passed as parameter were passed to output buffers.</returns>
        </member>
        <member name="M:Mafi.Core.Ports.BufferedPorts.BufferedOutputPorts.SendOutputs">
            <summary>
            Sends products in buffers through output ports, if possible.
            </summary>
        </member>
        <member name="F:Mafi.Core.Ports.BufferedPorts.BufferedOutputPorts.BufferPorts.m_ports">
            <summary>
            Ports available to output product.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.BufferedPorts.BufferedOutputPorts.BufferPorts.PrevUsedPort">
            <summary>
            Index of port used as last output port, -1 at start. This is done as previous port index instead of next
            port index, so that after load the index is automatically checked before usage without perf impact.
            </summary>
        </member>
        <member name="T:Mafi.Core.Ports.BufferedPorts.IBufferedPortsSpec">
            <summary>
            Lightweight interface to be consumed by buffers to setup buffers and ports. This avoids the need
            to reimplement IRecipe interface.
            </summary>
        </member>
        <member name="T:Mafi.Core.Ports.Io.IoOutputPort">
            <summary>
            Helper class that does not accept any products. Useful for implementation of output ports.
            </summary>
        </member>
        <member name="T:Mafi.Core.Ports.Io.IoPort">
            <summary>
            Generic I/O port that handles connection logic and has position in the world.
            </summary>
        </member>
        <member name="F:Mafi.Core.Ports.Io.IoPort.MAX_TRANSFER_PER_TICK">
            <summary>
            Max transferred quantity through port per tick. This makes max port throughput 30 / sec which is equal
            to four T3 transports.
            </summary>
            <remarks>This number should not be lower since T3 transports are using stack size of 3.</remarks>
        </member>
        <member name="F:Mafi.Core.Ports.Io.IoPort.Id">
            <summary>
            Unique ID of this port.
            </summary>
        </member>
        <member name="F:Mafi.Core.Ports.Io.IoPort.OwnerEntity">
            <summary>
            Entity that owns this port.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPort.Position">
            <summary>
            Tile position of this port.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPort.Direction">
            <summary>
            Direction of this port always pointing outwards from the parent entity - towards potentially connected port.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPort.ShapePrototype">
            <summary>
            Shape of this port.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPort.Type">
            <summary>
            Type of this port.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPort.Name">
            <summary>
            Name of this port.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPort.ConnectedPort">
            <summary>
            Connected port or <see cref="F:Mafi.Option.None"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Ports.Io.IoPort.RendererId">
            <summary>
            Helper field solely for use by `IoPortsRenderer` to avoid dict lookup. Do not touch this.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPort.IsConnected">
            <summary>
            Connected status of this port.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPort.IsNotConnected">
            <summary>
            Whether this port is not connected to any other port.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPort.IsEndPort">
            <summary>
            Whether this port is end-port. This should not change for the entire lifetime of a port.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPort.IsConnectedAsInput">
            <summary>
            Returns true if this port is connected to an output port.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPort.IsConnectedAsOutput">
            <summary>
            Returns true if this port is connected to an input port.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPort.ExpectedConnectedPortCoord">
            <summary>
            Position of expected connected port (position + direction).
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.IoPort.CanConnectTo(Mafi.Core.Ports.Io.IoPort)">
            <summary>
            Whether this port can be connected to the given port. This is relationship is always symmetric:
            <c>X.CanConnectTo(Y) == Y.CanConnectTo(X)</c>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.IoPort.MovePort(Mafi.Tile3i,Mafi.Direction90)">
            <summary>
            Updates port position and rotation. Call this only when the port is not added to the world, otherwise you
            will screw up <see cref="T:Mafi.Core.Ports.Io.IoPortsManager"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.IoPort.TryConnect(Mafi.Core.Ports.Io.IoPort,Mafi.Core.Ports.Io.IIoPortsManager)">
            <summary>
            Tries to connect to the given port.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.IoPort.Disconnect(Mafi.Core.Ports.Io.IIoPortsManager)">
            <summary>
            Disconnects any connected port.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.IoPort.SendAsMuchAs(Mafi.Core.ProductQuantity)">
            <summary>
            Sends as much of given product as possible to the connected port. Returns remaining non-sent product.
            </summary>
            <remarks>It is OK to try to send stuff when this port is not connected or connected as input.</remarks>
        </member>
        <member name="M:Mafi.Core.Ports.Io.IoPort.ReceiveAsMuchAs(Mafi.Core.ProductQuantity)">
            <summary>
            Handles receiving of the product. This logic is implemented by derived class. Any (or all) products that
            cannot be received must be returned.
            </summary>
            <remarks>
            Only products accepted by the port are sent. Derived class does not need to re-check (assert might be
            healthy). Empty quantity is never given.
            </remarks>
        </member>
        <member name="T:Mafi.Core.Ports.Io.IoPortShapeProto">
             <summary>
             Io port shape specifies an interface between transport and entity. Two <see cref="T:Mafi.Core.Ports.Io.IoPort"/> s can be only
             connected if they have identical <see cref="T:Mafi.Core.Ports.Io.IoPortShapeProto"/>.
            
             Shape does not contain information about transport so we can have multiple different transports with different
             <see cref="!:TransportCrossSectionProto"/> that have the same port shape.
             </summary>
        </member>
        <member name="F:Mafi.Core.Ports.Io.IoPortShapeProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.IoPortShapeProto.ID.op_Implicit(Mafi.Core.Ports.Io.IoPortShapeProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Ports.Io.IoPortShapeProto.LayoutChar">
            <summary>
            Representation of this shape in entity layout.
            </summary>
        </member>
        <member name="F:Mafi.Core.Ports.Io.IoPortShapeProto.AllowedProductType">
            <summary>
            Allowed product type for this shape. Only one product per shape is allowed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Ports.Io.IoPortShapeProto.Graphics">
            <summary>
            Graphics-only properties that does not affect game simulation and are not needed or accessed by the game
            simulation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Ports.Io.IoPortShapeProto.Gfx.ConnectedPortPrefabPath">
            <summary>
            Prefab of this port.
            </summary>
        </member>
        <member name="F:Mafi.Core.Ports.Io.IoPortShapeProto.Gfx.DisconnectedPortPrefabPath">
            <summary>
            Prefab of special end model that is shown when the port is not connected. May be the same path as <see
            cref="F:Mafi.Core.Ports.Io.IoPortShapeProto.Gfx.ConnectedPortPrefabPath"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Ports.Io.IoPortShapeProto.Gfx.RendererIndexConnected">
            <summary>
            Helper fields solely for use by `IoPortsRenderer` to avoid dict lookup. Do not touch them.
            </summary>
        </member>
        <member name="T:Mafi.Core.Ports.Io.IoPortsManager">
            <summary>
            Ports manager.
            </summary>
            <remarks>
            Ports manager does not implement <see cref="!:IEntityValidator"/> because for layout entities all ports are within
            the entity so that they are always safe to add and for other implementations of <see cref="T:Mafi.Core.Entities.Static.StaticEntity"/> there
            is no general way how to obtain port locations from proto.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Ports.Io.IoPortsManager.m_ports">
            <summary>
            All managed ports.
            </summary>
        </member>
        <member name="E:Mafi.Core.Ports.Io.IoPortsManager.PortAdded">
            <summary>
            Raised when a new port is added. This event is raised on the sim thread.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPortsManager.PortConnectionChanged">
            <summary>
            Raised when a port connection status is changed.
            </summary>
        </member>
        <member name="E:Mafi.Core.Ports.Io.IoPortsManager.PortRemoved">
            <summary>
            Raised when a port is removed. This event is raised on the sim thread.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPortsManager.Item(Mafi.Core.Ports.Io.IoPortKey)">
            <summary>
            Returns I/O port on requested coordinate.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPortsManager.PortsCount">
            <summary>
            Total number of all managed ports.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPortsManager.Ports">
            <summary>
            Returns all managed ports.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.IoPortsManager.CanAdd(Mafi.Core.Ports.Io.IoPort)">
            <summary>
            Whether given port can be safely added.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.IoPortsManager.DisconnectAndRemove(Mafi.Core.Ports.Io.IoPort)">
            <summary>
            Disconnects and removes given port.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.IoPortsManager.removeAllPortsOf(Mafi.Core.Entities.Static.IStaticEntity)">
            <summary>
            Removes all ports of given entity from this map.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.IoPortsManager.addAllPortsOf(Mafi.Core.Entities.Static.IStaticEntity)">
            <summary>
            Adds all ports of given entity if it is instance of <see cref="T:Mafi.Core.Entities.Static.StaticEntity"/>. All added ports are attempted
            to connect.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.IoPortsManager.Debug_VerifyPorts(Mafi.Core.Entities.IEntitiesManager,System.String@)">
            <summary>
            Verifies that all managed ports match ports of entities.
            </summary>
        </member>
        <member name="T:Mafi.Core.Ports.Io.IoPortTemplate">
            <summary>
            Template of an IO port that has relative position and rotation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Ports.Io.IoPortTemplate.RelativePosition">
            <summary>
            Relative coordinate of this port with respect to the layout origin.
            </summary>
        </member>
        <member name="F:Mafi.Core.Ports.Io.IoPortTemplate.RelativeDirection">
            <summary>
            Relative direction of this port. A port always points outwards from the parent entity towards potentially
            connected port.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IoPortTemplate.RelativePositionOfConnectedPort">
            <summary>
            Relative position of potentially connected port or transport pivot.
            </summary>
        </member>
        <member name="T:Mafi.Core.Ports.Io.IPortProductResolverImpl">
            <summary>
            Provides a products corresponding to ports for a given type of an entity.
            To query port products use <see cref="T:Mafi.Core.Ports.Io.PortProductsResolver"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Ports.Io.IPortProductResolverImpl.ResolvedEntityType">
            <summary>
            Type of entity that owns queried ports.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.IPortProductResolverImpl.GetPortProduct(Mafi.Core.Ports.Io.IoPort,System.Boolean,System.Boolean)">
            <summary>
            Returns a product to be shown above given port of a given entity.
            By default this considers enabled recipes only.
            The <paramref name="considerAllUnlockedRecipes"/> can be used consider all unlocked.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.IPortProductResolverImpl.GetPortProduct(Mafi.Core.Entities.EntityProto,Mafi.Core.Ports.Io.PortSpec)">
            <summary>
            This can be used in previews where we don't have entity instance yet.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.PortProductsResolver.GetPortProducts(Mafi.Core.Ports.Io.IoPort,System.Boolean,System.Boolean)">
            <summary>
            Returns port products for a concrete port. By default this considers enabled recipes only.
            The <paramref name="considerAllUnlockedRecipes"/> can be used consider all unlocked.
            This is handy for entities that are in construction or disabled.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.PortProductsResolver.GetPortProducts(Mafi.Core.Entities.Static.StaticEntityProto,Mafi.Core.Ports.Io.PortSpec)">
            <summary>
            Returns port products for given port. This considers all unlocked recipes.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.PortProductsResolver.GetLayoutEntityPortProductsClustered(Mafi.Core.Entities.Static.Layout.LayoutEntityProto)">
            <summary>
            Returns groups of products and their locations relative to the layout.
            This considers all unlocked recipes.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.Io.PortProductsResolver.getPortProductResolver(System.Type,Mafi.Core.Ports.Io.IPortProductResolverImpl@)">
            <summary>
            Finds a product resolver for given entity type.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.IUniversalPortsFriend.ReceiveAsMuchAs(Mafi.Core.ProductQuantity,Mafi.Core.Ports.UniversalPort)">
            <summary>
            Returns what was not received.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.UniversalPortsHelper.rebuildPorts">
            <summary>
            Clears current port registrations and initializes ports again from the owner entity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Ports.UniversalPort.PortIndex">
            <summary>
            Index withing parent array of ports.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.UniversalPort.ReceiveAsMuchAs(Mafi.Core.ProductQuantity)">
            <summary>
            Returns what was not received.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.UniversalPort.SendAsMuchAs(Mafi.Core.ProductQuantity)">
            <summary>
            Sends as much of given product as possible to the connected port. Returns remaining non-sent product.
            </summary>
        </member>
        <member name="M:Mafi.Core.Ports.UniversalPort.SendAsMuchAsFromBuffer(Mafi.Core.Entities.Static.IProductBuffer)">
            <summary>
            Sends as much as possible from given buffer and returns sent amount.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.CountableProductProtoBuilder.Start(System.String,Mafi.Core.Products.ProductProto.ID,System.String)">
            <summary>
            Starts building of a new countable product by resetting the builder.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.CountableProductProtoBuilder.State.MaxQuantityPerTransportStack(System.Int32)">
            <summary>
            Sets quantity and dimensions of a single transported stack of the product. It will also automatically
            calculate volume of a single unit.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.DetailLayerSpecProto.PrefabPath">
            <summary>
            Path for the prefab that specifies the mesh and material to use.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.DetailLayerSpecProto.DensityPerTileNotDisrupted">
            <summary>
            Detail density when tile is not disrupted. If less than one, uniform random sampling will be used.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.DetailLayerSpecProto.DensityPerTileFullyDisrupted">
            <summary>
            Detail density when tile is fully disrupted. If less than one, uniform random sampling will be used.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.DetailLayerSpecProto.WindSensitivity">
            <summary>
            Sensitivity to wind. If set to 0, no wind animation is performed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.DetailLayerSpecProto.UpNormalWeight">
            <summary>
            Weight of UP normal compared to the true mesh normal. When set to 0, mesh normal will be used. When set to
            1, all normals will be overriden wh UP normal. Linear interpolation is used in between. This is used to
            make grass and other billboard better blend with terrain.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.DetailLayerSpecProto.GetCount(System.Single,System.Single)">
            <summary>
            Returns count of details on a tile given spawn weight and tile disruption.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.FluidProductProto.Phantom">
            <summary>
            Phantom prototype does not represent any valid prototype and serves as convenient placeholder to avoid
            redundant null checks or unnecessary usage of Option{T}. This is also useful for unit tests. Phantom
            prototype should be NEVER returned through public interface of the class that uses it.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.FluidProductProtoBuilder.Start(System.String,Mafi.Core.Products.ProductProto.ID,System.String)">
            <summary>
            Starts building of a new fluid product (liquid or gas) by resetting the builder.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.IGlobalProductsProvider.RemoveAsMuchAs(Mafi.Core.ProductQuantity)">
            <summary>
            Returns how much was removed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.DestroyReason.Cleared">
            <summary>
            From clearing of entity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.DestroyReason.Wasted">
            <summary>
            For instance electricity that couldn't be consumed. No money given.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.DestroyReason.QuickTrade">
            <summary>
            Products sold via QuickTrade.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.DestroyReason.Export">
            <summary>
            Products exported from the island.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.DestroyReason.Maintenance">
            <summary>
            Used as input in maintenance.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.CreateReason.Imported">
            <summary>
            Player imported this from the world map.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.CreateReason.Cheated">
            <summary>
            Cheating!
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.CreateReason.QuickTrade">
            <summary>
            Products acquired via QuickTrade.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.CreateReason.Loot">
            <summary>
            Loot from beacon or world map.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.IProductsManager.ProductCreated(Mafi.Core.Products.ProductProto,Mafi.Quantity,Mafi.Core.Products.CreateReason)">
            <summary>
            Informs the manager that new quantity of the given product was added to the world.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.IProductsManager.ReportProductsTransformation(Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Factory.Recipes.RecipeInput},Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Factory.Recipes.RecipeOutput},Mafi.Core.Products.DestroyReason,Mafi.Core.Products.CreateReason)">
            <summary>
            Informs the manager of products transformation. Typically done by a machine. All quantities will get
            reported and also source products get transferred.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.IProductsManager.DestroyProductReturnRemovedSourceProducts(Mafi.Core.Products.ProductProto,Mafi.Quantity,Mafi.Core.Products.DestroyReason,Mafi.Collections.Lyst{System.Collections.Generic.KeyValuePair{Mafi.Core.Products.ProductProto,Mafi.PartialQuantityLarge}})">
            <summary>
            This will remove the product from global quantity and remove its proportional source products
            and returns them.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.IProductsManager.ProductCreated(Mafi.Core.Products.ProductProto,Mafi.Quantity,Mafi.Collections.ReadonlyCollections.IIndexable{Mafi.Core.ProductQuantity},Mafi.Core.Products.CreateReason)">
            <summary>
            Informs the manager that new quantity of the given product was added to the world.
            This one also adds its source products.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.IProductsManager.ProductDestroyed(Mafi.Core.Products.ProductProto,Mafi.Quantity,Mafi.Core.Products.DestroyReason)">
            <summary>
            Informs the manager that quantity of the given product was removed from the world. Also handles money
            changes.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.IProductsManager.CanBeCleared(Mafi.Core.Products.ProductProto)">
            <summary>
            Whether the product can be cleared from storage, transports etc. If not such product cannot be destroyed
            (e.g. Nuclear waste).
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.IProductsManager.ClearProduct(Mafi.Core.Products.ProductProto,Mafi.Quantity)">
            <summary>
            Checks <see cref="M:Mafi.Core.Products.IProductsManager.CanBeCleared(Mafi.Core.Products.ProductProto)"/> and if true it removes the quantity from its statistics and handles
            payments.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.IProductsManager.ClearProductNoChecks(Mafi.Core.Products.ProductProto,Mafi.Quantity)">
            <summary>
            Clears product immediately without checks as to whether the product can be cleared.
            </summary>
            <remarks>
            Usable for deleting products that are not visible to the user - like Machine input buffers.
            </remarks>
        </member>
        <member name="M:Mafi.Core.Products.IProductsManager.ReportStorageCapacityChange(Mafi.Core.Products.ProductProto,Mafi.Quantity)">
            <summary>
            Informs the manager that storage capacity for the given product has changed by the given quantity. Can be
            negative, in such case the capacity was decreased.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.IProductsManager.ReportStoredQuantityChange(Mafi.Core.Products.ProductProto,Mafi.Quantity)">
            <summary>
            Informs the manager that the total quantity of the given product that is in storages has changed by the given
            quantity. Can be negative, in such case the quantity was decreased.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.IProductsManager.GetStatsFor(Mafi.Core.Products.ProductProto)">
            <summary>
            Returns statistics for the given product. These are kept up to date no need to requery them every time.
            Thread safe.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.LooseProductProto.Phantom">
            <summary>
            Phantom prototype does not represent any valid prototype and serves as convenient placeholder to avoid
            redundant null checks or unnecessary usage of Option{T}. This is also useful for unit tests. Phantom
            prototype should be NEVER returned through public interface of the class that uses it.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.LooseProductProto.TerrainMaterial">
            <summary>
            If set, this product can be dumped on the terrain and will transform to this material.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.LooseProductProto.IsDumpedOnTerrainByDefault">
            <summary>
            Whether this loose product is dumped on terrain by default. Otherwise, player has to mark the product for
            dumping explicitly.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.LooseProductProto.IsFarmable">
            <summary>
            Whether things can grow on this product. Used for farms. TODO: Make this material property, not product.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.LooseProductProto.CanBeOnTerrain">
            <summary>
            Whether this product can be on the terrain.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.LooseProductProto.LooseSlimId">
            <summary>
            Slim ID of this material.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.LooseProductProto.Gfx.PileMaterialAssetPath">
            <summary>
            Material for the pile prefabs.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.LooseProductProto.Gfx.UseRoughPileMeshes">
            <summary>
            Whether to use rough pile meshes (like rock or ore), otherwise, smoother meshes are used (like sand).
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.LooseProductProto.Gfx.ResourcesVizColor">
            <summary>
            Color that should be used for the material when visualizing it in the resources visualization.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.LooseProductProto.Gfx.DisplayInResources">
            <summary>
            Whether this material should be displayed as a resource in the resources visualization.
            </summary>
        </member>
        <member name="T:Mafi.Core.Products.LooseProductSlimId">
            <summary>
            Special ID for terrain materials that is one byte. There is maximum of 255 unique terrain materials + phantom.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.LooseProductsSlimIdManager.SlimIdToLoose">
            <summary>
            Converts <see cref="T:Mafi.Core.Products.ProductSlimId"/> to <see cref="T:Mafi.Core.Products.LooseProductSlimId"/>. If product is not loose,
            value will be default (<see cref="P:Mafi.Core.Products.LooseProductSlimId.PhantomId"/>).
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.LooseProductProtoBuilder.Start(System.String,Mafi.Core.Products.ProductProto.ID,System.String)">
            <summary>
            Starts building of a new loose product by resetting the builder.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.MoltenProductProto.Gfx.MaterialPath">
            <summary>
            Path to material of this molten product. This is used by transport.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.MoltenProductProtoBuilder.Start(System.String,Mafi.Core.Products.ProductProto.ID,System.String)">
            <summary>
            Starts building of a new molten product by resetting the builder.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.ProductProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.ProductProto.ID.op_Implicit(Mafi.Core.Products.ProductProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.ProductProto.Phantom">
            <summary>
            Phantom prototype does not represent any valid prototype and serves as convenient placeholder to avoid
            redundant null checks or unnecessary usage of Option{T}. This is also useful for unit tests. Phantom
            prototype should be NEVER returned through public interface of the class that uses it.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.ProductProto.MaxQuantityPerTransportedProduct">
            <summary>
            Maximum stacking quantity per transported product.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.ProductProto.QuantityFormatter">
            <summary>
            Allows to formats quantity of the current product with proper units so it can displayed to the player.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.ProductProto.CanBeDiscarded">
            <summary>
            Whether this product can be freely thrown away when truck can's store it anywhere.
            All non-storable products can be also discarded.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.ProductProto.IsWaste">
            <summary>
            Waste should not be insta-discarded when clearing transports for instance.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.ProductProto.IsRecyclable">
            <summary>
            If this product can be part of Recyclables mix and thus also extracted from it by a sorting facility.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.ProductProto.SlimId">
            <summary>
            Slim ID of this material.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.ProductProto.DoNotNormalize">
            <summary>
            Used for products like power, or computing where normalization makes no sense.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.ProductProto.DumpableProduct">
            <summary>
            Has value if this is a loose dumpable product. Used for fast checking to reduce casting.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.ProductProto.SourceProduct">
            <summary>
            Product that should be tracked as a source product.
            E.g. metal scrap for iron or bioWaste for food.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.ProductProto.Gfx.IconPath">
            <summary>
            Icon asset path to be used in UI.
            </summary>
            <remarks>This path is valid only after <see cref="M:Mafi.Core.Products.ProductProto.Gfx.Initialize(Mafi.Core.Products.ProductProto)"/> was called.</remarks>
        </member>
        <member name="F:Mafi.Core.Products.ProductProto.Gfx.IconIsCustom">
            <summary>
            Whether custom icon path was set. Otherwise, icon path is automatically generated.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.ProductProto.Gfx.Color">
            <summary>
            Color that is associated with this product.
            </summary>
        </member>
        <member name="T:Mafi.Core.Products.ProductSlimId">
            <summary>
            Special ID for terrain materials that is one byte. There is maximum of 255 unique terrain materials + phantom.
            </summary>
        </member>
        <member name="T:Mafi.Core.Products.ProductsManager">
            <summary>
            Handles statistics for all products in the game. Gets notified every time a product quantity is created or
            removed.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.ProductsManager.ProductStats">
            <summary>
            Note: You can index into this array with slim ID.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.ProductsManager.GetStatsFor(Mafi.Core.Products.ProductProto)">
            <remarks>Keep thread safe.</remarks>
        </member>
        <member name="P:Mafi.Core.Products.ProductStats.GlobalCapacity">
            <summary>
            Global storage capacity.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.ProductStats.UsableGlobalCapacity">
            <summary>
            Global capacity in storages that is free to use.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.ProductStats.GloballyStoredQuantity">
            <summary>
            Globally stored quantity. That means quantity that is situated in storages only.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.ProductStats.GloballyStoredNotAvailableQuantity">
            <summary>
            Globally stored quantity that cannot be retrieved via assert manager though.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.ProductStats.GloballyStoredQuantityForPlayer">
            <summary>
            FYI: This is kinda tricky. We used to show globally stored quantity to the player
            but that was missing things like food because globally stored quantity is used
            also for quick buy and we don't want to remove food from settlement. So we started
            using global quantity but people found that confusing. So compromise is this.
            It shows globally stored quantity but also add in stored quantity that is not available
            for quick removal.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.ProductStats.GlobalQuantity">
            <summary>
            Total quantity of the product in the game without counting in terrain.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.ProductStats.Ϝ_StorageCapacityChange(Mafi.Quantity)">
            <summary>
            This is supposed to be called only by <see cref="T:Mafi.Core.Products.IProductsManager"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.ProductStats.Ϝ_StoredQuantityChange(Mafi.Quantity)">
            <summary>
            This is supposed to be called only by <see cref="T:Mafi.Core.Products.IProductsManager"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.ProductStats.Ϝ_StorageAvailableQuantityChange(Mafi.Quantity)">
            <summary>
            This is supposed to be called only by <see cref="T:Mafi.Core.Products.IProductsManager"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.ProductStats.F_RemoveSourcesForQuantity(Mafi.Quantity)">
            <summary>
            Note: Does not report any global quantity changes, only removes source products.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.ProductStats.F_AddSourceProducts(Mafi.Collections.ReadonlyCollections.IIndexable{Mafi.Core.ProductQuantity})">
            <summary>
            Note: Does not report any global quantity changes, only adds source products.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.ProductStats.F_RemoveSourcesForQuantityReturnResult(Mafi.Quantity,Mafi.Collections.Lyst{System.Collections.Generic.KeyValuePair{Mafi.Core.Products.ProductProto,Mafi.PartialQuantityLarge}})">
            <summary>
            Note: Does not report any global quantity changes, only removes source products.
            </summary>
        </member>
        <member name="M:Mafi.Core.Products.ProductStats.F_TransferSourcesFromInputs(Mafi.Quantity,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Factory.Recipes.RecipeInput},Mafi.Percent,Mafi.Percent)">
             <summary>
             Will take sources from the inputs and transfer them to this product.
            
             NOTE: This does not change any global quantities and it will not remove source
             products that it took from its inputs.
             </summary>
        </member>
        <member name="T:Mafi.Core.Products.TerrainMaterialProto">
            <summary>
            Material that is on terrain.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.TerrainMaterialProto.MinedProduct">
            <summary>
            Product that is obtained when this terrain product is mined.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.TerrainMaterialProto.MinedQuantityMult">
            <summary>
            A multiplier for mined quantity. This multiplies the actual mined quantity when removing or dumping
            material from terrain.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.TerrainMaterialProto.MiningHardness">
            <summary>
            How hard is to mine this material. The larger hardness the slower mining will be.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.TerrainMaterialProto.IsHardenedFloor">
            <summary>
            Whether this material allows building be on top of it. This is for example concrete material.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.TerrainMaterialProto.VehicleTraversalCost">
            <summary>
            Cost of traversal for this material. This should be not negative.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.TerrainMaterialProto.CanBeDisrupted">
            <summary>
            Whether this material can be disturbed. If material cannot be disturbed then disruption is not tracked and no
            disruption events are raised.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.TerrainMaterialProto.DisruptionRecoveryTime">
            <summary>
            Approximate time for this material to become undisrupted. Use <see cref="P:Mafi.Duration.MaxValue"/> for no
            recovery.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.TerrainMaterialProto.MinCollapseHeightDiff">
            <summary>
            Minimum height difference between neighboring tiles at which this material can collapse.
            </summary>
            <remarks>
            The probability of terrain collapsing is 0% at <see cref="F:Mafi.Core.Products.TerrainMaterialProto.MinCollapseHeightDiff"/> (or lower) and 100% at
            <see cref="F:Mafi.Core.Products.TerrainMaterialProto.MaxCollapseHeightDiff"/> (and higher). The probability is linear interpolated between. Terrain
            tile is considered for collapsing only when its height or height or neighbors is changed.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Products.TerrainMaterialProto.MaxCollapseHeightDiff">
            <summary>
            Maximum height difference neighboring tiles at which this material can say without collapsing. Terrain always
            collapses if the height difference is greater than this value.
            </summary>
            <remarks>To make the material less likely to collapse set this value to high value (like 10-100).</remarks>
        </member>
        <member name="P:Mafi.Core.Products.TerrainMaterialProto.SlimId">
            <summary>
            Slim ID of this material.
            </summary>
        </member>
        <member name="P:Mafi.Core.Products.TerrainMaterialProto.IsFarmable">
            <summary>
            Whether things can grow on this material. Used for farms.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.TerrainMaterialProto.Gfx.Color">
            <summary>
            Color of the material for UI. This color has always alpha equal to 255.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.TerrainMaterialProto.Gfx.TextureSpec">
            <summary>
            Texture specification for the terrain material.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.TerrainMaterialProto.Gfx.DisruptedTextureSpec">
            <summary>
            Optional texture for undisrupted material (for example grass). If the terrain material cannot be
            disrupted this is the same as <see cref="F:Mafi.Core.Products.TerrainMaterialProto.Gfx.TextureSpec"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.TerrainMaterialTextureSpec.AlbedoHeightTexturePath">
            <summary>
            Texture with albedo in RGB channels and height in A channel.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.TerrainMaterialTextureSpec.NormalSaoTexturePath">
            <summary>
            Texture with normal RG in RG channels, smoothness in B, and ambient occlusion in A channel.
            </summary>
        </member>
        <member name="T:Mafi.Core.Products.TerrainMaterialSlimId">
            <summary>
            Special ID for terrain materials that is one byte. There is maximum of 255 unique terrain materials + phantom.
            </summary>
        </member>
        <member name="T:Mafi.Core.Products.TerrainMaterialSlimIdOption">
            <summary>
            Wrapped <see cref="T:Mafi.Core.Products.TerrainMaterialSlimId"/> that uses <see cref="P:Mafi.Core.Products.TerrainMaterialSlimId.PhantomId"/> as None.
            Use this instead of nullable type <c>TerrainMaterialSlimId?</c>.
            </summary>
        </member>
        <member name="T:Mafi.Core.Products.VirtualResourceProductProto">
            <summary>
            Represents a product that can be mined from virtual resources of a terrain. Contains mined ProductProto and
            additional properties necessary for virtual mining/visualization.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.VirtualResourceProductProto.Product">
            <summary>
            The mined product.
            </summary>
        </member>
        <member name="F:Mafi.Core.Products.VirtualResourceProductProto.IsResourceFinal">
            <summary>
            If resource is not final we will show its designations even when it temporarily
            ran out because otherwise it might be confusing and scary :)
            </summary>
        </member>
        <member name="T:Mafi.Core.LooseProductQuantity">
            <summary>
            Immutable struct that represents loose product and its quantity.
            </summary>
        </member>
        <member name="F:Mafi.Core.LooseProductQuantity.None">
            <summary>
            Product quantity of unknown product with zero quantity. Please use this only in situations where you don't
            have any reasonable product prototype to use with <see cref="M:Mafi.Core.LooseProductQuantity.NoneOf(Mafi.Core.Products.LooseProductProto)"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.LooseProductQuantity.NoneOf(Mafi.Core.Products.LooseProductProto)">
            <summary>
            Returns zero quantity of given product.
            </summary>
        </member>
        <member name="M:Mafi.Core.LooseProductQuantity.#ctor(Mafi.Core.Products.LooseProductProto,Mafi.Quantity)">
            <summary>
            Creates product quantity of given amount.
            </summary>
        </member>
        <member name="P:Mafi.Core.LooseProductQuantity.IsEmpty">
            <summary>
            Whether quantity is zero.
            </summary>
        </member>
        <member name="M:Mafi.Core.LooseProductQuantity.ToTerrainThickness">
            <summary>
            Returns product thickness of this product quantity.
            </summary>
        </member>
        <member name="M:Mafi.Core.LooseProductQuantity.Add(Mafi.Core.LooseProductQuantity,Mafi.Quantity,Mafi.Core.LooseProductQuantity@)">
            <summary>
            Adds given quantity to this quantity. The result quantity is never larger than <paramref
            name="maxQuantity"/>. The remainder that can not fit returned in <paramref name="remainder"/>.
            </summary>
            <example>
            <code>
            ProductQuantity remainder;
            m_product = m_product.Add(product, maxQuantity, out remainder);
            return remainder;
            </code>
            </example>
        </member>
        <member name="M:Mafi.Core.LooseProductQuantity.Remove(Mafi.Quantity,Mafi.Core.LooseProductQuantity@)">
            <summary>
            Removes up to <paramref name="maxRemovedQuantity"/> from this quantity and returns amount of removed. Also
            fills up the remainder quantity.
            </summary>
            <example>
            <code>
            ProductQuantity remainder;
            ProductQuantity removed = m_product.Remove(maxToRemove, out remainder);
            m_product = remainder;
            return removed;
            </code>
            </example>
        </member>
        <member name="M:Mafi.Core.LooseProductQuantity.op_Addition(Mafi.Core.LooseProductQuantity,Mafi.Quantity)">
            <summary>
            Adds product quantity and integer quantity amount.
            </summary>
        </member>
        <member name="M:Mafi.Core.LooseProductQuantity.op_Subtraction(Mafi.Core.LooseProductQuantity,Mafi.Quantity)">
            <summary>
            Subtracts integer quantity amount from product quantity. Result quantity is never negative.
            </summary>
        </member>
        <member name="F:Mafi.Core.PartialProductQuantity.None">
            <summary>
            Product quantity of unknown product with zero quantity. Please use this only in situations where you don't
            have any reasonable product prototype to use with <see cref="M:Mafi.Core.PartialProductQuantity.NoneOf(Mafi.Core.Products.ProductProto)"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.PartialProductQuantity.NoneOf(Mafi.Core.Products.ProductProto)">
            <summary>
            Returns zero quantity of given product.
            </summary>
        </member>
        <member name="M:Mafi.Core.PartialProductQuantity.#ctor(Mafi.Core.Products.ProductProto,Mafi.PartialQuantity)">
            <summary>
            Creates product quantity of given amount.
            </summary>
        </member>
        <member name="P:Mafi.Core.PartialProductQuantity.IsEmpty">
            <summary>
            Whether quantity is zero.
            </summary>
        </member>
        <member name="P:Mafi.Core.PartialProductQuantity.IsNotEmpty">
            <summary>
            Whether quantity is not zero.
            </summary>
        </member>
        <member name="T:Mafi.Core.ProductQuantity">
            <summary>
            Immutable struct that represents product and its quantity.
            </summary>
        </member>
        <member name="F:Mafi.Core.ProductQuantity.None">
            <summary>
            Product quantity of unknown product with zero quantity. Please use this only in situations where you don't
            have any reasonable product prototype to use with <see cref="M:Mafi.Core.ProductQuantity.NoneOf(Mafi.Core.Products.ProductProto)"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.ProductQuantity.NoneOf(Mafi.Core.Products.ProductProto)">
            <summary>
            Returns zero quantity of given product.
            </summary>
        </member>
        <member name="M:Mafi.Core.ProductQuantity.#ctor(Mafi.Core.Products.ProductProto,Mafi.Quantity)">
            <summary>
            Creates product quantity of given amount.
            </summary>
        </member>
        <member name="P:Mafi.Core.ProductQuantity.IsEmpty">
            <summary>
            Whether quantity is zero.
            </summary>
        </member>
        <member name="P:Mafi.Core.ProductQuantity.IsNotEmpty">
            <summary>
            Whether quantity is not zero.
            </summary>
        </member>
        <member name="M:Mafi.Core.ProductQuantity.Add(Mafi.Core.ProductQuantity,Mafi.Quantity,Mafi.Core.ProductQuantity@)">
            <summary>
            Adds given quantity to this quantity. The result quantity is never larger than <paramref
            name="maxQuantity"/>. The remainder that can not fit returned in <paramref name="remainder"/>.
            </summary>
            <example>
            ProductQuantity remainder; m_product = m_product.Add(product, maxQuantity, out remainder); return remainder;
            </example>
        </member>
        <member name="M:Mafi.Core.ProductQuantity.Remove(Mafi.Quantity,Mafi.Core.ProductQuantity@)">
            <summary>
            Removes up to <paramref name="maxRemovedQuantity"/> from this quantity and returns amount of removed. Also
            fills up the remainder quantity.
            </summary>
            <example>
            <code>
            ProductQuantity remainder;
            ProductQuantity removed = m_product.Remove(maxToRemove, out remainder);
            m_product = remainder;
            return removed;
            </code>
            </example>
        </member>
        <member name="M:Mafi.Core.ProductQuantity.RemoveFrom(Mafi.Core.ProductQuantity@,Mafi.Quantity)">
            <summary>
            Removes up to requested amount from given product quantity. Returns amount removed.
            </summary>
        </member>
        <member name="M:Mafi.Core.ProductQuantity.Combine(Mafi.Core.ProductQuantity)">
            <summary>
            Combines this product quantity with given product quantity. If this quantity is phantom or empty, returns the
            given value. Otherwise it checks whether the products are compatible and add adds the quantities. If given
            products are not compatible, returns this and logs error.
            </summary>
        </member>
        <member name="M:Mafi.Core.ProductQuantity.op_Addition(Mafi.Core.ProductQuantity,Mafi.Quantity)">
            <summary>
            Adds product quantity and integer quantity amount.
            </summary>
        </member>
        <member name="M:Mafi.Core.ProductQuantity.op_Subtraction(Mafi.Core.ProductQuantity,Mafi.Quantity)">
            <summary>
            Subtracts integer quantity amount from product quantity.
            </summary>
        </member>
        <member name="T:Mafi.Core.ProductQuantityLarge">
            <summary>
            Immutable struct that represents product and its large quantity.
            </summary>
        </member>
        <member name="F:Mafi.Core.ProductQuantityLarge.None">
            <summary>
            Product quantity of unknown product with zero quantity. Please use this only in situations where you don't
            have any reasonable product prototype to use with <see cref="M:Mafi.Core.ProductQuantity.NoneOf(Mafi.Core.Products.ProductProto)"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.ProductQuantityLarge.#ctor(Mafi.Core.Products.ProductProto,Mafi.QuantityLarge)">
            <summary>
            Creates product quantity of given amount.
            </summary>
        </member>
        <member name="P:Mafi.Core.ProductQuantityLarge.IsEmpty">
            <summary>
            Whether quantity is zero.
            </summary>
        </member>
        <member name="P:Mafi.Core.ProductQuantityLarge.IsNotEmpty">
            <summary>
            Whether quantity is positive.
            </summary>
        </member>
        <member name="T:Mafi.Core.PropertiesDb.IPropertiesDb">
            <summary>
            Interface of a store of game properties that are (or are expected to be) read from/written to/listened to change
            from multiple different places. The store interface allows to get/set/register listener to change of a set of
            properties.
            </summary>
        </member>
        <member name="M:Mafi.Core.PropertiesDb.IProperty.SetValueFromString(System.String)">
            <summary>
            Is meant for debug only, not regular use.
            </summary>
        </member>
        <member name="T:Mafi.Core.PropertiesDb.IProperty`1">
            <summary>
            Reference to a property in <see cref="T:Mafi.Core.PropertiesDb.IPropertiesDb"/>. Allows for quick read or write of the property's value.
            </summary>
        </member>
        <member name="M:Mafi.Core.PropertiesDb.Property`1.SetValueFromString(System.String)">
            <summary>
            Throws exceptions if parsing fails! Only use in debug/testing code!
            </summary>
        </member>
        <member name="T:Mafi.Core.PropertiesDb.PropsDb">
            <summary>
            See <see cref="T:Mafi.Core.PropertiesDb.IPropertiesDb"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.PropertiesDb.PropsDb.setPropertyValueFromString(System.String,System.String)">
            <summary>
            Throws exceptions if parsing fails! Only use in debug/testing code!
            </summary>
        </member>
        <member name="F:Mafi.Core.PropertiesDb.PropertyId`1.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="F:Mafi.Core.Prototypes.CoreProtoTags.MechanicalShaft">
            <summary>
            For <see cref="T:Mafi.Core.Ports.Io.IoPortShapeProto"/>. Identifies a port shape proto that represents a mechanical shaft.
            TODO: Kill this if possible.
            </summary>
        </member>
        <member name="F:Mafi.Core.Prototypes.EntityCosts.Price">
            <summary>
            Price of an entity to be added to the world.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.EntityCostsTpl.Builder.Maintenance(Mafi.Fix32,Mafi.Core.Products.ProductProto.ID,System.Nullable{Mafi.Percent})">
            <summary>
            Sets monthly maintenance.
            </summary>
        </member>
        <member name="F:Mafi.Core.Prototypes.Proto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="F:Mafi.Core.Prototypes.Proto.PHANTOM_ID_PREFIX">
            <summary>
            Common prefix for all phantom prototypes.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.Proto.RegisterPhantom``1(``0)">
            <summary>
            This should be used to register all phantom protos right on their static creation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.Proto.IsValidId(Mafi.Core.Prototypes.Proto.ID)">
            <summary>
            Validates given proto ID.
            </summary>
        </member>
        <member name="F:Mafi.Core.Prototypes.Proto.Id">
            <summary>
            Unique ID of this Prototype. To avoid name conflicts consider using some prefix specific to your mod.
            </summary>
        </member>
        <member name="F:Mafi.Core.Prototypes.Proto.IsPhantom">
            <summary>
            Whether this prototype is a phantom. Phantom is special instance that represents invalid proto and can be
            used un special situations to avoid nulls.
            </summary>
            <remarks>Each proto type should have at most one phantom instance.</remarks>
        </member>
        <member name="F:Mafi.Core.Prototypes.Proto.IsInitialized">
            <summary>
            Whether this proto has been initialized. After initialization the proto must not be mutable anymore.
            </summary>
        </member>
        <member name="P:Mafi.Core.Prototypes.Proto.Mod">
            <summary>
            Mod that (most likely) registered this Prototype.
            </summary>
        </member>
        <member name="P:Mafi.Core.Prototypes.Proto.Tags">
            <summary>
            Tags of this proto. Adding new tags is allowed only during the game initialization phase.
            </summary>
        </member>
        <member name="P:Mafi.Core.Prototypes.Proto.IsNotAvailable">
            <summary>
            Whether proto is not available and should be hidden in UI (research, menus, etc).
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.Proto.Mafi#Core#Prototypes#IProtoInternalFriend#InitializeInternal(Mafi.Core.Prototypes.ProtosDb)">
            <summary>
            One-time initialization that is called once all protos are registered int the DB.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.Proto.ThrowIfInitialized">
            <summary>
            Throws <see cref="T:Mafi.Core.Prototypes.ProtoInitException"/> if this proto was already initialized. This should be used in any
            method that mutates the proto.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.Proto.ThrowIfNotInitialized">
            <summary>
            Throws <see cref="T:Mafi.Core.Prototypes.ProtoInitException"/> if this proto was not initialized. This should be used in any method
            uses data that may be invalid before initialization.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.Proto.OnInitialize(Mafi.Core.Prototypes.ProtosDb)">
            <summary>
            Initialization hook for derived classes. Called once all protos are registered int the DB.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.Proto.AddOrReplaceParam(Mafi.Core.Prototypes.IProtoParam)">
            <summary>
            Adds (ore replaces) an arbitrary parameter to the proto. This can be used to add special values to proto
            without using inheritance. Parameters can be only added during protos construction phase.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.Proto.CreateStr(Mafi.Core.Prototypes.Proto.ID,System.String,System.String,System.String)">
            <summary>
            Creates proto str and registers name and description using <see cref="M:Mafi.Localization.Loc.Str(System.String,System.String,System.String)"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.Proto.CreateStr(Mafi.Core.Prototypes.Proto.ID,System.String,Mafi.Localization.LocStr,System.String)">
            <summary>
            Creates proto str and registers the given name but the description is not registered since it is already
            localized.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.Proto.CreateStrFromLocalized(Mafi.Core.Prototypes.Proto.ID,System.String,Mafi.Localization.LocStrFormatted,System.String)">
            <summary>
            Creates proto str with already formatted description. The formatted description is registered using
            <see cref="M:Mafi.Localization.LocalizationManager.CreateAlreadyLocalizedFormatted(System.String,Mafi.Localization.LocStrFormatted)"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.Proto.CreateStrFromLocalized(Mafi.Core.Prototypes.Proto.ID,Mafi.Localization.LocStrFormatted,Mafi.Localization.LocStrFormatted)">
            <summary>
            Creates proto str with already formatted name and description (both are registered using
            <see cref="M:Mafi.Localization.LocalizationManager.CreateAlreadyLocalizedFormatted(System.String,Mafi.Localization.LocStrFormatted)"/>).
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.Proto.CreateStrFromLocalized(Mafi.Core.Prototypes.Proto.ID,Mafi.Localization.LocStrFormatted,Mafi.Localization.LocStr)">
            <summary>
            Creates proto str with already formatted name, which is registered using
            <see cref="M:Mafi.Localization.LocalizationManager.CreateAlreadyLocalizedFormatted(System.String,Mafi.Localization.LocStrFormatted)"/>. Description is just passed though.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.Proto.CreateStrFormatDesc1(Mafi.Core.Prototypes.Proto.ID,System.String,System.String,Mafi.Localization.LocStr,System.String)">
            <summary>
            Creates proto str with and formats description with given argument. The raw description is registered with
            formatted description is registered using <see cref="M:Mafi.Localization.LocalizationManager.CreateAlreadyLocalizedFormatted(System.String,Mafi.Localization.LocStrFormatted)"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Prototypes.Proto.Str.Name">
            <summary>
            Player-friendly name.
            </summary>
        </member>
        <member name="F:Mafi.Core.Prototypes.Proto.Str.DescShort">
            <summary>
            Short description of the proto.
            </summary>
        </member>
        <member name="T:Mafi.Core.Prototypes.Proto.Gfx">
            <summary>
            Base class for all graphics information that is NOT used in game simulation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Prototypes.Proto.Gfx.EMPTY_PATH">
            <summary>
            Path in empty graphics instance.
            </summary>
        </member>
        <member name="F:Mafi.Core.Prototypes.IdFactoryBase`1.m_lastUsedId">
            <summary>
            Counter for unique IDs. Current value represents last scheduled ID. Initial value is 0 which is invalid
            ID.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.IdFactoryBase`1.GetNextId">
            <summary>
            Return next valid ID for a new object.
            </summary>
        </member>
        <member name="T:Mafi.Core.Prototypes.IProtoWithUpgrade`1">
            <summary>
            Proto that has information about its upgrade.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.LayoutEntityBuilderState`1.SetCategories(Mafi.Core.Prototypes.Proto.ID[])">
            <summary>
            Sets toolbar categories into which this entity belongs. If the entity does not belong to any category some
            entities might require to explicitly call <see cref="M:Mafi.Core.Prototypes.LayoutEntityBuilderState`1.SetNoCategory"/> to make clear it was intentional.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.LayoutEntityBuilderState`1.SetCategories(Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Entities.Static.Layout.ToolbarCategoryProto})">
            <summary>
            Sets toolbar categories into which this entity belongs. If the entity does not belong to any category some
            entities might require to explicitly call <see cref="M:Mafi.Core.Prototypes.LayoutEntityBuilderState`1.SetNoCategory"/> to make clear it was intentional.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.LayoutEntityBuilderState`1.SetNoCategory">
            <summary>
            Explicitly sets that this entity does not belong to any toolbar category.
            </summary>
        </member>
        <member name="P:Mafi.Core.Prototypes.ProtosDb.IsReadonly">
            <summary>
            Indicator of locked DB for further edits.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.ProtosDb.#ctor(Mafi.Core.Mods.IMod)">
            <summary>
            Creates new DB for prototypes.
            </summary>
            <param name="activeMod">
            Optionally, active mod is set to this parameter. This is for external layout too that cannot set active mod.
            </param>
        </member>
        <member name="M:Mafi.Core.Prototypes.ProtosDb.Mafi#Core#Prototypes#IProtosDbFriend#LockAndInitializeProtos">
            <summary>
            Makes the DB readonly and initializes all registered protos.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.ProtosDb.GetOrLog``1(Mafi.Core.Prototypes.Proto.ID)">
            <summary>
            Tries to get the required proto and logs error message if the proto was not found.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.ProtosDb.GetOrThrow``1(Mafi.Core.Prototypes.Proto.ID)">
            <summary>
            Returns proto or throws <see cref="T:Mafi.Core.ProtoBuilderException"/>. This should be called only during the game
            initialization. During the game call <see cref="M:Mafi.Core.Prototypes.ProtosDb.Get(Mafi.Core.Prototypes.Proto.ID)"/> instead!
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.ProtosDb.FilterExactlyOneOrThrow``1(System.Func{``0,System.Boolean},System.String)">
            <summary>
            This can be called only during the game initialization. Don't call this during the game!
            </summary>
        </member>
        <member name="T:Mafi.Core.Prototypes.SlimIdManagerBase`2">
             <summary>
             Handles conversion from and to SlimIDs and ensures that their order is persistent between saves.
             Derived class should be serializable and sealed.
             </summary>
             <remarks>
             To properly implement slim ID on a proto, add following code to the proto class:
             <code>
             public XxxSlimId SlimId {
            		get {
            			Assert.That(m_slimId.IsPhantom).IsEqualTo_DebugOnly(IsPhantom, "Getting SlimID before it was set.");
            			return m_slimId;
            		}
             }
             private XxxSlimId m_slimId;
            
             void IProtoWithSlimID{XxxSlimId}.SetSlimId(XxxSlimId id) {
            		if (m_slimId.Value != 0 and m_slimId != id) {
            			throw new InvalidOperationException($"Slim ID of '{this}' was already set to '{m_slimId}'.");
            		}
            
            		m_slimId = id;
            	}
             </code>
             </remarks>
        </member>
        <member name="P:Mafi.Core.Prototypes.SlimIdManagerBase`2.PhantomProto">
            <summary>
            Return phantom proto.
            </summary>
            <remarks>IMPORTANT: Implement this as a constant. This is called BEFORE ctor of the derived class.</remarks>
        </member>
        <member name="P:Mafi.Core.Prototypes.SlimIdManagerBase`2.MaxIdValue">
            <summary>
            Maximum valid ID (zero-based).
            </summary>
            <remarks>IMPORTANT: Implement this as a constant. This is called BEFORE ctor of the derived class.</remarks>
        </member>
        <member name="F:Mafi.Core.Prototypes.SlimIdManagerBase`2.ManagedProtos">
            <summary>
            All managed protos. Proto at index <c>i</c> has slim id equal to <c>i</c>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.SlimIdManagerBase`2.CreateSlimId(System.Int32)">
            <summary>
            Creates a slim ID from given index.
            </summary>
            <remarks>IMPORTANT: This is getting called BEFORE ctor of the derived class is called.</remarks>
        </member>
        <member name="T:Mafi.Core.Prototypes.Tag">
            <summary>
            Tag that can be assigned to the <see cref="T:Mafi.Core.Prototypes.Proto"/> to allow easy filtering.
            </summary>
        </member>
        <member name="P:Mafi.Core.Prototypes.UnlockedProtosDb.OnUnlockedSetChanged">
            <summary>
            Called when the set of unlocked protos gets changed. Called on sim thread.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.UnlockedProtosDb.Lock(System.Collections.Generic.IEnumerable{Mafi.Core.Prototypes.Proto})">
            <summary>
            Marks the given protos as locked. Does not matter if a proto was already locked. Make sure to batch all your
            changes to a single call. Otherwise you will trigger multiple callbacks which will lead to unnecessary UI
            redraws.
            </summary>
        </member>
        <member name="M:Mafi.Core.Prototypes.UnlockedProtosDb.Unlock(Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Prototypes.Proto})">
            <summary>
            Marks the given protos as unlocked. Does not matter if a proto was already unlocked. Make sure to batch all
            your changes to a single call. Otherwise you will trigger multiple callbacks which will lead to unnecessary
            UI redraws.
            </summary>
        </member>
        <member name="P:Mafi.Core.Prototypes.IUnlockedProtosConfig.ShouldUnlockAllProtosOnInit">
            <summary>
            Whether all locked protos should be unlocked from the beginning of the game.
            </summary>
        </member>
        <member name="F:Mafi.Core.EntityId.Value">
            <summary>
            Underlying int value of this Id.
            </summary>
        </member>
        <member name="F:Mafi.Core.EntityIdOption.Value">
            <summary>
            Underlying EntityId value of this Id.
            </summary>
        </member>
        <member name="F:Mafi.Core.IoPortId.Value">
            <summary>
            Underlying int value of this Id.
            </summary>
        </member>
        <member name="F:Mafi.Core.MessageNotificationId.Value">
            <summary>
            Underlying int value of this Id.
            </summary>
        </member>
        <member name="F:Mafi.Core.NotificationId.Value">
            <summary>
            Underlying uint value of this Id.
            </summary>
        </member>
        <member name="T:Mafi.Core.Research.ResearchNodeProto">
             <summary>
             Represents a single item of research tree that can be unlocked by the player.
            
             One ResearchProto consists of multiple <see cref="T:Mafi.Core.UnlockingTree.IUnlockNodeUnit"/> that provide the individual research
             improvements.
            
             For instance node proto called Nuclear energy can have following atomic protos:
             - Unlock: Nuclear reactor
             - Unlock: Nuclear waste truck
             - Permanent bonus: +5% company rating
            
             And following required products:
             - 1 tons of Uranium per step
             - 1 Advanced Turbines per step
             - 10 Coolers per step
             </summary>
        </member>
        <member name="F:Mafi.Core.Research.ResearchNodeProto.ID.Value">
            <summary>
            Underlying string value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProto.ID.op_Implicit(Mafi.Core.Research.ResearchNodeProto.ID)~Mafi.Core.Prototypes.Proto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Prototypes.Proto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProto.ID.op_Implicit(Mafi.Core.Research.ResearchNodeProto.ID)~Mafi.Core.Factory.Recipes.RecipeProto.ID">
            <summary>
            Implicit conversion to parent <see cref="T:Mafi.Core.Factory.Recipes.RecipeProto.ID"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProto.DifficultyToSteps(System.Int32)">
            <summary>
            Converts difficulty to number of steps. Steps grow exponentially with difficulty. This makes defining
            research easier.
            </summary>
        </member>
        <member name="P:Mafi.Core.Research.ResearchNodeProto.IsUnlockedFromStart">
            <summary>
            Whether this node should be unlocked on game start.
            </summary>
        </member>
        <member name="P:Mafi.Core.Research.ResearchNodeProto.Parents">
            <summary>
            Parents of this in the research tree. All parents must be unlocked, to be able to research this.
            </summary>
        </member>
        <member name="F:Mafi.Core.Research.ResearchNodeProto.Units">
            <summary>
            Research units of this node. These actually bring the effects of the research.
            </summary>
        </member>
        <member name="F:Mafi.Core.Research.ResearchNodeProto.RequiredUnlockedProtos">
            <summary>
            Protos that need to be unlocked so this node can be available to research.
            </summary>
        </member>
        <member name="F:Mafi.Core.Research.ResearchNodeProto.TotalStepsRequired">
            <summary>
            Total number of step that must be done to unlock the research.
            </summary>
        </member>
        <member name="F:Mafi.Core.Research.ResearchNodeProto.GridPosition">
            <summary>
            Grid position of this node in the research tree. TODO: More documentation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Research.ResearchNodeProto.AnyParentCanUnlock">
            <summary>
            If true, only one parent needs to be unlocked to make this node available.
            </summary>
        </member>
        <member name="T:Mafi.Core.Research.ResearchCheatFinishCmd">
            <summary>
            Command to finish current research - cheat.
            </summary>
        </member>
        <member name="T:Mafi.Core.Research.ResearchStartCmd">
            <summary>
            Command to start a research of the given node from the research tree.
            </summary>
        </member>
        <member name="T:Mafi.Core.Research.ResearchStopCmd">
            <summary>
            Command to stop the current research.
            </summary>
        </member>
        <member name="T:Mafi.Core.Research.ResearchManager">
            <summary>
            Manages all research. Mainly assigns research nodes to research labs and manages spending of resources.
            </summary>
            <remarks>Only one node can be research at the same time.</remarks>
        </member>
        <member name="P:Mafi.Core.Research.ResearchManager.CurrentResearch">
            <summary>
            Currently researched node. Empty if nothing is research at the moment.
            </summary>
        </member>
        <member name="P:Mafi.Core.Research.ResearchManager.OptimalSteps">
            <summary>
            Steps of research that is consider optimal with the current set of research labs that player has.
            </summary>
        </member>
        <member name="F:Mafi.Core.Research.ResearchManager.m_nodes">
            <summary>
            Research nodes indexed by <see cref="T:Mafi.Core.Research.ResearchNodeProto.ID"/>
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchManager.GetResearchNode(Mafi.Core.Research.ResearchNodeProto)">
            <summary>
            Returns the corresponding <see cref="T:Mafi.Core.Research.ResearchNode"/> wrapper for the given <see cref="T:Mafi.Core.Research.ResearchNodeProto"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchManager.TryStartResearch(Mafi.Core.Research.ResearchNodeProto,System.String@)">
            <summary>
            Starts research of the given node.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchManager.StopResearch">
            <summary>
            Stops current research or does nothing if no research is happening.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchManager.Cheat_FinishCurrent">
            <summary>
            Finishes current research as if it would be normally researched.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchManager.ReportResearchStepsDone(Mafi.Fix32)">
            <summary>
            Research lab use this method to report that the research step was done.
            </summary>
        </member>
        <member name="P:Mafi.Core.Research.ResearchNode.StepsDone">
            <summary>
            How many steps we have already done to research this node.
            </summary>
        </member>
        <member name="P:Mafi.Core.Research.ResearchNode.State">
            <summary>
            Current state of the research node.
            </summary>
        </member>
        <member name="P:Mafi.Core.Research.ResearchNode.Children">
            <summary>
            Direct child nodes of the current node.
            </summary>
        </member>
        <member name="P:Mafi.Core.Research.ResearchNode.Parents">
            <summary>
            Direct parent nodes of the current node.
            </summary>
        </member>
        <member name="P:Mafi.Core.Research.ResearchNode.ProgressInPerc">
            <summary>
            Progress done on the research in percents.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilder.State.AddParents(Mafi.Core.Research.ResearchNodeProto[])">
            <summary>
            Sets nodes as parents of the current one.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilder.State.AddUnit(Mafi.Core.UnlockingTree.IUnlockNodeUnit)">
            <summary>
            Adds proto that will be unlocked by the research node.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilder.State.AddIcon(Mafi.Option{Mafi.Core.Prototypes.Proto},System.String)">
            <summary>
            Adds icon to be displayed in the node visualization of the research tree.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilder.State.AddProductIcon(Mafi.Core.Products.ProductProto.ID)">
            <summary>
            Adds proto that will be unlocked by the research node.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilder.State.AddRequiredProto(Mafi.Core.Prototypes.Proto.ID)">
            <summary>
            Adds proto that must be unlocked before this research is available.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilder.State.SetAnyParentCanUnlock">
            <summary>
            Sets that only one parent is required to unlock the current node. Otherwise all the parents have to be
            researched before.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilderExtensions.AddLayoutEntityToUnlock(Mafi.Core.Research.ResearchNodeProtoBuilder.State,Mafi.Core.Entities.Static.StaticEntityProto.ID,System.Boolean)">
            <summary>
            Adds proto that will be unlocked by the research node.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilderExtensions.AddEdictToUnlock(Mafi.Core.Research.ResearchNodeProtoBuilder.State,Mafi.Core.Prototypes.Proto.ID)">
            <summary>
            Adds proto that will be unlocked by the research node.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilderExtensions.AddTechnologyToUnlock(Mafi.Core.Research.ResearchNodeProtoBuilder.State,Mafi.Core.Prototypes.Proto.ID)">
            <summary>
            Adds proto that will be unlocked by the research node.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilderExtensions.AddMachineToUnlock(Mafi.Core.Research.ResearchNodeProtoBuilder.State,Mafi.Core.Factory.Machines.MachineProto.ID,System.Boolean)">
            <summary>
            Adds proto that will be unlocked by the research node.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilderExtensions.AddCropToUnlock(Mafi.Core.Research.ResearchNodeProtoBuilder.State,Mafi.Core.Prototypes.Proto.ID)">
            <summary>
            Adds proto that will be unlocked by the research node.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilderExtensions.AddShipPartToUnlock(Mafi.Core.Research.ResearchNodeProtoBuilder.State,Mafi.Core.Fleet.FleetEntityPartProto.ID)">
            <summary>
            Adds proto that will be unlocked by the research node.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilderExtensions.AddProductToUnlock(Mafi.Core.Research.ResearchNodeProtoBuilder.State,Mafi.Core.Products.ProductProto.ID,System.Boolean,System.Boolean)">
            <summary>
            Adds proto that will be unlocked by the research node.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilderExtensions.AddRecipeToUnlock(Mafi.Core.Research.ResearchNodeProtoBuilder.State,Mafi.Core.Factory.Recipes.RecipeProto.ID,Mafi.Core.Products.ProductProto.ID)">
            <summary>
            Adds proto that will be unlocked by the research node.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilderExtensions.AddRecipeToUnlock(Mafi.Core.Research.ResearchNodeProtoBuilder.State,Mafi.Core.Factory.Recipes.RecipeProto.ID,System.Boolean)">
            <summary>
            Adds proto that will be unlocked by the research node.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilderExtensions.AddAllRecipesOfMachineToUnlock(Mafi.Core.Research.ResearchNodeProtoBuilder.State,Mafi.Core.Factory.Machines.MachineProto.ID)">
            <summary>
            Adds proto that will be unlocked by the research node.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilderExtensions.AddTransportToUnlock(Mafi.Core.Research.ResearchNodeProtoBuilder.State,Mafi.Core.Entities.Static.StaticEntityProto.ID)">
            <summary>
            Adds proto that will be unlocked by the research node.
            </summary>
        </member>
        <member name="M:Mafi.Core.Research.ResearchNodeProtoBuilderExtensions.AddVehicleToUnlock(Mafi.Core.Research.ResearchNodeProtoBuilder.State,Mafi.Core.Entities.Dynamic.DynamicEntityProto.ID)">
            <summary>
            Adds proto that will be unlocked by the research node.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Trees.TreeId.Position">
            <summary>
            Underlying Tile2i value of this Id.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Trees.DesignateHarvestedTreesCmd">
            <summary>
            Adds or removes all trees in the specified area to/from the set of trees to be harvested. The area is represented
            by rectangle area specified by two tile positions.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Trees.DesignateHarvestedTreesCmd.AddToHarvest">
            <summary>
            Whether trees are to be added to the set of trees to harvest, or removed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Trees.DesignateHarvestedTreesCmd.HarvestedProductId">
            <summary>
            If set, only trees with given harvested product will be selected.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Trees.TreeManager.m_partiallyHarvested">
            <summary>
            Trees that were partially harvested.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Trees.TreeManager.m_removedTreesCreatedWithTerrainGenerator">
            <summary>
            A set of trees that were created by terrain generator but removed later during game.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Trees.TreeManager.HarvestTree(Mafi.Core.Terrain.Trees.TreeId)">
            <summary>
            Removes a tree from a terrain and returns the products from the tree.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Trees.ITreeManager.TreesCount">
            <summary>
            Total number of trees in the game.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Trees.ITreeManager.TreeAdded">
            <summary>
            Invoked immediately when a tree is added. This event not invoked for trees generated on terrain with
            terrain generators.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Trees.ITreeManager.TreeRemoved">
            <summary>
            Invoked immediately when a tree is removed.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Trees.ITreeManager.TreeAddedToHarvest">
            <summary>
            Invoked after a tree is selected to harvest.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Trees.ITreeManager.TreeRemovedFromHarvest">
            <summary>
            Invoked after a tree is removed from trees to harvest.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Trees.ITreeManager.TryAddTree(Mafi.Core.Terrain.Trees.TreeData)">
            <summary>
            Adds a new tree to the world. The target tile should have no trees.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Trees.ITreeManager.TryRemoveTree(Mafi.Core.Terrain.Trees.TreeId)">
            <summary>
            Removes an existing tree from the world.
            </summary>
        </member>
        <member name="E:Mafi.Core.Terrain.Trees.ITreeManager.TileHeightUnderTreeChanged">
            <summary>
            Invoked when height of a tile with tree is changed.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Trees.ITreeHarvestingManager">
            <summary>
            An interface for harvesting trees.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Trees.ITreeHarvestingManager.AddToHarvest(Mafi.Core.Terrain.Trees.TreeId)">
            <summary>
            Selects an existing tree to harvest.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Trees.ITreeHarvestingManager.RemoveFromHarvest(Mafi.Core.Terrain.Trees.TreeId)">
            <summary>
            Removes a selected tree from harvest.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Trees.ITreeHarvestingManager.TryReserveTree(Mafi.Core.Terrain.Trees.TreeId)">
            <summary>
            Reserves a tree for harvesting.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Trees.ITreeHarvestingManager.TryCancelTreeReservation(Mafi.Core.Terrain.Trees.TreeId)">
            <summary>
            Releases harvesting reservation for a tree.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Trees.ITreeHarvestingManager.FindClosestTreeForHarvestFor(Mafi.Core.Entities.Dynamic.Vehicle,Mafi.Core.Products.ProductProto.ID)">
            <summary>
            Finds the closest tree which is not reserved. Selected trees have precedence.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Trees.ITreeHarvestingManager.HarvestTree(Mafi.Core.Terrain.Trees.TreeId)">
            <summary>
            Harvests a tree.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Trees.ITreeHarvestingManager.HarvestTreePartially(Mafi.Core.Terrain.Trees.TreeId,Mafi.Quantity)">
            <summary>
            Harvests a tree up to the given quantity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Trees.TreeProto.ProductWhenHarvested">
            <summary>
            Product that is obtained when this tree is harvested.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.DesignationData.WithinChunkRelCoord">
            <summary>
            Relative chunk coordinate withing terrain chunk.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.DesignationData.ChunkCoord">
            <summary>
            Coordinate of terrain chunk this designation is on.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Designation.TerrainDesignation">
            <summary>
            Terrain height designation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.SIZE_BITS">
            <summary>
            Designations size in bits.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.SIZE_TILES">
             <summary>
             Designation size in tiles is 4.
             </summary>
             <remarks>
             By making default terrain designation larger than 1x1 we decrease micro-management with terrain designation,
             make the visualization nicer, and mining less scary. Designation size also sets the steepness of ramps.
            
             The size 4x4 was chosen so that they are aligned with terrain chunks to make rendering more efficient
             and to allow more flexibility during mine designation. Other options were 2x2 which is too small and 8x8
             which is too large.
             </remarks>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.ASSERT_DIVIDES_CHUNK_SIZE">
            <summary>
            Asserts that designation size divides terrain chunk without remainder.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.DESIGNATIONS_PER_CHUNK">
            <summary>
            Number of designations per terrain chunk.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.AREA_TILES_NO_OVERLAP">
            <summary>
            Total number of affected tiles by a designation considering not counting overlapping tiles.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.USED_BITS_COUNT">
            <summary>
            Number of used bits in the bit masks.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.USED_BITS_MASK">
            <summary>
            A mask that has 1 for all used bits and 0 for unused bits.
            Bits are ordered from LSB in row-major order starting with row y=0.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.ASSERT_BITMAP_SIZE">
            <summary>
            Asserts that bit mask of all tile vertices in area can be represented with 32 bit integer.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.PLUS_X_EDGE_MASK">
            <summary>
            Masks all tile vertices at +X edge.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.PLUS_Y_EDGE_MASK">
            <summary>
            Masks all tile vertices at +Y edge.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.MINUS_X_EDGE_MASK">
            <summary>
            Masks all tile vertices at -X edge.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.MINUS_Y_EDGE_MASK">
            <summary>
            Masks all tile vertices at -Y edge.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.PERIMETER_MASK">
            <summary>
            Masks all tile vertices around the perimeter.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.MASK_FOR_EDGE">
            <summary>
            Edges indexed by `NeighborCoord`.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.GetOrigin(Mafi.Tile2i)">
            <summary>
            Returns origin tile of designation from given position.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.GetCenterTileForOrigin(Mafi.Tile2i)">
            <summary>
            Returns center tile of a designation given an origin tile.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.Prototype">
            <summary>
            Prototype of this designation.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.TerrainDesignation.OriginTileCoord">
            <summary>
            Origin tile coord of this designation. Origin is always at whole multiples of <c>SIZE_TILES</c>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.TerrainDesignation.CenterTileCoord">
            <summary>
            Tile at the center of this designation.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.TerrainDesignation.IsDestroyed">
            <summary>
            Whether this designation was destroyed and is no longer valid.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.TerrainDesignation.Data">
            <summary>
            Designated height at origin.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.TerrainDesignation.IsFlat">
            <summary>
            Whether this designation is flat. That's when all four heights are identical. This value is cached to allow
            fast queries.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.TerrainDesignation.MinTargetHeight">
            <summary>
            Minimal target height of this designation. This value is cached to allow fast queries.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.TerrainDesignation.MaxTargetHeight">
            <summary>
            Maximal target height of this designation. This value is cached to allow fast queries.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.TerrainDesignation.NumberOfJobsAssigned">
            <summary>
            Number of jobs that are taking care of fulfilling this designation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.m_tilesFulfilledBitmap">
            <summary>
            Bit is set when a tile is fulfilled. All unused bits are zero.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.TerrainDesignation.IsFulfilled">
            <summary>
            Whether this designation is fulfilled.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.TerrainDesignation.IsReadyToBeFulfilled">
            <summary>
            Whether this designation is ready to be fulfilled. Designation is ready to be fulfilled if any of its
            perimeter tiles is ready to be fulfilled.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignation.ManagedByTowers">
            <summary>
            All mine towers that manage this area.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.CanBeAssigned(System.Boolean)">
            <summary>
            Whether this designation is assigned to some dynamic entity.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.TileChanged(Mafi.Core.Terrain.TerrainTile)">
            <summary>
            Called by <see cref="T:Mafi.Core.Terrain.Designation.ITerrainDesignationsManager"/> when a tile under this designation is changed.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.ContainsPosition(Mafi.Tile2i)">
            <summary>
            Whether this designation contains given position.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.IsFulfilledAt(Mafi.Tile2i)">
            <summary>
            Whether tile of this designation is fulfilled.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.IsFulfilledAt(Mafi.RelTile2i)">
            <summary>
            Whether relative tile of this designation is fulfilled.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.IsFlatTowards(Mafi.NeighborCoord)">
            <summary>
            Whether this designation has flat edge towards given direction.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.IsRampUpTowards(Mafi.RelTile2i)">
            <summary>
            Whether this designation is ramp-up in given direction.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.GetRampUpDirection">
            <summary>
            Returns unit vector that represents up-direction, or zero vector for flat ramps. Both components may be set
            to non-zero for designations with slopes in both X and Y directions. Magnitude of components is height
            difference, usually 1.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.IsFulfilledTowards(Mafi.NeighborCoord)">
            <summary>
            Whether this designation is fulfilled at edge towards given direction.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.GetTargetHeightAt(Mafi.Tile2i)">
            <summary>
            Returns target height for a given position. This is computed using bi-linear interpolation. Requested
            position should lie in this designation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.GetTargetCoordAt(Mafi.RelTile2i)">
            <summary>
            Extends given coordinate for target height. This assumes that given coordinate belongs to this designation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.ForEachTile(System.Action{Mafi.Core.Terrain.TerrainTile})">
            <summary>
            Calls given function on every tile of this designation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.ForEachTile(System.Action{Mafi.Core.Terrain.TerrainTile,Mafi.HeightTilesF})">
            <summary>
            Calls given function on every tile of this designation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.ForEachTileOrBreak(System.Func{Mafi.Core.Terrain.TerrainTile,Mafi.HeightTilesF,System.Boolean})">
            <summary>
            Calls given function on every tile of this designation. If the function returns false, the loop over tiles is
            terminated and current tile is returned. Otherwise, when the function returns true for all tiles, None is
            returned.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.FindBestTile(System.Func{Mafi.Core.Terrain.Designation.TerrainDesignation,Mafi.Core.Terrain.TerrainTile,Mafi.RelTile2i,Mafi.Fix32},Mafi.Fix32@)">
            <summary>
            Finds a tile with the minimal cost based on given cost function. The cost function can return
            <see cref="P:Mafi.Fix32.MaxValue"/> for tiles that should not be considered. If all tiles return that value, null
            is returned.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.getMask(Mafi.Tile2i)">
            <summary>
            Returns bit mask for given absolute position. This position must be on this designation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.getMask(Mafi.RelTile2i)">
            <summary>
            Returns bit mask for given relative coordinate. This coordinate must be on this designation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignation.updateBitmaps(Mafi.Core.Terrain.TerrainTile,Mafi.HeightTilesF)">
            <summary>
            Updates all bitmap states for the given tile. This should be called whenever a tile height is changed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignationsManager.MAX_EXTRA_NEARBY_AREAS_MAX_DIST">
            <summary>
            Extra search radius of 3 means all valid designations with manhattan distance 3 designations around
            the best designations are also returned.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.TerrainDesignationsManager.DesignationAdded">
            <summary>
            Invoked when new designation is added. Always raised on Sim thread.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.TerrainDesignationsManager.DesignationFulfilledChanged">
            <summary>
            Invoked when the designation state is changed for example its fulfilled state. Always raised on Sim thread.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.TerrainDesignationsManager.DesignationRemoved">
            <summary>
            Invoked when new designation is removed. Always raised on Sim thread.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.TerrainDesignationsManager.DesignationManagedTowersChanged">
            <summary>
            Invoked when <see cref="F:Mafi.Core.Terrain.Designation.TerrainDesignation.ManagedByTowers"/> changes.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.TerrainDesignationsManager.DesignationReachabilityChanged">
            <summary>
            Invoked <see cref="!:TerrainDesignation.IsReachable"/> changes. TODO: This will be killed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignationsManager.m_designations">
            <summary>
            All managed designations. Is mutated only on sim thread.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Designation.TerrainDesignationsManager.m_notFulfilledAreas">
            <summary>
            All not fulfilled designations for easier search.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignationsManager.GetCanonicalDesignationRange(Mafi.Tile2i,Mafi.Tile2i,Mafi.Tile2i@,Mafi.Tile2i@)">
            <summary>
            Returns min and max area origin between two given coords. Size of returned area is clamped to <see
            cref="F:Mafi.Core.Terrain.Designation.TerrainDesignationsManager.MAX_DESIGNATION_AREA_SIZE"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignationsManager.GetDesignationAt(Mafi.Tile2i)">
            <summary>
            Returns designated area on given tile coordinate.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDesignationsManager.HasDesignationAt(Mafi.Tile2i)">
            <summary>
            Whether there is any designation at given coord.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Designation.TerrainDumpingManager.ProductsAllowedToDump">
            <summary>
            Products that are allowed to be dumped globally.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDumpingManager.AddProductToDump(Mafi.Core.Products.LooseProductProto)">
            <summary>
            Makes the given product to be allowed to be dumped.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.TerrainDumpingManager.RemoveProductToDump(Mafi.Core.Products.LooseProductProto)">
            <summary>
            Removes the given product from the allowed dumpable products.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Designation.UnreachableTerrainDesignationsManager">
             <summary>
             Manages unreachable designations for vehicles.
             </summary>
             <remarks>
             Anyone (typically jobs) can report designations are unreachable. These are cached and can be filtered out
             when searching for new jobs.
            
             If no designations are reachable, `ReportNoAvailableDesignationsFor` should be called. If this is called many
             times, unreachable designations cache is cleared.
            
             TODO: Better cache clearing.
             </remarks>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.UnreachableTerrainDesignationsManager.ReportNoAvailableDesignationsFor(Mafi.Core.Entities.Dynamic.Vehicle)">
            <summary>
            Reports that no designations were found during recent search.
            </summary>
            <remarks>However, since we may try to search for multiple sets of designations during job search,
            this does not mean that there are absolutely no designations for the given vehicle.</remarks>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.UnreachableTerrainDesignationsManager.ClearUnreachableCacheFor(Mafi.Core.Entities.Dynamic.Vehicle)">
            <summary>
            This MUST be called for all vehicles that are operating on designations,
            for example when no designations were found.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Designation.DesignationDataFactory">
            <summary>
            Helper class that helps with designation creation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.DesignationDataFactory.UpdateDesignationExtension(Mafi.Core.Terrain.Designation.ITerrainDesignationsManager,Mafi.Core.Terrain.Designation.TerrainDesignationProto,Mafi.Core.Terrain.Designation.DesignationData,Mafi.Tile2i,System.Action{Mafi.Core.Terrain.Designation.TerrainDesignationProto,Mafi.Core.Terrain.Designation.DesignationData},System.Action{Mafi.Core.Terrain.Designation.TerrainDesignationProto,Mafi.Core.Terrain.Designation.DesignationData},Mafi.Collections.Dict{Mafi.Tile2i,Mafi.Core.Terrain.Designation.DesignationData})">
            <summary>
            Extends given designation to area specified by <paramref name="extensionEnd"/>.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Designation.ITerrainDesignationBlockingEntityNoEdgeProto">
            <summary>
            Marked proto of layout entity entity will block terrain designations but not on their edge.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.ITerrainDesignationsManagerInternal.TryAddAssignedJob(Mafi.Core.Terrain.Designation.TerrainDesignation,Mafi.Core.Vehicles.Jobs.IVehicleJob,System.Int32@)">
            <summary>
            Return new number of jobs assigned.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.ITerrainDesignationsManagerInternal.RemoveAssignedJob(Mafi.Core.Terrain.Designation.TerrainDesignation,Mafi.Core.Vehicles.Jobs.IVehicleJob)">
            <summary>
            Return new number of jobs assigned. Does assert if remove fails.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.ITerrainDesignationsManagerInternal.GetAssignedJobsFor(Mafi.Core.Terrain.Designation.TerrainDesignation)">
            <summary>
            Return jobs assigned or empty IIndexable.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.ITerrainDumpingManager.TryFindClosestReadyToDump(Mafi.Tile2i,Mafi.Core.Products.LooseProductProto,Mafi.Core.Entities.Dynamic.Vehicle,Mafi.Core.Terrain.Designation.TerrainDesignation@,System.Boolean,System.Predicate{Mafi.Core.Terrain.Designation.TerrainDesignation},Mafi.Collections.Lyst{Mafi.Core.Terrain.Designation.TerrainDesignation})">
            <summary>
            Finds the closest designation that is ready to be dumped at.
            If the <paramref name="additionalNearbyDesignations"/> is set and some designation is found, additional
            designations around in radius of <paramref name="alsoSearchNearbyInRadius"/> designations will be added.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.ITerrainDumpingManager.AddProductToDump(Mafi.Core.Products.LooseProductProto)">
            <summary>
            Makes the given product to be allowed to be dumped.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Designation.ITerrainDumpingManager.RemoveProductToDump(Mafi.Core.Products.LooseProductProto)">
            <summary>
            Removes the given product from the allowed dumpable products.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Generation.Generators.CellEdgeTerrainGenerator.TopRadius">
            <summary>
            Radius of area on top of the edge before transition starts.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Generation.Generators.LineBlobTerrainResourceGenerator">
            <summary>
            Resource generator that creates resource in a blobby capsule shape around a given line.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Generation.Generators.TreesResourceGenerator">
            <summary>
            Resource generator that creates resource in a blobby capsule shape around a given line.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Generation.FlatTerrainChunkGenerator">
            <summary>
            Chunk generator that generates flat terrain.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.ICellEdgeResourceGeneratorFactory.GetGeneratorsCount(Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Map.CellEdge})">
            <summary>
            Returns total number of generators that should be spawned in between terrain cells using <see cref="M:Mafi.Core.Terrain.Generation.ICellEdgeResourceGeneratorFactory.Spawn(Mafi.Core.Map.CellEdge,Mafi.Fix32)"/>
            according to probabilities given by <see cref="M:Mafi.Core.Terrain.Generation.ICellEdgeResourceGeneratorFactory.GetSpawnProbability(Mafi.Core.Map.CellEdge,System.Boolean)"/>. This is queried only once before any
            generators are spawned.
            </summary>
            <remarks>
            It may happen that not all generators can be spawned if there is not enough of eligible edges. Spawning is
            probabilistic with limited number of trials.
            </remarks>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.ICellEdgeResourceGeneratorFactory.GetSpawnProbability(Mafi.Core.Map.CellEdge,System.Boolean)">
            <summary>
            Returns probability of spawning this resource on a border between the two given neighboring cell. Only one
            generator is allowed at each border.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.ICellEdgeResourceGeneratorFactory.Spawn(Mafi.Core.Map.CellEdge,Mafi.Fix32)">
            <summary>
            Creates resource generator for an edge between the two given neighboring cells. The multiplier should control
            amount of the resource. Value 2.0 should spawn generator that creates roughly 2x of the resource.
            IMPORTANT: The multiplier already captures compensation for the cell size, distance from the original cell,
            and player settings.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.ICellResourceGeneratorFactory.GetGeneratorsCount(Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Map.MapCell})">
            <summary>
            Returns total number of generators that should be spawned on the terrain cells using <see cref="M:Mafi.Core.Terrain.Generation.ICellResourceGeneratorFactory.Spawn(Mafi.Core.Map.MapCell,Mafi.Fix32)"/>
            according to probabilities given by <see cref="M:Mafi.Core.Terrain.Generation.ICellResourceGeneratorFactory.GetSpawnProbability(Mafi.Core.Map.MapCell,System.Boolean)"/>. This is queried only once before any
            generators are spawned.
            </summary>
            <remarks>
            It may happen that not all generators can be spawned if there is not enough of eligible cells. Spawning is
            probabilistic with limited number of trials.
            </remarks>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.ICellResourceGeneratorFactory.GetSpawnProbability(Mafi.Core.Map.MapCell,System.Boolean)">
            <summary>
            Returns probability of spawning this resource on given cell.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.ICellResourceGeneratorFactory.Spawn(Mafi.Core.Map.MapCell,Mafi.Fix32)">
            <summary>
            Creates resource generator for given cell. The multiplier should control amount of the resource. Value 2.0
            should spawn generator that yields roughly 2x of the resource.
            IMPORTANT: The multiplier already captures compensation for the cell size, distance from the original cell,
            and player settings.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.ICellVirtualResourceFactory.GetResourcesCount(Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Map.MapCell})">
            <summary>
            Returns total number of resources that should be spawned on the terrain cells using <see cref="M:Mafi.Core.Terrain.Generation.ICellVirtualResourceFactory.Spawn(Mafi.Core.Map.MapCell,Mafi.Fix32)"/>
            according to probabilities given by <see cref="M:Mafi.Core.Terrain.Generation.ICellVirtualResourceFactory.GetSpawnProbability(Mafi.Core.Map.MapCell,System.Boolean)"/>. This is queried only once before any
            generators are spawned.
            </summary>
            <remarks>
            It may happen that not all factories can be spawned. Spawning is probabilistic with limited number of trials.
            </remarks>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.ICellVirtualResourceFactory.GetSpawnProbability(Mafi.Core.Map.MapCell,System.Boolean)">
            <summary>
            Returns probability of spawning this resource on given cell.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.ICellVirtualResourceFactory.Spawn(Mafi.Core.Map.MapCell,Mafi.Fix32)">
            <summary>
            Creates resource generator for given cell. The multiplier should control amount of the resource. Value 2.0
            should spawn generator that yields roughly 2x of the resource.
            IMPORTANT: The multiplier already captures compensation for the cell size, distance from the original cell,
            and player settings.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.IGlobalResourceGeneratorFactory.GetGenerator">
            <summary>
            Creates resource generator that will be invoked on all chunks.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Generation.IResourceGeneratorFactory.Name">
            <summary>
            Name of the factory for easier identification in development.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Generation.IResourceGeneratorFactory.Priority">
            <summary>
            Priority for the generator. Generators will be called in ascending order (low numbers first). Order of
            generators with the same <see cref="P:Mafi.Core.Terrain.Generation.IResourceGeneratorFactory.Priority"/> is undefined.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Generation.IResourceGeneratorFactory.GenerateNearStartLocation">
            <summary>
            Whether to generate this resource close to starting location.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Generation.ITerrainChunkGenerator">
            <summary>
            Defines interface for generation of terrain chunks. This interface is chunk-based not tile-bases so that the
            generator can optimize generation of the whole chunk.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.ITerrainChunkGenerator.InitializeTerrainGeneration(Mafi.Core.Map.IslandMap)">
            <summary>
            Initializes terrain generation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.ITerrainChunkGenerator.GenerateChunk(Mafi.Chunk2i)">
            <summary>
            Generates data for given chunk coordinate. This method MUST be thread safe!
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Generation.TileTerrainData.Products">
            <summary>
            Products under the surface from bottom to top.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Generation.ITerrainResource.Name">
            <summary>
            Name for human identification and debugging. Not displayed to the player.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Generation.ITerrainResource.Position">
            <summary>
            Approximate center position of this resource generator.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Generation.ITerrainResource.MaxRadius">
            <summary>
            Approximate radius of this resource. A circle at <see cref="P:Mafi.Core.Terrain.Generation.ITerrainResource.Position"/> with this radius should contain the
            entire resource.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Generation.ITerrainResource.Priority">
            <summary>
            Priority of generation. Generators will be called in ascending order (low numbers first). Note that this
            number is just a sorting hint. Changing this after the initial sort will have no effect.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Generation.ITerrainResource.ResourceColor">
            <summary>
            Color of the resource. This is for UI.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.ITerrainResource.Initialize(Mafi.Core.Map.IslandMap)">
            <summary>
            Called once at the end of map construction.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.ITerrainResourceGenerator.CreateChunkGenerator(Mafi.Chunk2i)">
            <summary>
            Creates chunk generator. Note that multiple chunk generators might be requested from different threads.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.ITerrainResourceChunkGenerator.GenerateResource(Mafi.Tile2i,Mafi.Core.Terrain.Generation.TerrainGenerationBuffer)">
            <summary>
            Generates resource on given tile. This should be thread safe.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.ITerrainResourceChunkGenerator.ChunkGenerationDone">
            <summary>
            Chunk generation is done, this generator can be disposed.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Generation.IVirtualTerrainResource">
            <summary>
            Terrain resource that is not physically present in the terrain tiles but is still mineable through special API.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.IVirtualTerrainResource.IsAt(Mafi.Tile2i)">
            <summary>
            Whether this resource is present at given tile.
            </summary>
            <remarks>Use this to filter all usable resources for particular tile.</remarks>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.IVirtualTerrainResource.GetApproxThicknessAt(Mafi.Tile2i)">
            <summary>
            Returns approximate thickness at given tile.
            </summary>
            <remarks>
            This is for the resources exploration API. Measuring virtual resources in thickness might not be sensible so
            thi method returns approximate thickness so that API for terrain resources and virtual resources matches.
            </remarks>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.IVirtualTerrainResource.MineResourceAt(Mafi.Tile2i,Mafi.Quantity)">
            <summary>
            Mines this resource at given tile.
            </summary>
            <remarks>
            The <paramref name="maxQuantity"/> should represent reasonable max mined amount for the particular mining
            approach. The resource implementation may choose to return less than than but not more.
            </remarks>
        </member>
        <member name="T:Mafi.Core.Terrain.Generation.MapCellTerrainChunkGenerator">
            <summary>
            Generates terrain based on the <see cref="T:Mafi.Core.Map.IslandMap"/>.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer">
            <summary>
            Helper class for building contents of a tile.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.m_materials">
            <summary>
            Product ranges are ordered from bottom to top (ascending order) and are non-overlapping. Exclusive end of
            range at index `i` is less or equal than inclusive start of range at `i+1`. Every method must maintain this
            invariant.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.BaseSurfaceHeight">
            <summary>
            Base surface height set for this buffer. All the thicknesses are relative to this height.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.SurfaceHeight">
            <summary>
            Current surface height. This is equal to the height of the last product or to <see cref="P:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.BaseSurfaceHeight"/>
            if there are no products.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.TreeData">
            <summary>
            Tree on this tile.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.Initialize(Mafi.HeightTilesF)">
            <summary>
            Initializes this buffer by setting <see cref="P:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.BaseSurfaceHeight"/>. This should be called once before any
            other operations. Method <see cref="M:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.Clear"/> clears the initialization.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.DepositOnTop(Mafi.Core.Products.TerrainMaterialProto,Mafi.ThicknessTilesF)">
            <summary>
            Adds given material on top of the current buffer. If there is nothing in the buffer the material is added on
            top of <see cref="P:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.BaseSurfaceHeight"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.RemoveFromTop(Mafi.ThicknessTilesF)">
            <summary>
            Removes products of given thickness from top. This only clears extra products and does not move relative
            buffer height. Does nothing when there are no extra products in the buffer. Logical inverse of <see
            cref="M:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.DepositOnTop(Mafi.Core.Products.TerrainMaterialProto,Mafi.ThicknessTilesF)"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.SetProductInRange(Mafi.Core.Products.TerrainMaterialProto,Mafi.HeightTilesF,Mafi.HeightTilesF,System.Boolean)">
            <summary>
            Sets product in given height range. If <paramref name="replaceOtherProducts"/> is set, other products in
            specified range will be removed and this product will replace them. Otherwise, only empty space will be
            filled with new product.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.SetProductInRange(Mafi.Core.Products.TerrainMaterialProto,Mafi.ThicknessTilesF,Mafi.ThicknessTilesF,System.Boolean)">
            <summary>
            Sets product relative to the surface height. If <paramref name="replaceOtherProducts"/> is set, other
            products in specified range will be removed and this product will replace them. Otherwise, only empty space
            will be filled with new product.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.ClearRange(Mafi.HeightTilesF,Mafi.HeightTilesF)">
            <summary>
            Clear any products from given range.
            </summary>
            <param name="start">Inclusive start of cleared range.</param>
            <param name="end">Exclusive end of cleared range.</param>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.ClearRange(Mafi.ThicknessTilesF,Mafi.ThicknessTilesF)">
            <summary>
            Clear any products from given range.
            </summary>
            <param name="start">Inclusive start of cleared range.</param>
            <param name="end">Exclusive end of cleared range.</param>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.ClearAbove(Mafi.HeightTilesF)">
            <summary>
            Clears all products from <paramref name="startHeight"/> above.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.AddNewSurfaceProduct(Mafi.Core.Products.TerrainMaterialProto,Mafi.HeightTilesF,Mafi.ThicknessTilesF,Mafi.Percent)">
            <summary>
            Adds new product on the surface to the given height with given thickness. This product will replace current
            products. The <paramref name="replacementIntensity"/> specifies how strongly to remove current products,
            value 1.0 will cause current products to be completely removed and replaced by the new product. Value 0.0
            will leave the current product at its height. New product is placed only if the current product is lower then
            new one after removal caused by <paramref name="replacementIntensity"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.GetThicknessesStack(Mafi.Core.Products.TerrainMaterialProto,Mafi.Collections.Lyst{Mafi.Core.Terrain.TerrainMaterialThicknessSlim})">
            <summary>
            Transforms internal representation into list of thicknesses and surface height. This also removes layers of
            material that are thinner than 0.5 tiles. Returned thicknesses are from bottom to top.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.ProductRange.Start">
            <summary>
            Inclusive start thickness.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Generation.TerrainGenerationBuffer.ProductRange.End">
            <summary>
            Exclusive end thickness.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Generation.GeneratedTerrainData.TryGetTileDataOrDummy(Mafi.Tile2i,Mafi.Core.Terrain.Generation.TileTerrainData@)">
            <summary>
            Tries to return tile data at given coordinate. Returned struct is a copy and it should be used only fo
            reading. Use <see cref="M:Mafi.Core.Terrain.Generation.GeneratedTerrainData.TryGetTileDataRef(Mafi.Tile2i,System.Boolean@)"/> if you with to mutate data.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Physics.NoTerrainPhysicsSimulator">
            <summary>
            Does no terrain physics simulation.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Physics.NoTerrainSurfaceSimulator">
            <summary>
            Does no terrain surface simulation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Physics.TerrainPhysicsSimulator.NEIGHBOR_TRIGGER_CHANCE">
            <summary>
            Chance of falling tile triggering height check of neighboring tiles.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Physics.TerrainSurfaceSimulator.TILE_UPDATE_RATE">
            <summary>
            Number of ticks between checking surface disruption of each tile.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Physics.TerrainSurfaceSimulator.m_updatesQueue">
            <summary>
            Circular buffer for tiles to process.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Physics.TerrainSurfaceSimulator.m_currentQueueIndex">
            <summary>
            Index into <see cref="F:Mafi.Core.Terrain.Physics.TerrainSurfaceSimulator.m_updatesQueue"/> of currently processed queue.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Physics.TerrainSurfaceSimulator.m_currentQueueElementIndex">
            <summary>
            Index of a next element to be processed in the current queue.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Physics.ITerrainPhysicsSimulator.IsProcessingTiles">
            <summary>
            Whether physics simulator has tiles to process on next update.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Physics.ITerrainPhysicsSimulator.Initialize(Mafi.Core.Terrain.TerrainManager)">
            <summary>
            Called once in the TerrainManager constructor. This should be used just to obtain reference to the terrain
            manager.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Physics.ITerrainPhysicsSimulator.TileChanged(Mafi.Core.Terrain.TerrainTile)">
            <summary>
            This is being invoked mostly on height changed but there are some cases where height of a tile can be
            changed without invoking terrain physics, such as flattening when building is placed to prevent landslides
            caused by building placement.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Physics.ITerrainPhysicsSimulator.Update">
            <summary>
            Update method called on the simulation thread.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Physics.ITerrainSurfaceSimulator">
            <summary>
            Implementation of this interface is responsible for simulating surface disruption.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.Physics.ITerrainSurfaceSimulator.IsProcessingTiles">
            <summary>
            Whether physics simulator has tiles to process on next update.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Physics.ITerrainSurfaceSimulator.Initialize(Mafi.Core.Terrain.TerrainManager)">
            <summary>
            Called once in the TerrainManager constructor. This should be used just to obtain reference to the terrain
            manager.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Physics.ITerrainSurfaceSimulator.Update">
            <summary>
            Update method called on the simulation thread.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Physics.ITerrainSurfaceSimulator.Clear">
            <summary>
            Clears or scheduled disruption events.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.OceanTerrainManager.OCEAN_THRESHOLD">
            <summary>
            A tile is no longer considered an ocean if the terrain height is at or above this height.
            </summary>
            <remarks>
            Ocean is rendered at height of 0.5 tiles. The actual threshold is 0.25 tiles so that tiles with ocean have
            some ocean mesh visible. The ocean threshold is above zero so that terrain mined to height 0 is flooded.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Terrain.RectangleTerrainArea2i.Origin">
            <summary>
            The tile with lowest X and Y coordinates in the area.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.RectangleTerrainArea2i.Size">
            <summary>
            Size of the area. Size of zero represents empty area
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.RectangleTerrainArea2i.PlusXCoordExcl">
            <summary>
            +X corner of this area. The actual tile area is not part of this rectangle, only the vertex.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.RectangleTerrainArea2i.PlusYCoordExcl">
            <summary>
            +Y corner of this area. The actual tile area is not part of this rectangle, only the vertex.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.RectangleTerrainArea2i.PlusXyCoordExcl">
            <summary>
            +XY corner of this area. The actual tile area is not part of this rectangle, only the vertex.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.RectangleTerrainArea2i.ExtendBy(Mafi.RelTile2i)">
            <summary>
            Extends or shrinks the area (works for negative sizes).
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.RectangleTerrainArea2i.ExtendBy(System.Int32)">
            <summary>
            Extends or shrinks the area (works for negative sizes).
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.RectangleTerrainArea2i.EnumerateTiles">
            <summary>
            Enumerates tiles in this area, inclusive on +x, +y boundaries.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.RectangleTerrainArea2i.EnumerateTileVertices">
            <summary>
            Enumerates tile corners in this area, inclusive on +x, +y boundaries.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.RectangleTerrainArea2i.EnumerateTileVertices(Mafi.Core.Terrain.TerrainManager)">
            <summary>
            Enumerates tile corners in this area, inclusive on +x, +y boundaries.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.RectangleTerrainArea2i.EnumerateTileVerticesWithoutBoundary">
            <summary>
            Enumerates only internal points that do not lie on the boundary of this area.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.RectangleTerrainArea2i.EnumerateTileVerticesBoundary">
            <summary>
            Enumerates only boundary vertices of this area.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.RectangleTerrainArea2i.EnumerateChunks">
            <summary>
            Enumerates all affected chunks of tiles inside of this area (not affected vertices!).
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.RectangleTerrainArea2iRelative.Origin">
            <summary>
            The tile with lowest X and Y coordinates in the area.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.RectangleTerrainArea2iRelative.Size">
            <summary>
            Size of the area. Size of zero represents empty area
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainChunk.BITS_TILES_PER_EDGE">
            <summary>
            Number of bits used to represent tiles per edge.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainChunk.MASK_LOCAL_COORD">
            <summary>
            Bit mask that masks tile coordinate local to the chunk.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainChunk.TILES_PER_EDGE">
            <summary>
            Number of tiles per chunk edge. Must be power of two.
            </summary>
            <remarks>
            Value of 64 was carefully picked to be a balance between large tiles that does not have many seams and can be
            effectively used with LOD and small tiles that can do fast updates of data to GPU. Values of 128 or 32 are
            also feasible but not without rigorous testing.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainChunk.MAX_LOCAL_COORD">
            <summary>
            Maximum value of a local coordinate.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainChunk.TILES_PER_CHUNK">
            <summary>
            Number of <see cref="T:Mafi.Core.Terrain.TerrainTile"/> per one <see cref="T:Mafi.Core.Terrain.TerrainChunk"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainChunk.CreatePhantom(Mafi.Core.Terrain.TerrainManager)">
            <summary>
            Creates phantom chunk for given terrain. Only one phantom chunk per terrain is allowed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainChunk.ChunkCoord">
            <summary>
            Coordinate of this chunk.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainChunk.Manager">
            <summary>
            Manager of this chunk.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainChunk.TilesData">
            <summary>
            Row-major linearized storage for terrain tiles. Index with <c>y * TILES_PER_EDGE + x</c>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainChunk.OccupancyOverflowData">
            <summary>
            Overflow data for tile occupancy.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainChunk.m_neighbors">
            <summary>
            Chunk neighbors indexed by <see cref="T:Mafi.NeighborCoord"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainChunk.HeightChanged">
            <summary>
            Invoked when height of a tile on this chunk is changed. This event is also called when just top material
            changed but height remained the same. Invoked on the simulation thread.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainChunk.TileDisrupted">
            <summary>
            Invoked when surface disruption of a tile on this chunk is changed. Invoked on the simulation thread.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainChunk.TileOccupancyChanged">
            <summary>
            Invoked when tile entity occupancy changes (set of entities on a tile changes). Invoked on the simulation thread.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainChunk.TileCustomSurfaceChanged">
            <summary>
            Invoked when custom tile surface changes. Invoked on the simulation thread.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainChunk.OnTileOceanChanged">
            <summary>
            Invoked when tile ocean flag changes.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainChunk.IsPhantom">
            <summary>
            Whether this tile is the phantom tile.
            </summary>
            <remarks>Only the phantom tile points to itself with neighbors pointers.</remarks>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainChunk.Item(Mafi.TileInChunk2i)">
            <summary>
            Returns tile on given relative tile coordinate. Always returns valid unique tile for given coordinate, never
            null or phantom tile. Note that is this chunk is a phantom returned tile is always phantom tile.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainChunk.Item(Mafi.NeighborCoord)">
            <summary>
            Returns neighbor chunk. Returned chunk is never null. However, the phantom chunk is returned if neighbor is
            not on the terrain.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainChunk.Neighbors">
            <summary>
            All four neighbors of this chunk.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainChunk.PlusXNeighbor">
            <summary>
            Neighbor chunk at (1, 0) relative coordinate. Returned chunk is never null, however, can be phantom for
            non-existent neighbors. TODO: This fails for phantoms and makes tiles stepping also broken.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainChunk.MinusXNeighbor">
            <summary>
            Neighbor chunk at (-1, 0) relative coordinate. Returned chunk is never null, however, can be phantom for
            non-existent neighbors.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainChunk.PlusYNeighbor">
            <summary>
            Neighbor chunk at (0, 1) relative coordinate. Returned chunk is never null, however, can be phantom for
            non-existent neighbors.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainChunk.MinusYNeighbor">
            <summary>
            Neighbor chunk at (0, -1) relative coordinate. Returned chunk is never null, however, can be phantom for
            non-existent neighbors.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainChunk.HasAllFourNeighbors">
            <summary>
            Whether this chunk has all four neighbors non-phantom.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainChunk.#ctor(Mafi.Core.Terrain.TerrainManager,Mafi.Chunk2i)">
            <summary>
            Instantiates new empty chunk. This is intended to be very cheap operation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainChunk.#ctor(Mafi.Chunk2i)">
            <summary>
            Used for phantom.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainChunk.makePhantom">
            <summary>
            Creates a phantom chunk (and tiles). All tile coordinates point to phantom tile, all neighbor references
            are back to itself.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainChunk.computeHasAllNeighbors">
            <summary>
            Computes value of <see cref="P:Mafi.Core.Terrain.TerrainChunk.HasAllFourNeighbors"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainChunk.HasAllEightNeighbors">
            <summary>
            Whether this chunk has all eight neighbors. All primary chunks are guaranteed to have all eight neighbors.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainChunk.Mafi#Core#Terrain#ITerrainChunkFriend#OnHeightChanged(Mafi.Core.Terrain.TerrainTile)">
            <summary>
            Called by the tile itself to avoid registering all HeightChanged events for all tiles.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainChunk.EnumerateBoundaryTiles(Mafi.NeighborCoord)">
            <summary>
            Enumerates tiles among given boundary. Enumeration is always in increasing X/Y direction.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.TerrainChunk.TilesEnumerator">
            <summary>
            Struct enumerator for allocation-free enumeration of tiles.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.TerrainChunk.BoundaryTilesEnumerator">
            <summary>
            Struct enumerator for allocation-free enumeration of boundary tiles.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.TerrainChunk.TilesDataForSerialization">
            <summary>
            Special serializer that only saves changed tiles without the need of intermediate lists.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.TerrainManager">
             <summary>
             Terrain manager controls the implementation details of infinite chunk-based terrain and hides the most of
             terrain-tiling mechanics while offering interface that uses global coordinates to interact with the terrain.
             NOTE: All write-actions have to be performed on the simulation thread.
             </summary>
             <remarks>
             Terrain is composed of <see cref="T:Mafi.Core.Terrain.TerrainChunk"/> s in 2D grid. Every chunk contains a smaller grid of <see
             cref="T:Mafi.Core.Terrain.TerrainTile"/> s.
            
             All non-connected chunk and tile references point to phantom chunk and tile. There are no null references
             pointing to chunk or tile in the terrain.
            
             Terrain manager also provides utility methods that work with multiple grids such as interpolated positions,
             normals, etc.
             </remarks>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainManager.Bedrock">
            <summary>
            Bedrock material for the whole terrain. Bedrock is under all other materials at each tile.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainManager.PhantomChunk">
            <summary>
            Phantom chunk. This chunk is used instead of null pointers on terrain boundaries. Phantom chunk is one unique
            instance per the terrain and all of its neighbors are pointing to itself and all of its tiles are set to
            phantom tile.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainManager.PhantomTile">
            <summary>
            Phantom tile. This tile is used instead of null pointers on terrain boundaries. Phantom tile is one unique
            instance per the terrain and all of its neighbors are pointing to itself.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainManager.ChunkCreated">
            <summary>
            Invoked when a new chunk gets created. Every chunk in game will invoke this even once.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainManager.TerrainDataGenerated">
            <summary>
            Called when terrain gets regenerated during new game or during the load (bool is <c>true</c> when loaded).
            When new game is created, this is called in <c>NewGameCreated</c> stage BEFORE <see cref="P:Mafi.Core.Terrain.TerrainManager.ChunkCreated"/>
            event is called. When the game is loaded, this is called in the <c>InitAfterLoad</c> phase with priority
            <c>InitPriority.High</c>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainManager.HeightChanged">
            <summary>
            Invoked when height of a tile is changed. Can be called multiple times per tile during single sim step.
            Called on simulation thread.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainManager.TileDisrupted">
            <summary>
            Invoked when surface disruption of a tile is changed.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainManager.TileFlagsChanged">
            <summary>
            Invoked when <see cref="P:Mafi.Core.Terrain.TerrainTile.Flags"/> is changed.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainManager.TileIsFlaggedAsOccupiedChanged">
            <summary>
            Invoked when tile's <see cref="P:Mafi.Core.Terrain.TerrainTile.IsFlaggedAsOccupied"/> changes.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainManager.TileOccupancyChanged">
            <summary>
            Invoked when tile occupancy changes. Invoked on the simulation thread.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainManager.OnTileOceanChanged">
            <summary>
            Invoked when tile ocean flag changes.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainManager.m_chunks">
            <summary>
            All chunks on this terrain.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainManager.Chunks">
            <summary>
            All chunks on this terrain.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainManager.m_physicsSimulator">
            <summary>
            Handles time-sliced creation of chunks.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainManager.m_lastUsedFlagsReporterId">
            <summary>
            Last used pathability reporter ID. First few IDs are reserved for the tile itself.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainManager.SavedFlagsMask">
            <summary>
            Masks flags that should be saved.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainManager.TerrainMaterials">
            <summary>
            All terrain materials that can be indexed by their <see cref="T:Mafi.Core.Products.TerrainMaterialSlimId"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainManager.Item(Mafi.Chunk2i)">
            <summary>
            Gets chunk on requested coordinate. Returned chunk is never null. If chunk does not exist the <see
            cref="P:Mafi.Core.Terrain.TerrainManager.PhantomChunk"/> is returned.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainManager.Item(Mafi.Tile2i)">
            <summary>
            Gets a tile on given coordinate. Returned tile is never null. If tile does not exist the <see
            cref="P:Mafi.Core.Terrain.TerrainManager.PhantomTile"/> is returned.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainManager.PathabilityReporters">
            <summary>
            All registered pathability reporters.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainManager.ResolveSlimMaterial(Mafi.Core.Products.TerrainMaterialSlimId)">
            <summary>
            Resolves given slim ID to a full material proto with that ID.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainManager.GetHeight(Mafi.Tile2i)">
            <summary>
            Returns discrete height on given tile coordinate. If tile on given coordinate does not exist the height of
            phantom tile is returned. If the caller is interested in knowing this fact use <see
            cref="M:Mafi.Core.Terrain.TerrainManager.TryGetHeight(Mafi.Tile2i)"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainManager.TryGetHeight(Mafi.Tile2i)">
            <summary>
            Returns discrete height on given tile coordinate if the tile exists. Otherwise returns null.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainManager.GetHeight(Mafi.Tile2f)">
            <summary>
            Returns interpolated absolute terrain height of given global position. Bi-linear interpolation is used to
            obtain height in between tile vertices. If tile on given coordinate does not exist the height of phantom tile
            is returned. If the caller is interested in knowing this fact use <see
            cref="M:Mafi.Core.Terrain.TerrainManager.TryGetHeight(Mafi.Tile2f)"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainManager.TryGetHeight(Mafi.Tile2f)">
            <summary>
            Returns interpolated absolute terrain height of given global position. Bi-linear interpolation is used to
            obtain height in between tile vertices. Returns null if the tile or its neighbors does not exist.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainManager.GetCenterDiscrete(Mafi.Tile2i)">
            <summary>
            Returns discrete position of a tile center.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainManager.GetNewTileFlagReporter(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates new tile flat reporter that can be used to report pathability of tiles. Only ~30 reporters can
            exist in the game.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainMaterialThickness.NoneOf(Mafi.Core.Products.TerrainMaterialProto)">
            <summary>
            Returns zero thickness of given product.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainMaterialThickness.IsEmpty">
            <summary>
            Whether this product's thickness is zero (or negative).
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainMaterialThickness.RemoveAsMuchAs(Mafi.ThicknessTilesF,Mafi.Core.Terrain.TerrainMaterialThickness@)">
            <summary>
            Removes up to <paramref name="maxThicknessRemoved"/> from this quantity and returns amount of removed. Also
            fills up the remainder quantity.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.TerrainOccupancyManager">
             <summary>
             Provides helpful APIs on top of tile occupancy functionality.
            
             All occupancy state is in terrain tile data.
             </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.TerrainTile">
            <summary>
            Tile represents square area on the terrain. The actual tile contains only its coordinate and reference to chunk.
            All data is stored in a large array that is owned by the chunk.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.TerrainTile.Data">
            <summary>
            All data for a terrain tile.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.Data.Materials">
            <summary>
            Storage for all mineable products on this tile on top of bedrock.
            IMPORTANT: Every operation on this stack should adjust the <see cref="F:Mafi.Core.Terrain.TerrainTile.Data.Height"/> accordingly.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.Data.OccupiedData">
            <summary>
            The first record for occupied
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.Data.Height">
            <summary>
            Surface height of this tile.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.Data.Flags">
            <summary>
            Bit map representing up to 16 individual flags of this tile (see <see cref="T:Mafi.Core.Terrain.TileFlagReporter"/>).
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.Data.SurfaceDisruption">
            <summary>
            How much surface is disrupted on scale from 0 to 255.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.SurfaceData.RawValue">
            <summary>
            Raw data (signed) are packed in the following way (from LSB to HSB):
            <code>
            [0-7] (8) surface ID, zero means no surface.
            [8-9] (2) texture rotation.
            [10] (1) is auto-placed.
            [11-18] (8) unused, use for ramps and leave some bits for scale.
            [19-31] (13) signed min height as int, +- 4k range
            </code>
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.TILE_SIZE_M">
            <summary>
            Size of an edge of a tile in meters. This serves as a conversion between tiles and meters.
            </summary>
            <remarks>
            WARNING: Many game decisions and game assets rely on this constant. DO NOT CHANGE IT!! Value of 1 is too
            small. Cubic tile would have only 1 m^3 and single scoop of a big excavator would take tens of them. We do
            not need to be this detailed. Also things like path finding that works with tiles would be slower due to
            additional work. Value of 2 seems good compromise with a nice property that 2 divides 10, so we can measure
            tens of meters by highlighting tiles. Value of 3 is weird and 4 is too much and does not divide 10.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.TILE_AREA_M">
            <summary>
            Area of a tile in squared meters.
            </summary>t
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.TILE_VOLUME_M">
            <summary>
            Volume of a tile in cubic meters.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.MAX_THICKNESS_CHANGE">
            <summary>
            One terrain operation can do at max 5 * tile change per mine method call. The amount is clamped to this
            thickness if more is requested. This serves as a safety mechanism to avoid terrain singularities due to
            errors in computations.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.TileCoord">
            <summary>
            Global tile coordinate.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.Chunk">
            <summary>
            Parent chunk of this tile.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.DataIndex">
            <summary>
            Cached tile data index, a contiguous row-major index. This is used a lot and it is worth the extra 4 bytes.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.#ctor(Mafi.Tile2i,Mafi.Core.Terrain.TerrainChunk)">
            <summary>
            Constructor that should be called only by <see cref="T:Mafi.Core.Terrain.TerrainChunk"/>. All neighbors are initialized to
            Phantom.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.Manager">
            <summary>
            Terrain manager of this tile.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.Bedrock">
            <summary>
            Bedrock of the whole terrain.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.Item(Mafi.NeighborCoord)">
            <summary>
            Returns neighbor tile. Returned tile is never null, however, can be phantom if this tile's parent is not
            primary chunk.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.Item(Mafi.RelTile2i)">
            <summary>
            Returns a tile relative to this tile.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.IsPhantom">
            <summary>
            Whether this tile is a phantom tile.
            </summary>
            <remarks>
            Phantom tile is default instance of this struct. We can detect it by looking at the <see cref="F:Mafi.Core.Terrain.TerrainTile.Chunk"/>
            reference.
            </remarks>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.IsFlaggedAsOccupied">
            <summary>
            Whether this tile has any occupancy flags set. See <see cref="T:Mafi.Core.Terrain.TileFlagReporter"/>. This is completely
            different than <see cref="P:Mafi.Core.Terrain.TerrainTile.IsOccupiedWithEntity"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.CornerTile3f">
            <summary>
            Returns discrete coordinate at the corner of this tile.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.CornerTile2f">
            <summary>
            Returns discrete coordinate at the corner of this tile.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.CenterTile2f">
            <summary>
            Returns discrete coordinate at the center of this tile.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.CenterTile3f">
            <summary>
            Returns discrete coordinate at the center of this tile.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.ChunkCoord2i">
            <summary>
            Coordinate of the parent chunk of this tile.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.RelativeTileCoord">
            <summary>
            Relative coordinate within its parent chunk.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.FullCoord">
            <summary>
            Returns full tile coord including its height.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.TopMaterial">
            <summary>
            Gets top material prototype.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.TopMaterialSlimId">
            <summary>
            Gets top material slim ID. This is more efficient than <see cref="P:Mafi.Core.Terrain.TerrainTile.TopMaterial"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.TopProduct">
            <summary>
            Gets top product prototype (what will be mined).
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.TopMaterialThickness">
            <summary>
            Thickness of the top product.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.TopMaterialAndThicknessSlimOrNone">
            <summary>
            Gets top material slim thickness. This ignores bedrock but is more efficient than
            <see cref="P:Mafi.Core.Terrain.TerrainTile.TopMaterialAndThicknessSlim"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.BelowTopMaterialAndThicknessSlimOrNone">
            <summary>
            Gets below-top material slim thickness. This ignores bedrock but is more efficient than
            <see cref="P:Mafi.Core.Terrain.TerrainTile.TopMaterialAndThicknessSlim"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.BelowTopMaterial">
            <summary>
            Returns material of the second layer. If this tile has only one layer the top product is returned.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.BelowTopMaterialSlimId">
            <summary>
            Returns Slim ID of material of the second layer. If this tile has only one layer the top product is returned.
            This is more efficient than <see cref="P:Mafi.Core.Terrain.TerrainTile.BelowTopMaterial"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.BelowTopProduct">
            <summary>
            Returns mined product of the second layer. If this tile has only one layer the top product is returned.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.GetMaterialAt(System.Int32)">
            <summary>
            Returns info about material at given layer below the surface.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.LayersCount">
            <summary>
            Number of distinct deposits on this tile. This value is always positive. This includes bedrock that is always
            present at some depth.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.IsAtBedrock">
            <summary>
            Whether this tile is mined all the way to the bedrock and there are no other products left. Note that this is
            not equal to <c>TopProduct == bedrock</c> because bedrock can be dumped on the tile and other stuff might bee
            below (like diamonds:)
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.Height">
            <summary>
            Discrete height of this tile.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.HeightTilesIFloored">
            <summary>
            Tile-space height of this tile.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.VerticalTileRemainingThickness">
            <summary>
            Remaining thickness to current vertical tile. Range of this value is [0, TerrainTile.DISCRETE_UNITS - 1].
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.PlusXNeighbor">
            <summary>
            Neighbor tile that is at (+1, 0) relative coordinate from this tile. Returned tile is never null, however, if
            this tile's parent is not primary terrain chunk it can be phantom.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.MinusXNeighbor">
            <summary>
            Neighbor tile that is at (-1, 0) relative coordinate from this tile. Returned tile is never null, however, if
            this tile's parent is not primary terrain chunk it can be phantom.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.PlusYNeighbor">
            <summary>
            Neighbor tile that is at (0, +1) relative coordinate from this tile. Returned tile is never null, however, if
            this tile's parent is not primary terrain chunk it can be phantom.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.MinusYNeighbor">
            <summary>
            Neighbor tile that is at (0, -1) relative coordinate from this tile. Returned tile is never null, however, if
            this tile's parent is not primary terrain chunk it can be phantom.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.HasAllFourNeighbors">
            <summary>
            Whether this tile has all four neighbors non-phantom.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.IsOcean">
            <summary>
            Whether the ocean is on this tile.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.IsNotOcean">
            <summary>
            Whether the ocean is NOT on this tile.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.IsOutsideOfMap">
            <summary>
            Whether this tile is outside of the map.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.IsFlat">
            <summary>
            Whether the tile that extends to +X and +Y neighbors is flat.
            </summary>
            <remarks>
            We intentionally do not take -X and -Y neighbors into account because their height has no effect on the tile
            "square" as perceived by the player.
            </remarks>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainTile.SurfaceDisruption">
            <summary>
            How much surface is disturbed on scale from 0 to 255.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.GetNormal">
            <summary>
            Returns an approximate normal of a tile corner. Returned vector is normalized. The normal is computed based
            on its four neighbors on the tile (top, down, left, right).
            PERF: Relatively expensive.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.GetTileRelative(Mafi.RelTile2i)">
            <summary>
            Returns tile relative to this tile.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.MineMaterial(Mafi.ThicknessTilesF)">
            <summary>
            Mines requested thickness from this tile. If the top product has smaller thickness than requested, returned
            amount will be less than requested. If requested thickness is positive then the returned product thickness
            will be also positive (always mines something).
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.MineMaterialFromSecondLayer(Mafi.ThicknessTilesF)">
            <summary>
            Mines product from the second layer and preserves the top layer.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.mineRawLooseProduct(Mafi.ThicknessTilesF)">
            <summary>
            Mines raw top product and sets the correct height.
            NOTE: Will not mine more than <see cref="F:Mafi.Core.Terrain.TerrainTile.MAX_THICKNESS_CHANGE"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.DepositMaterialOnTop(Mafi.Core.Products.TerrainMaterialSlimId,Mafi.ThicknessTilesF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Deposits given product thickness on top of this tile.
            NOTE: Will not deposit more than <see cref="F:Mafi.Core.Terrain.TerrainTile.MAX_THICKNESS_CHANGE"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.DepositMaterialOnTop(Mafi.Core.Products.TerrainMaterialProto,Mafi.ThicknessTilesF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Deposits given product thickness on top of this tile.
            NOTE: Will not deposit more than <see cref="F:Mafi.Core.Terrain.TerrainTile.MAX_THICKNESS_CHANGE"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.DepositMaterialOnTop(Mafi.Core.Terrain.TerrainMaterialThickness)">
            <summary>
            Deposits given product thickness on top of this tile.
            NOTE: Will not deposit more than <see cref="F:Mafi.Core.Terrain.TerrainTile.MAX_THICKNESS_CHANGE"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.DepositLooseProductUpToHeight(Mafi.Core.Terrain.TerrainMaterialThickness,Mafi.HeightTilesF,Mafi.ThicknessTilesF)">
            <summary>
            Deposits given loose product on top of this terrain tile up to specified terrain height. Unused material is
            returned.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.SetHeight(Mafi.HeightTilesF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets height of this tile either by increasing thickness of top material or by removing material.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.SetHeightPreserveLayers(Mafi.HeightTilesF,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets height to the tile but preserves thicknesses of all layers. This effectively moves all materials
            within the tiles. Perf note: This is a very efficient operation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.ReplaceSurfaceWith(Mafi.Core.Products.TerrainMaterialSlimId,Mafi.ThicknessTilesF,Mafi.ThicknessTilesF,System.Boolean,System.Boolean)">
            <summary>
            Replaces surface with new material. This does not change height of the tile.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.SetTopLayerThickness(Mafi.ThicknessTilesF,System.Boolean)">
            <summary>
            Sets top layer thickness, keeping all other material thicknesses unchanged.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.GetResourceDetails(Mafi.Collections.HybridSet{Mafi.Core.Products.LooseProductProto},Mafi.Collections.Lyst{Mafi.Core.Terrain.Resources.ProductResource})">
            <summary>
            Updates the given list with all products that are in this tile. Only products from <paramref
            name="products"/> are returned. Returned products are ordered from the shallowest to the deepest.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.FindAndRemoveFirstLayerOf(Mafi.Core.Products.TerrainMaterialSlimId,Mafi.ThicknessTilesF,System.Boolean)">
            <summary>
            Finds the first layer of given material and removes thickness up to given amount. Returns the amount of
            thickness removed. This does not disrupt the tile.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.GetLowestOccupyingEntity">
            <summary>
            Returns the lowest occupying entity on this tile. Note that returned ID might be <c>EntityId.Invalid</c>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.TryGetAnyOccupyingEntityInRange(Mafi.HeightTilesI,Mafi.ThicknessTilesI,Mafi.Core.EntityId@,System.Predicate{Mafi.Core.EntityId})">
            <summary>
            Returns any occupying entity in give range on this tile, or null when there are none.
            The <paramref name="ignoredIds"/> parameter can specify ignored IDs.
            </summary>
            <remarks>
            Implementation needs to be in sync with <see cref="M:Mafi.Core.Terrain.TerrainTile.TryGetOccupyingEntityInRange``1(Mafi.HeightTilesI,Mafi.ThicknessTilesI,Mafi.Core.Entities.IEntitiesManager,``0@,System.Predicate{Mafi.Core.EntityId})"/>.
            </remarks>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.TryGetOccupyingEntity``1(Mafi.Core.Entities.IEntitiesManager,``0@,System.Predicate{Mafi.Core.EntityId})">
            <summary>
            Tries to find the first occupying entity of type <typeparamref name="TEntity"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.TryGetOccupyingEntityInRange``1(Mafi.HeightTilesI,Mafi.ThicknessTilesI,Mafi.Core.Entities.IEntitiesManager,``0@,System.Predicate{Mafi.Core.EntityId})">
            <summary>
            Returns the first entity of type <typeparamref name="TEntity"/> occupying entity in give range on this tile, or null when there are none.
            The <paramref name="ignoredIds"/> parameter can specify ignored IDs.
            </summary>
            <remarks>
            Implementation needs to be in sync with <see cref="M:Mafi.Core.Terrain.TerrainTile.TryGetAnyOccupyingEntityInRange(Mafi.HeightTilesI,Mafi.ThicknessTilesI,Mafi.Core.EntityId@,System.Predicate{Mafi.Core.EntityId})"/>.
            </remarks>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.Debug_ExplainOccupancyFlags">
            <summary>
            This is handy for debugging of occupancy.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.DataMaterials.m_mat0">
            <summary>
            Top layer.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.DataMaterials.m_mat1">
            <summary>
            Second layer.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.DataMaterials.m_overflowMatsStack">
            <summary>
            All other layers stored bottom to top in optional array.
            This array is effectively a stack with size <c>m_layersCount - 2</c>
            and top material is at index <c>size - 1</c>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTile.DataMaterials.m_layersCount">
            <summary>
            Number of valid layers in this data.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.DataMaterials.Pop">
            <summary>
            Removes top material.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.DataMaterials.Push(Mafi.Core.Terrain.TerrainMaterialThicknessSlim)">
            <summary>
            Adds material on top.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.DataMaterials.Set(Mafi.Collections.ReadonlyCollections.IIndexable{Mafi.Core.Terrain.TerrainMaterialThicknessSlim})">
            <summary>
            Sets all materials.
            </summary>
            <param name="materials">Products under the surface from bottom to top.</param>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.DataMaterials.GetMaterialAt(System.Int32)">
            <summary>
            Returns material at given index.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainTile.DataMaterials.Serialize(Mafi.Core.Terrain.TerrainTile.DataMaterials,Mafi.Serialization.BlobWriter)">
            <summary>
            Custom serialization that writes only valid materials and skips serializers detection as all the data
            is serialized using primitive types.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.TileFlagReporter">
            <summary>
            Class for reporting and testing tile flags.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.VirtualResourceManager.m_virtualResourcesMap">
            <summary>
            Cache of IVirtualTerrainResource grouped by VirtualResourceProductProto.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.VirtualResourceManager.initializeResources(Mafi.Core.Map.IslandMap,Mafi.Core.Game.GameDifficultyConfig)">
            <remarks>
            Virtual resources field has to be initialized after the map is created, the is why it no longer is
            initialized in the constructor, because the constructor may be invoked before the map is initialized.
            </remarks>
        </member>
        <member name="T:Mafi.Core.Terrain.IVirtualResourceManager">
            <summary>
            Convenience class for mining virtual resources.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Resources.ProductResource">
            <summary>
            Contains information about one terrain products in one tile for resource visualization.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Resources.ProductResource.Product">
            <summary>
            The actual product.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Resources.ProductResource.Height">
            <summary>
            Sum of total thickness of the product in a single tile.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Resources.ProductResource.Depth">
            <summary>
            Minimal depth of the product in a single tile.
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.Resources.ProductResource.AddHeight(Mafi.ThicknessTilesF)">
            <summary>
            Adds the given thickness to a newly created object.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Resources.ProductVirtualResource">
            <summary>
            Contains information about one virtual resource of products in one tile for resource visualization.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Resources.ProductVirtualResource.Product">
            <summary>
            The actual product.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Resources.ProductVirtualResource.VirtualThickness">
            <summary>
            Virtual thickness of the product in a single tile, virtual resources do not have real thickness
            in the terrain.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Resources.TerrainResourcesProvider.LooseTerrainProducts">
            <summary>
            Terrain products that should be visualized.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Resources.TerrainResourcesProvider.VirtualResourceProducts">
            <summary>
            Products in terrain represented as VirtualResources (Oil for example).
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.Resources.TerrainTileResources">
            <summary>
            Contains all the given (filtered) products in the given tile.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Resources.TerrainTileResources.Tile">
            <summary>
            Tile whose products this class contains.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Resources.TerrainTileResources.Products">
            <summary>
            All the given products in <see cref="F:Mafi.Core.Terrain.Resources.TerrainTileResources.Tile"/>. Ordered from the shallowest to the deepest.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.Resources.TerrainTileResources.VirtualResources">
            <summary>
            All products with virtual resources on <see cref="F:Mafi.Core.Terrain.Resources.TerrainTileResources.Tile"/>.
            </summary>
        </member>
        <member name="T:Mafi.Core.Terrain.TerrainMaterialThicknessSlim">
            <summary>
            Slim version of <see cref="T:Mafi.Core.Terrain.TerrainMaterialThickness"/>. This version takes up 4 bytes: 1 byte for material ID and
            3 bytes for thickness. The <see cref="T:Mafi.Core.Terrain.TerrainMaterialThickness"/> is 8 + 4 bytes respectively. This is used in
            terrain tile to represent layers. Use <see cref="M:Mafi.Core.Terrain.TerrainMaterialThicknessSlim.ToFull(Mafi.Core.Terrain.TerrainManager)"/> to resolve this to full <see
            cref="T:Mafi.Core.Terrain.TerrainMaterialThickness"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainMaterialThicknessSlim.IsNone">
            <summary>
            Whether this material thickness is default struct.
            WARNING: Zero thickness of phantom proto is considered None.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainMaterialThicknessSlim.HasValue">
            <summary>
            Whether this material thickness is not a default struct.
            WARNING: Zero thickness of phantom proto is considered None.
            </summary>
        </member>
        <member name="P:Mafi.Core.Terrain.TerrainMaterialThicknessSlim.IsEmpty">
            <summary>
            Whether this product's thickness is zero (or negative).
            </summary>
        </member>
        <member name="M:Mafi.Core.Terrain.TerrainMaterialThicknessSlim.RemoveAsMuchAs(Mafi.ThicknessTilesF,Mafi.Core.Terrain.TerrainMaterialThicknessSlim@)">
            <summary>
            Removes up to <paramref name="maxThicknessRemoved"/> from this quantity and returns amount of removed. Also
            fills up the remainder quantity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Terrain.TerrainTileSurfaceProto.Phantom">
            <summary>
            Phantom prototype does not represent any valid prototype and serves as convenient placeholder to avoid
            redundant null checks or unnecessary usage of Option{T}. This is also useful for unit tests. Phantom
            prototype should be NEVER returned through public interface of the class that uses it.
            </summary>
        </member>
        <member name="F:Mafi.Core.VehicleJobId.Value">
            <summary>
            Underlying int value of this Id.
            </summary>
        </member>
        <member name="F:Mafi.Core.World.WorldMapLocId.Value">
            <summary>
            Underlying int value of this Id.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.QuickTrade.QuickTradeProvider.QuickBuy">
            <summary>
            Returns quantity that was bought or none if failed.
            </summary>
        </member>
        <member name="F:Mafi.Core.World.QuickTrade.QuickTradePairProto.UpointsPerTrade">
            <summary>
            Unity to pay per each trade / step.
            </summary>
        </member>
        <member name="F:Mafi.Core.World.QuickTrade.QuickTradePairProto.MaxSteps">
            <summary>
            Max steps until sold out.
            </summary>
        </member>
        <member name="F:Mafi.Core.World.QuickTrade.QuickTradePairProto.CooldownPerStep">
            <summary>
            Period to wait for each step to go back.
            </summary>
        </member>
        <member name="F:Mafi.Core.World.QuickTrade.QuickTradePairProto.TradesPerStep">
            <summary>
            How frequently we step up the price. For 2, we increase after every 2 trades.
            </summary>
        </member>
        <member name="F:Mafi.Core.World.QuickTrade.QuickTradePairProto.CostMultiplierPerStep">
            <summary>
            Cost multiplier per each step.
            </summary>
        </member>
        <member name="F:Mafi.Core.World.Contracts.ContractProto.UpointsPerMonth">
            <summary>
            Unity to pay for active contract
            </summary>
        </member>
        <member name="F:Mafi.Core.World.Contracts.ContractProto.UpointsPer100ProductsBought">
            <summary>
            Unity to pay per 100 quantity traded
            </summary>
        </member>
        <member name="F:Mafi.Core.World.Contracts.ContractProto.UpointsToEstablish">
            <summary>
            Initial cost to establish this contract.
            </summary>
        </member>
        <member name="T:Mafi.Core.World.FleetModificationsPrepareCmd">
            <summary>
            To prepare modifications in shipyard.
            </summary>
        </member>
        <member name="P:Mafi.Core.World.Entities.WorldMapMine.Level">
            <summary>
            Current level of this mine.
            </summary>
        </member>
        <member name="P:Mafi.Core.World.Entities.WorldMapMine.MaxProductionSteps">
            <summary>
            Max production steps allowed for mine at this level.
            </summary>
        </member>
        <member name="P:Mafi.Core.World.Entities.WorldMapMine.ProductionStep">
            <summary>
            Current production step that determines output of this mine.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.Entities.WorldMapMine.RemoveAsMuchAs(Mafi.Quantity)">
            <summary>
            Returns how much was removed.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.Entities.WorldMapRepairableEntity.StoreAsMuchAs(Mafi.Core.ProductQuantity)">
            <summary>
            Returns how much was not stored.
            </summary>
        </member>
        <member name="P:Mafi.Core.World.Entities.WorldMapVillage.Reputation">
            <summary>
            Current reputation the player has in this village.
            </summary>
        </member>
        <member name="T:Mafi.Core.World.Entities.DefaultWorldMapEntityFactory">
            <summary>
            Default factory for static entities that take `WorldMapEntityProto` (or derived) and WorldMapLocation as its first two
            arguments and all other arguments are resolved from the resolver.
            </summary>
        </member>
        <member name="P:Mafi.Core.World.Entities.IUpgradableWorldEntity.UpgradeTitle">
            <summary>
            Title of the upgrade to be shown in the UI.
            </summary>
        </member>
        <member name="P:Mafi.Core.World.Entities.IUpgradableWorldEntity.UpgradeExists">
            <summary>
            Whether upgrade exists.
            </summary>
        </member>
        <member name="P:Mafi.Core.World.Entities.IUpgradableWorldEntity.UpgradeIcon">
            <summary>
            Icon of the upgraded item.
            </summary>
        </member>
        <member name="P:Mafi.Core.World.Entities.IWorldMapRepairableEntity.ConstructionProgress">
            <summary>
            Can be repair or upgrade.
            </summary>
        </member>
        <member name="P:Mafi.Core.World.Entities.IWorldMapRepairableEntity.OnConstructionDone">
            <summary>
            Can be repair or upgrade.
            </summary>
        </member>
        <member name="P:Mafi.Core.World.Entities.WorldMapEntityProto.Gfx.IconPath">
            <summary>
            Icon asset path to be used in UI.
            </summary>
        </member>
        <member name="P:Mafi.Core.World.Entities.WorldMapEntityProto.Gfx.WorldMapIconPath">
            <summary>
            Icon used in world map to denote a location with this entity.
            </summary>
        </member>
        <member name="F:Mafi.Core.World.Entities.WorldMapMineProto.MonthlyUpointsPerLevel">
            <summary>
            Upoints cost of this mine per production level
            </summary>
        </member>
        <member name="F:Mafi.Core.World.Entities.WorldMapMineProto.CostPerLevel">
            <summary>
            Upgrade cost, workers cost, maintenance cost of this mine per production level
            </summary>
        </member>
        <member name="F:Mafi.Core.World.Entities.WorldMapMineProto.Level">
            <summary>
            Starting level this mine will have after repair.
            </summary>
        </member>
        <member name="F:Mafi.Core.World.Entities.WorldMapMineProto.MaxLevel">
            <summary>
            Max upgrade level this mine can reach.
            </summary>
        </member>
        <member name="F:Mafi.Core.World.Entities.WorldMapMineProto.LevelsPerUpgrade">
            <summary>
            By how many level we jump per each upgrade.
            </summary>
        </member>
        <member name="F:Mafi.Core.World.Entities.WorldMapMineProto.QuantityAvailable">
            <summary>
            Null if unlimited.
            </summary>
        </member>
        <member name="F:Mafi.Core.World.Entities.WorldMapVillageProto.CostPerLevel">
            <summary>
            Donation cost per reputation level.
            </summary>
        </member>
        <member name="F:Mafi.Core.World.Entities.WorldMapVillageProto.MaxReputation">
            <summary>
            Max upgrade level this village can reach.
            </summary>
        </member>
        <member name="F:Mafi.Core.World.Entities.WorldMapVillageProto.MinReputationNeededToAdopt">
            <summary>
            -1 if adoption disabled entirely
            </summary>
        </member>
        <member name="F:Mafi.Core.World.Entities.WorldMapVillageProto.DurationPerNewPopPerReputationLevel">
            <summary>
            Returns duration it takes to get additional pop for adoption per each reputation level.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.Entities.WorldMapVillageProto.PopsToAdoptCapPerReputationLevel(System.Int32)">
            <summary>
            Returns capacity of pops available to adopt per each reputation level.
            </summary>
        </member>
        <member name="T:Mafi.Core.World.TravelingFleet">
            <summary>
            A wrapper around <see cref="T:Mafi.Core.Fleet.BattleFleet"/> that adds capability to move on the world map.
            </summary>
        </member>
        <member name="P:Mafi.Core.World.TravelingFleet.OnLocationFullyExplored">
            <summary>
            Called when location was explored so that loot was given or any hidden entity revealed.
            This happens after explore unless the player loses battle in which case this can get delayed.
            </summary>
        </member>
        <member name="P:Mafi.Core.World.TravelingFleet.CurrentLocationId">
            <summary>
            Current location. If null, the ship is moving between <see cref="P:Mafi.Core.World.TravelingFleet.PreviousLocationId"/> and <see
            cref="P:Mafi.Core.World.TravelingFleet.NextLocationId"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.World.TravelingFleet.Path">
            <summary>
            Current path of the fleet. If not empty, the fleet is moving towards its destination. First element is next
            immediate goal, last element is the final destination.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.TravelingFleet.TryLeaveToWorld">
            <summary>
            Leaves to the world if it is operational.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.TravelingFleet.GetFreeCapacity">
            <summary>
            Returns free cargo capacity for refugees and goods.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.TravelingFleet.SetCurrentLocationAndClearPath(Mafi.Core.World.WorldMapLocation)">
            <summary>
            Teleports the fleet to given cell.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.TravelingFleet.LoadCargo(Mafi.Core.Economy.AssetValue)">
            <summary>
            Adds as much cargo as possible to the ship. If ProductsManager is set, taken products are reported as new.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.TravelingFleet.StoreFuelAsMuchAs(Mafi.Quantity)">
            <summary>
            Returns quantity that was not able to fit.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.TravelingFleet.TryUnloadCargo(Mafi.Quantity,Mafi.Collections.IReadOnlySet{Mafi.Core.Products.ProductProto})">
            <summary>
            Used by shipyard to transfer cargo from the ship.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.TravelingFleet.FindPathTo(Mafi.Core.World.WorldMapLocId,Mafi.Core.World.IWorldMapPathFinder,Mafi.Collections.Lyst{Mafi.Core.World.WorldMapLocId})">
             <summary>
             Finds path from current fleet position to given goal location.
            
             If the fleet is in between locations, both ends of the edge are considered as valid start locations to avoid
             unnecessary and awkward fleet movement.
             </summary>
        </member>
        <member name="M:Mafi.Core.World.TravelingFleet.SetPath(System.Collections.Generic.IEnumerable{Mafi.Core.World.WorldMapLocId},Mafi.Core.World.LocationVisitReason)">
            <summary>
            Replaces current path. It is up to the caller to ensure that the new path is valid.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.TravelingFleet.ComputeTravelDistanceBetween(Mafi.Core.World.WorldMapLocId,Mafi.Core.World.WorldMapLocId,System.Boolean)">
            <summary>
            Computes distance (in km) between two nodes.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.TravelingFleetManager.ComputeTravelDistanceBetween(Mafi.Core.World.WorldMapLocId,Mafi.Core.World.WorldMapLocId,System.Boolean)">
            <summary>
            Computes distance (in km) between two nodes.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.TravelingFleetManager.ComputeRoundtripPathAndCosts(Mafi.Core.World.WorldMapLocId,System.Int32@,Mafi.RelGameDate@,Mafi.Quantity@,Mafi.Collections.Lyst{Mafi.Core.World.WorldMapLocId},Mafi.Collections.Lyst{Mafi.Core.World.WorldMapLocId})">
            <summary>
            Computes path to goal and back home, together with estimated food and fuel costs.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.WorldMapCargoManager.CalculateCapacityUtilization(Mafi.Core.Buildings.Cargo.Ships.CargoShip)">
             <summary>
             This will pair this ship and all world entities and figure out what is the maximal capacity percentage utilization.
             So if we have capacity for 100 oil and there is mine with 30 we get 30% utilization. Because this is max this means
             that no other module has more than 30% utilization. This server to figure out whether ship should depart or not.
            
             Note: This takes some time so don't call it too often.
             </summary>
        </member>
        <member name="T:Mafi.Core.World.WorldMapConnection">
            <summary>
            Canonical connection. Ordering is given by hash.
            </summary>
        </member>
        <member name="F:Mafi.Core.World.WorldMapLoot.IsTreasure">
            <summary>
            Whether these rewards are so significant that they deserved to be marked on the map.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.WorldMapPathFinder.#ctor(Mafi.Core.World.WorldMap)">
            <summary>
            Does not track map changes. Great for unit tests since instantiation of <see cref="T:Mafi.Core.World.WorldMapManager"/> is
            pain.
            </summary>
        </member>
        <member name="M:Mafi.Core.World.IWorldMapPathFinder.FindPath(Mafi.Core.World.WorldMapLocId,Mafi.Core.World.WorldMapLocId,System.Boolean,Mafi.Collections.Lyst{Mafi.Core.World.WorldMapLocId})">
            <summary>
            Finds path between two map cells.
            </summary>
            <remarks>
            For API simplicity, this is not time-sliced. If this ever becomes problem, use time-slicing similarly as
            vehicles do.
            </remarks>
        </member>
        <member name="T:Mafi.Core.ProtoDepAttribute">
            <summary>
            This attribute is used to obtain an instance of <see cref="T:Mafi.Core.Prototypes.Proto"/> as a constructor parameter during dependency
            resolving phase. This attribute can be used only on a parameter of a constructor of a class the is being created
            by <see cref="T:Mafi.DependencyResolver"/>.
            </summary>
            <remarks>
            Type of marked class has to be derived type of <see cref="T:Mafi.Core.Prototypes.Proto"/> otherwise <see
            cref="T:Mafi.DependencyResolverException"/> will be thrown. This exception is also thrown in proto under given ID is not
            found in the DB.
            </remarks>
        </member>
        <member name="T:Mafi.Core.RandomProvider">
            <summary>
            Provides random pseudo-random generators.
            </summary>
        </member>
        <member name="F:Mafi.Core.RandomProvider.m_randomPrototype">
            <summary>
            Generator prototype that is used for cloning. Its state is never used.
            </summary>
        </member>
        <member name="F:Mafi.Core.RandomProvider.MasterSeed">
            <summary>
            Master seed that will be part of seed for all created generators.
            </summary>
        </member>
        <member name="M:Mafi.Core.RandomProvider.GetSimRandomFor(System.Object,System.String)">
            <summary>
            Returns new random generator that should be used only on sim thread (or during initialization) and does
            affect game state. Asserts are in place to verify this. Returned random generator is seeded by master seed
            and type of given object. Thus, multiple requests with the same object type will result in generators with
            identical state.
            </summary>
        </member>
        <member name="M:Mafi.Core.RandomProvider.GetNonSimRandomFor(System.Object,System.String)">
            <summary>
            Returns new random generator that should be used outside of sim thread and should not affect game state.
            Asserts are in place to verify this. Returned random generator is seeded by master seed and type of given
            object. Thus, multiple requests with the same object type will result in generators with identical state.
            </summary>
        </member>
        <member name="M:Mafi.Core.ICoreRandom.Clone(Mafi.Core.RandomGeneratorType)">
            <summary>
            Clones this instance under new type.
            </summary>
        </member>
        <member name="P:Mafi.Core.RandomSeedConfig.MasterRandomSeed">
            <summary>
            Random seed for this game. This string's hash will be used to seed pseudo-random number generator.
            </summary>
        </member>
        <member name="T:Mafi.Core.SaveGame.ASyncSaver">
            <summary>
            Helper for running async part of the save flow.
            </summary>
        </member>
        <member name="M:Mafi.Core.SaveGame.ASyncSaver.RunAsync(Mafi.Core.SaveGame.GameSaver,System.String,System.String)">
            <summary>
            This will run the async part of <see cref="M:Mafi.Core.SaveGame.GameSaver.FinishSaveAsync(System.IO.Stream)"/> and then it will send the final
            stream to the local file identified by the given path.
            </summary>
        </member>
        <member name="M:Mafi.Core.SaveGame.CustomSerializer.CustomTextReader.SetProtosDb(Mafi.Core.Prototypes.ProtosDb)">
            <summary>
            This enables protos reading.
            </summary>
        </member>
        <member name="T:Mafi.Core.SaveGame.GameLoader">
             <remarks>
             See <see cref="M:Mafi.Core.Game.GameBuilder.BuildLoadedGameTimeSliced(Mafi.Core.Game.LoadGameArgs,System.Boolean,System.Action{Mafi.DependencyResolver},System.Action{Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod}},System.Func{Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.SaveGame.LoadedModInfo},Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.SaveGame.LoadedModInfo}},System.Action{Mafi.Core.Mods.ProtoRegistrator,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod}},System.Action{Mafi.Core.Mods.ProtoRegistrator,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod}},System.Action{Mafi.DependencyResolverBuilder,Mafi.Core.Prototypes.ProtosDb,Mafi.Collections.ImmutableCollections.ImmutableArray{Mafi.Core.Mods.IMod}},System.Action{Mafi.DependencyResolver})"/> for loading procedure.
             Save file is structured in chunks. Each chunk has 8 byte header. Some chunks may be optional.
            
             <code>
             Chunk #1 <see cref="F:Mafi.Core.SaveGame.SaveHeaders.HEADER_MAIN"/> (mandatory)
              - Serialized <see cref="T:Mafi.Core.SaveGame.SaveHeader"/> that has save version and compression type. This chunk is read
                before <see cref="T:Mafi.Serialization.BlobReader"/> instance is created.
              - All data after this chunk are encoded with compressor based on <see cref="F:Mafi.Core.SaveGame.SaveHeader.CompressionType"/>.
            
             Chunk #2 <see cref="F:Mafi.Core.SaveGame.SaveHeaders.HEADER_MOD_TYPES"/> (mandatory)
              - Serialized mod types using <see cref="T:Mafi.Core.SaveGame.ModsListHelper"/>. We need to be have a list of mods at the very
                beginning to instantiate configs from all assemblies of all mods.
              - Order of mods does not matter.
            
             Chunk #3 <see cref="F:Mafi.Core.SaveGame.SaveHeaders.HEADER_CONFIGS"/> (mandatory)
              - All persistent configs (implementations of <see cref="T:Mafi.Core.Game.IConfig"/> that are serializable). We need all configs
                to be able to instantiate mods and create dependency resolver.
              - Serialized simply as <see cref="T:Mafi.Collections.ImmutableCollections.ImmutableArray`1"/>.
            
             Chunk #4 <see cref="F:Mafi.Core.SaveGame.SaveHeaders.HEADER_RESOLVER"/> (mandatory)
              - Saved instance of <see cref="T:Mafi.DependencyResolver"/> that effectively saves the entire game.
            
             Chunk #5 <see cref="F:Mafi.Core.SaveGame.SaveHeaders.HEADER_SAVE_END"/> (mandatory)
              - Final chunk that verifies correctness of the load operation. This chunk has no contents, just a header.
             </code>
             </remarks>
        </member>
        <member name="M:Mafi.Core.SaveGame.GameLoader.FinishGameLoadAndDispose(Mafi.DependencyResolverBuilder,Mafi.Core.Game.SpecialSerializerFactories)">
            <summary>
            Returns a loaded resolver.
            </summary>
            <remarks>
            Taking <see cref="T:Mafi.DependencyResolverBuilder"/> as an argument ensures that the new resolver was not used
            for resolving yet.
            </remarks>
        </member>
        <member name="T:Mafi.Core.SaveGame.GameSaver">
            <remarks>
            See <see cref="T:Mafi.Core.SaveGame.GameLoader"/> for save file structure.
            </remarks>
        </member>
        <member name="M:Mafi.Core.SaveGame.GameSaver.StartSave(Mafi.DependencyResolver,Mafi.Core.SaveGame.SaveCompressionType)">
            <summary>
            Starts the saving process by writing all game data to internal streams. This effectively takes a snapshot of
            the game so nothing else can run. The <see cref="M:Mafi.Core.SaveGame.GameSaver.FinishSaveAsync(System.IO.Stream)"/> must be called after this to combine
            internal streams and optionally compress them.
            </summary>
        </member>
        <member name="M:Mafi.Core.SaveGame.GameSaver.FinishSaveAsync(System.IO.Stream)">
            <summary>
            Finishes the saving process started in <see cref="M:Mafi.Core.SaveGame.GameSaver.StartSave(Mafi.DependencyResolver,Mafi.Core.SaveGame.SaveCompressionType)"/> by writing the previously obtained snapshot
            into the output stream. This method can be run in a background thread since the game snapshot was already
            taken and no part of the game will be touched anymore.
            </summary>
        </member>
        <member name="T:Mafi.Core.SaveGame.ISaveCompressor">
            <summary>
            Interface for creation of compressing and decompressing stream for game saving.
            </summary>
            <remarks>
            Call to close on the streams created through this interface does not close the underlying stream that was
            passed to <see cref="M:Mafi.Core.SaveGame.ISaveCompressor.CreateCompressingStream(System.IO.Stream)"/> or <see cref="M:Mafi.Core.SaveGame.ISaveCompressor.CreateDecompressingStream(System.IO.Stream)"/>
            </remarks>
        </member>
        <member name="P:Mafi.Core.SaveGame.ISaveConfig.SaveCompressionType">
            <summary>
            Type of compression to be used when saving a game.
            </summary>
        </member>
        <member name="T:Mafi.Core.SaveGame.PassThroughSaveCompressor.PassThroughNonClosingStream">
            <summary>
            Stream that just passes its calls to an underlying stream.
            Doesn't pass Dispose/Close calls.
            </summary>
        </member>
        <member name="T:Mafi.Core.SaveGame.SaveHeader">
            <summary>
            Header stored as the beginning of a saved game stream (before compressed game data).
            </summary>
            <remarks>
            The class is not using BlobReader/Writer for its reads/writes to the stream as it is used before these are
            configured and can be used.
            </remarks>
        </member>
        <member name="T:Mafi.Core.SaveGame.SaveHeaders">
            <summary>
            Constants used in save file to determine its chunks and guard correctness.
            Note: Due to perf, fields are mutable arrays, make sure these are NEVER mutated!
            </summary>
        </member>
        <member name="F:Mafi.Core.SaveGame.SaveHeaders.HEADER_MAIN">
            <summary>
            Marks the total beginning of the save file.
            </summary>
        </member>
        <member name="F:Mafi.Core.SaveGame.SaveHeaders.HEADER_MOD_TYPES">
            <summary>
            Marks a chunk that contains mod types.
            </summary>
        </member>
        <member name="F:Mafi.Core.SaveGame.SaveHeaders.HEADER_CONFIGS">
            <summary>
            Marks a chunk that contains configs.
            </summary>
        </member>
        <member name="F:Mafi.Core.SaveGame.SaveHeaders.HEADER_RESOLVER">
            <summary>
            Marks a chunk that contains data of the game as serialized resolver.
            </summary>
        </member>
        <member name="F:Mafi.Core.SaveGame.SaveHeaders.HEADER_SAVE_END">
            <summary>
            Marks the total end of the save file.
            </summary>
        </member>
        <member name="F:Mafi.Core.SaveGame.SaveHeaders.HEADER_CUSTOM_SAVE">
            <summary>
            Marks beginning of custom save file format.
            </summary>
        </member>
        <member name="F:Mafi.Core.SaveGame.SaveManager.MAX_AUTOSAVE_FILES">
            <summary>
            Maximum number of autosave files, if there are more, the oldest one is deleted.
            </summary>
        </member>
        <member name="M:Mafi.Core.SaveGame.SaveManager.SaveGame(System.IO.Stream,Mafi.Core.SaveGame.SaveCompressionType)">
            <summary>
            Saves game that owns this class into given stream. This is fully synchronous operation and blocks. Use <see
            cref="M:Mafi.Core.SaveGame.SaveManager.RequestGameSave(System.String,System.Action{Mafi.Core.SaveGame.SaveResult})"/> for efficient asynchronous saving if blocking is an issue.
            </summary>
        </member>
        <member name="M:Mafi.Core.SaveGame.SaveManager.SaveGameRaw(System.IO.Stream)">
            <summary>
            Saves only the raw data of the game without any headers or types map to given stream.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Commands.AddVehicleToBuildQueueCmd">
            <summary>
            Requests assembly of vehicle from the given depot depot.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Commands.AssignVehicleToEntityCmd">
            <summary>
            Assigns a concrete vehicle to an entity.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Commands.AssignVehicleTypeToEntityCmd">
            <summary>
            Assigns a vehicle type to an entity.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Commands.FinishVehicleBuildCmd">
            <summary>
            Cheat finish current vehicle in progress.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Commands.QuickBuildCurrentVehicleCmd">
            <summary>
            Requests to quick build current vehicle and pay for it via unity.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Commands.RemoveVehicleFromBuildQueueCmd">
            <summary>
            Requests assembly of vehicle from the given depot depot.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Excavators.Excavator">
            <summary>
            A vehicle that is able to mine terrain and fulfill <see cref="T:Mafi.Core.Vehicles.Jobs.MiningJob"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Excavators.Excavator.MineTower">
            <summary>
            Mine tower to which is this excavator assigned or none.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Excavators.Excavator.IsShovelAtTarget">
            <summary>
            Whether the shovel has reached requested target and is at rest.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Excavators.Excavator.TruckQueue">
            <summary>
            Trucks that are waiting to be loaded.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Excavators.Excavator.UnloadToTruck">
            <summary>
            Asks the Excavator to unload its Cargo to Truck as fast as it can. If the Excavator does not have an <see
            cref="P:Mafi.Core.Entities.Dynamic.Vehicle.AssignedTo"/> or loses it after the call and before unload, there will be no effect. (The
            Excavator then won't be able to get a Truck.)
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Excavators.Excavator.ClearCargoImmediately">
            <summary>
            For now to be used when there is nothing we can do with the cargo. In future, we could maybe dump the cargo?
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Excavators.Excavator.KeepTruckQueueEnabled(Mafi.Duration)">
            <summary>
            Keeps truck queue enabled for specified amount of time. This solution was chosen to avoid state issues.
            TODO: Hack, improve this.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Excavators.Excavator.MineAt(Mafi.Core.Terrain.TerrainTile,Mafi.Core.Products.LooseProductProto,Mafi.Core.Vehicles.Excavators.Excavator.MineTileFn)">
            <summary>
            Mines terrain at given tile (+shovel radius) for given product.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Excavators.ExcavatorJobProvider.TryGetJobFor(Mafi.Core.Vehicles.Excavators.Excavator)">
            <summary>
            Gives the given spawned excavator a job.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Excavators.ExcavatorJobProvider.tryEnqueueCleaningJobIfNotClean(Mafi.Core.Vehicles.Excavators.Excavator)">
            <summary>
            If the excavator is not "clean", enqueues a cleaning job. The cleaning job setups the excavator to a default
            state and releases trucks.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Excavators.ExcavatorProto.Capacity">
            <summary>
            Capacity of excavator's shovel.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Excavators.ExcavatorProto.MinMiningDistance">
            <summary>
            Tolerance while navigating towards a designation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Excavators.ExcavatorProto.MaxMiningDistance">
            <summary>
            Maximal distance to target that is considered as small enough to start mine/deposit. This represents reach of
            the excavator shovel.
            </summary>
            <remarks>
            Note that this distance is from origin of the entity (center) so the value should be greater then length of
            the vehicle.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Vehicles.Excavators.ExcavatorProto.MinedThicknessByDistance">
            <summary>
            Specifies how much of material can be mined at particular radius per shovel. Length of this array naturally
            specifies mining radius.
            </summary>
            <remarks>
            Excavator can over-mine by maximum of thickness specified in this array. The shovel capacity should be
            generally larger too minimize impact of this imprecision.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Vehicles.Excavators.ExcavatorProto.MineTimings">
            <summary>
            Timings for excavator animations.
            </summary>
            <remarks>
            The timings cannot be just UI detail since the actual duration is crucial for correct simulation of the
            delays.
            </remarks>
        </member>
        <member name="F:Mafi.Core.Vehicles.Excavators.ExcavatorProto.RotatingCabinDriverProto">
            <summary>
            Parameters of the cabin driver.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Excavators.ExcavatorProto.Graphics">
            <summary>
            Graphics-only properties that does not affect game simulation and are not needed or accessed by the game
            simulation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Excavators.ExcavatorProto.Timings.DumpDelay">
            <summary>
            Delay after start of dump animation to actual material transfer. Should be less than <see
            cref="F:Mafi.Core.Vehicles.Excavators.ExcavatorProto.Timings.DumpDuration"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Excavators.ExcavatorProto.Timings.MineTileIterations">
            <summary>
            Number of actual mine operations on the terrain. This should be in sync with
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Excavators.ExcavatorProto.Timings.MineIterationDuration">
            <summary>
            A delay between mine operations. Keep in ming that <see cref="F:Mafi.Core.Vehicles.Excavators.ExcavatorProto.Timings.MineIterationDuration"/> times <see
            cref="F:Mafi.Core.Vehicles.Excavators.ExcavatorProto.Timings.MineTileIterations"/> should be less or equal to <see cref="F:Mafi.Core.Vehicles.Excavators.ExcavatorProto.Timings.MineDuration"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Excavators.ExcavatorProto.Gfx.CabinAngleCompensation">
            <summary>
            We have to compensate cabin angle because the models cabin incorrectly face +Y or -X instead of +X.
            Remove this when the cabins are fixed.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Trucks.JobProviders.DefaultTruckJobProvider">
            <summary>
            Truck jobs provider able to provide jobs to trucks assigned to entities inheriting StorageBase.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Trucks.JobProviders.DefaultTruckJobProvider.TryGetBalancingJob(Mafi.Core.Vehicles.Trucks.Truck)">
            <summary>
            Assign a chain of two jobs in which the given truck goes somewhere to pickup cargo and then delivers it
            somewhere else.
            </summary>
            <remarks>
            Important: Pickup entity and deliver entity they both counting with the truck to arrive. So the pickup entity
            entity has reserved quantity to give to the truck and the drop-off entity has reserved space to receive that
            amount. Also we send only fully loaded trucks.
            </remarks>
        </member>
        <member name="T:Mafi.Core.Vehicles.Trucks.JobProviders.FuelStationTruckJobProvider">
            <summary>
            Truck job provider providing jobs to trucks assigned to a fuel station.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Trucks.JobProviders.MineTowerTruckJobProvider">
            <summary>
            Truck job provider providing jobs to trucks assigned to a <see cref="T:Mafi.Core.Buildings.Mine.MineTower"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Trucks.JobProviders.MineTowerTruckJobProvider.balanceTruckExcavatorQueues">
            <summary>
            Simple balancing of trucks in excavator queues. Computes the number of trucks that should be in queues to
            have balance queue sizes. Then releases trucks that are over this limit from their queues. The trucks will
            then go for the queue with lowest number of trucks.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Trucks.JobProviders.MineTowerTruckJobProvider.tryGetQueuedAtExcavatorJob(Mafi.Core.Vehicles.Trucks.Truck)">
            <summary>
            Tries to get the truck queued at an Excavator that is currently working (it has its TruckQueue enabled). It
            searches among Excavators assigned to our MiningTower and looks for the Excavator with the shortest queue. If
            more queues have the same length, it chooses the closest Excavator with the shortest queue.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Trucks.JobProviders.TreeHarvesterTruckJobProvider">
            <summary>
            Truck job provider providing jobs to trucks assigned to a tree harvester.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Trucks.JobProviders.TruckJobProviderBase">
            <summary>
            Base class for job providers, implements shared functionality.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Trucks.JobProviders.TruckJobProviderBase.TryGetVehicleRefuelingJob(Mafi.Core.Entities.Dynamic.Vehicle,System.Boolean@)">
            <summary>
            If the vehicle is running on a reserve, we try getting a refueling job.
            </summary>
            <param name="hasJob">if refueling job was assigned or not</param>
            <returns>true if the caller should not try to search for any other job.</returns>
        </member>
        <member name="M:Mafi.Core.Vehicles.Trucks.JobProviders.TruckJobProviderBase.TryGetRidOfCargo(Mafi.Core.Vehicles.Trucks.Truck,System.Boolean,System.Boolean@)">
             <summary>
             Tries to get rid of current cargo.
            
             If the cargo is something we really need to get rid of mark it as <param name="isCargoUnexpected"/>.
             This is anytime the cargo is in way. However don't use it for situations where it is expected such
             as mining truck as we don't want to fill shipyard with mined products.
             </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Trucks.JobProviders.TruckJobProviderBase.TryGetNavigateToJob(Mafi.Core.Entities.Dynamic.Vehicle,Mafi.Core.Entities.Static.Layout.LayoutEntity,System.Boolean)">
            <summary>
            If the vehicle is not parked close to the entity, enqueues a navigation job to given entity.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Trucks.JobProviders.IJobProviderFactory`2">
            <summary>
            Job providers factory for vehicles of type TVehicle assigned to entity of type TAssignee.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Trucks.Truck">
            <summary>
            Represents an entity that is able to transport cargo.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Trucks.Truck.ProductType">
            <summary>
            Type of product that this truck supports.
            If set, this truck has just one attachment. If null, this truck has multiple switchable attachments.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Trucks.Truck.Cargo">
            <summary>
            Product with quantity that is currently stored in the truck.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Trucks.Truck.IsDumping">
            <summary>
            Whether the truck is currently dumping material on the terrain. Used in graphics to animate the dump bed.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Trucks.Truck.LayoutEntity">
            <summary>
            Layout entity that this truck is assigned to.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.Truck.DefaultProduct">
            <summary>
            This allows to specify for what type of product is the truck being used for. Examples:
            - while the truck is assigned to a FuelStation, it is used to transport fuel of that station
            - while the truck is assigned to a MineTower, is is used to transport loose products.
            Only purpose of this is to determine what truck attachment to use when there is no cargo.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.Truck.DumpingOfAllCargoPending">
            <summary>
            Whether dumping was not completely finished yet.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Trucks.Truck.TakeCargo(Mafi.Quantity)">
            <summary>
            Takes requested quantity of trucks cargo. Returns amount removed.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Trucks.Truck.LoadCargoReturnExcess(Mafi.Core.ProductQuantity)">
            <summary>
            Loads the given cargo. There is no limit enforced as cargo capacity can fluctuate
            and enforcement of capacity is hard to deal with at that point.
            Returns how much it did not fit.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Trucks.Truck.SetJobProvider(Mafi.Core.Vehicles.Jobs.IJobProvider{Mafi.Core.Vehicles.Trucks.Truck})">
            <summary>
            Sets job provider.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Trucks.Truck.ResetJobProvider">
            <summary>
            Resets job provider to the default one.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Trucks.TruckQueue">
            <summary>
            Registers trucks arriving for material to an entity. The trucks are either registered as arriving or waiting.
            Waiting trucks already arrived and are waiting in the queue behind vehicle before them. Arriving trucks are
            currently heading (navigating) to the queue.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Trucks.TruckQueue.TryGetFirstTruckFor(Mafi.Core.Products.ProductProto)">
            <summary>
            Returns first truck compatible with given cargo or none. Releases incompatible trucks.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Trucks.AttachmentProto">
            <summary>
            Attachment for a vehicle.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.AttachmentProto.EligibleProductsFilter">
            <summary>
            Filter for products that the vehicles needs to work with to have this attachment.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.AttachmentProto.KeepOnEvenIfNotNeeded">
            <summary>
            Whether the attachment should be kept on the vehicle even if it is not needed anymore. Otherwise the
            attachments is removed. E.g. after truck dumps stuff on the terrain we don't want the dump bed to disappear.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.AttachmentProto.Graphics">
            <summary>
            Graphics-only properties that does not affect game simulation and are not needed or accessed by the game
            simulation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.AttachmentProto.Gfx.PrefabPath">
            <summary>
            3D model of this entity.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.AttachmentProto.Gfx.ColorsMap">
            <summary>
            Maps product to attachment's color. Color of attachment should not be changed if <see
            cref="F:Mafi.ColorRgba.Empty"/> is returned.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Trucks.AttachmentProto.Gfx.IconPath">
            <summary>
            Path for icon that shows a truck with this attachment.
            </summary>
            <remarks>This path is valid only after <see cref="M:Mafi.Core.Vehicles.Trucks.AttachmentProto.Gfx.Initialize(Mafi.Core.Vehicles.Trucks.AttachmentProto)"/> was called.</remarks>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.AttachmentProto.Gfx.IconIsCustom">
            <summary>
            Whether custom icon path was set. Otherwise, icon path is automatically generated.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Trucks.DumpAttachmentProto">
            <summary>
            Attachment that represent a dump bed. This proto mainly defines that cargo of such attachment should be
            visualized using the defined prefab.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.DumpAttachmentProto.Graphics">
            <summary>
            Graphics-only properties that does not affect game simulation and are not needed or accessed by the game
            simulation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.DumpAttachmentProto.Gfx.OffsetEmpty">
            <summary>
            Offset (local position) within paren when cargo is nearly empty. Offset is linearly interpolated between
            empty and full states based on cargo amount. This value is in Unity coordinate space (meters).
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.DumpAttachmentProto.Gfx.OffsetFull">
            <summary>
            Offset (local position) within paren when cargo is full. Offset is linearly interpolated between empty
            and full states based on cargo amount. This value is in Unity coordinate space (meters).
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.DumpAttachmentProto.Gfx.AnimationStateName">
            <summary>
            When set, pile will be operated using animation instead of offsets.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.TruckProto.ProductType">
            <summary>
            Type of product that this truck supports.
            If set, this truck has just one attachment. If null, this truck has multiple switchable attachments.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.TruckProto.CapacityBase">
            <summary>
            Capacity of the truck. Do not use directly as the final value is affected by edicts.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.TruckProto.Attachments">
            <summary>
            Attachments that can be used on the truck - e.g. container, tank.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.TruckProto.AttachmentWhenEmpty">
            <summary>
            Attachment used when truck is empty.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Trucks.TruckProto.AllowedProducts">
            <summary>
            Products that can be transported by the truck.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.TruckProto.m_productsFilter">
            <summary>
            Filter for <see cref="P:Mafi.Core.Vehicles.Trucks.TruckProto.AllowedProducts"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.TruckProto.DumpedThicknessByDistance">
            <summary>
            Specifies how much of material can be dumped at particular radius around target tile. Length of this array
            naturally specifies dumping radius.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.TruckProto.MinDumpIterationsWithoutQuantityChanged">
            <summary>
            Minimum amount of dump iterations while no truck quantity changed before declaring it done.
            This helps with waiting on terrain physics simulation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.TruckProto.CargoPickupDuration">
            <summary>
            Duration of cargo pickup from (or delivery to) storage.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.TruckProto.Gfx.SteeringWheelsSubmodelPaths">
            <summary>
            Paths to the submodels of steering wheels in the game object hierarchy of the truck.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Trucks.TruckProto.Gfx.StaticWheelsSubmodelPaths">
            <summary>
            Paths to the submodels of non-steering wheels in the game object hierarchy of the truck.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.AttachRocketToLaunchPadJob.Factory.EnqueueJob(Mafi.Core.Vehicles.RocketTransporters.RocketTransporter,Mafi.Core.Buildings.SpaceProgram.RocketLaunchPad)">
            <summary>
            Creates and enqueues a job for navigation towards given goal. If the navigation fails all other jobs will be
            canceled.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.CargoDeliveryJob">
            <summary>
            Represents a job in which a vehicle delivers some cargo to a input port.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Jobs.CargoDeliveryJob.m_cargoTakenFromTruck">
            <summary>
            Cargo from Truck is first gradually moved to this buffer and after it is done, it is all moved to the
            storage.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Jobs.CargoDeliveryJob.m_secondaryBuffers">
            <summary>
            Secondary delivery target that are reasonably close so we can just teleport
             rest of our cargo to them. These deliveries are still subject to reservations.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.CargoPickUpJob">
            <summary>
            Represents a job in which a vehicle picks up some cargo from output port.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Jobs.CargoPickUpJob.m_loadedOnTruck">
            <summary>
            Tracks how we progressively add cargo to the truck to animate the addition.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Jobs.CargoPickUpJob.m_secondaryBuffers">
            <summary>
            Secondary delivery target that are reasonably close so we can just teleport
             rest of our cargo to them. These deliveries are still subject to reservations.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.CleanExcavatorJob">
            <summary>
            Job that resets Excavator to a default state - no cargo, cabin at default position, truck queue disabled.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.DumpingJob">
            <summary>
            Represents a job in which a vehicle dumps material on terrain using an assigned terrain designation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Jobs.DumpingJob.DONE_WAITING_TICKS">
            <summary>
            How many ticks to wait after designation was filled successfully. We have this delay to wait for potential
            terrain falling.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Jobs.DumpingJob.StateChanged">
            <summary>
            Whether the state changed last update.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.DumpingJob.findClosestTileCoordToDump(Mafi.Core.Terrain.Designation.TerrainDesignation,Mafi.Fix64@)">
            <summary>
            Finds the closest tile available for dumping. Returns null when no tile is available.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.DumpingJob.handleWaitingForFulfilled">
            <summary>
            When designation is fulfilled, we wait little bit to make sure it stays this way.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.DumpingJob.handleCheckAllFulfilled">
             <summary>
             Waits a little (for terrain physics) and moves all non-fulfilled designations from
             `m_fulfilledDesignations` to `m_extraDesignations` and promotes the first one to be the
             `m_primaryDesignation`.
            
             Returns <see cref="F:Mafi.Core.Vehicles.Jobs.DumpingJob.State.Done"/> if all designations are fulfilled.
             </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.EmptyJob">
            <summary>
            Empty job, mainly for testing.
            </summary>
            <remarks>This class cannot live in the test project because it needs generated serializer.</remarks>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.MiningJob">
            <summary>
            Represents a job in which an excavator mines material from the terrain using a terrain designation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Jobs.MiningJob.DONE_WAITING_DURATION">
            <summary>
            How many ticks to wait after designation was mined successfully. We have this delay to wait for potential
            terrain falling.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Jobs.MiningJob.TRUCK_QUEUE_ENABLED_DURATION">
            <summary>
            Duration of truck queue requests in this job. Should be long enough to cover excavator short movements
            during mining.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Jobs.MiningJob.StateChanged">
            <summary>
            Whether the state changed last update.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.MiningJob.findBestTileToMine(Mafi.Option{Mafi.Core.Products.LooseProductProto})">
            <summary>
            Tries to find the best tile for mining according to cost function. This functions fills up <see
            cref="F:Mafi.Core.Vehicles.Jobs.MiningJob.m_preferredProductToMine"/> and <see cref="F:Mafi.Core.Vehicles.Jobs.MiningJob.m_tileToMine"/> that can be then used by <see cref="M:Mafi.Core.Vehicles.Jobs.MiningJob.handleMining"/>.
            </summary>
            <returns>True if a tile was found.</returns>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.MiningJob.targetTileCostFunction(Mafi.Core.Terrain.Designation.TerrainDesignation,Mafi.Core.Terrain.TerrainTile,Mafi.RelTile2i)">
            <summary>
            Cost function that is responsible for choosing the best tile on the designation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.MiningJob.handlePreparingToMine">
            <summary>
            Prepares shovel and cabin for mining.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.MiningJob.handleMining">
            <summary>
            Performs the mining operation.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.MiningJob.handleWaitingForFulfilled">
            <summary>
            When designation is fulfilled, we wait little bit to make sure it stays this way.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.MiningJob.handleCheckAllFulfilled">
             <summary>
             Waits a little (for terrain physics) and moves all non-fulfilled designations from
             `m_fulfilledDesignations` to `m_extraDesignations` and promotes the first one to be the
             `m_primaryDesignation`.
            
             Returns <see cref="F:Mafi.Core.Vehicles.Jobs.MiningJob.State.Done"/> if all designations are fulfilled.
             </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.NavigateToJob.Factory.EnqueueJob(Mafi.Core.Entities.Dynamic.Vehicle,Mafi.Core.PathFinding.Goals.IVehicleGoalFull,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates and enqueues a job for navigation towards given goal. If the navigation fails all other jobs will be
            canceled.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.RefuelOtherVehicleJob">
            <summary>
            Job for refueling other vehicle using fuel we have as cargo. This job expects to be executed once we (the vehicle
            executing it) have cargo usable as fuel for the vehicle to be refueled and we are reasonably close to the vehicle
            being refueled. The job pauses navigation of the vehicle being refueled, navigates to it, refuels it and resumes
            its navigation.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.RefuelVehicleJob">
            <summary>
            Represents a job that drives vehicle to a given <see cref="T:Mafi.Core.Buildings.FuelStations.FuelStation"/> and refuels its tank there.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Jobs.RefuelVehicleJob.REFUELLING_DURATION">
            <summary>
            Duration of refueling in a <see cref="T:Mafi.Core.Buildings.FuelStations.FuelStation"/>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.RefuelVehicleJob.Mafi#Core#Vehicles#Jobs#IRefuelVehicleJobFriend#Initialize(Mafi.Core.Entities.Dynamic.Vehicle,Mafi.Core.Vehicles.RegisteredOutputBuffer)">
            <param name="vehicle">Has to be vehicle with a fuel tank.</param>
            <param name="outputBuffer">Has to be a source of fuel.</param>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.ReturnHomeJob.Factory.EnqueueJob(Mafi.Core.Entities.Dynamic.Vehicle,System.Boolean,System.Boolean)">
            <summary>
            Creates and enqueues a job for navigation towards given goal. If the navigation fails all other jobs will be
            canceled.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.ScrapVehicleInDepotJob">
            <summary>
            Drives vehicle to the depot and despawns it there.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Jobs.ScrapVehicleInDepotJob.IsTrueJob">
            <summary>
            Go to depot job is not true job until the vehicle starts driving to the depot.
            </summary>
            <remarks>
            We do not want to assign it a new job when is driving to the depot because that would result in vehicle
            driving through the depot to its goal and ignoring doors.
            </remarks>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.SpawnJob">
            <summary>
            Spawns vehicle and drives it out of the depot.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.TreeHarvesterLoadTruckJob">
            <summary>
            TreeHarvester job for moving harvester's cargo to a truck.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.TreeHarvestingJob">
            <summary>
            TreeHarvester job for cutting down a single tree.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.TreeHarvestingTruckJob">
            <summary>
            Job for harvesting a tree with a truck.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Jobs.VehicleJob.IsTrueJob">
            <summary>
            Whether this job is "true" job and entity should not be seeking for another job. An example of non-true job
            is returning to depot where a vehicle can get another job instead.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Jobs.VehicleJob.CurrentFuelConsumption">
            <summary>
            How much of fuel is the job currently consuming.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Jobs.VehicleJob.IsBeingCancelled">
            <summary>
            Whether this job is being cancelled.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.VehicleJob.DoJob">
            <summary>
            Performs one step of the job.
            </summary>
            <returns>True if there is more work, false if all work was done.</returns>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.VehicleJob.DoJobInternal">
            <summary>
            Performs one step of the job.
            </summary>
            <returns>True if there is more work, false if all work was done.</returns>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.VehicleJob.RequestCancelReturnDeadline">
            <summary>
            Default implementation declared the job cancelled immediately. Override this if you need to do some extra
            work in order to cancel the job and return <c>false</c>.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.VehicleJob.ReturnToPool">
            <summary>
            Returns this job to the pool. This is called by the <see cref="T:Mafi.Core.Vehicles.Jobs.VehicleJobsSequence"/> when job is finished or
            cancelled.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Jobs.VehicleJobsSequence.m_canceling">
            <summary>
            Flag that is set when this sequence is cancelling.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Jobs.VehicleJobsSequence.m_vehicle">
            <summary>
            The vehicle this job queue operates on.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.VehicleJobsSequence.EnqueueJob(Mafi.Core.Vehicles.Jobs.VehicleJob)">
            <summary>
            Adds given job to the end of the sequence.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.VehicleJobsSequence.AddFirst(Mafi.Core.Vehicles.Jobs.VehicleJob)">
            <summary>
            Adds given job at the front of the sequence.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.VehicleJobsSequence.MoveToBack(System.Int32)">
            <summary>
            Moves job at given index (0 being front of the queue) to the back of the queue.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.VehicleJobsSequence.DoJob">
            <summary>
            Performs a first job in the sequence.
            </summary>
            <returns>True if there is more work, false if all work is done.</returns>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.VehicleJobsSequence.CancelAll">
            <summary>
            Cancels and removes all cancellable jobs in the sequence.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.VehicleJobsSequence.cancelAll(Mafi.Option{Mafi.Core.Vehicles.Jobs.VehicleJob})">
            <summary>
            Requests cancellation for all jobs and removes ones that were cancelled immediately.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.VehicleQueueJob`1">
            <summary>
            Job for queueing in a VehicleQueue.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.Jobs.VehicleQueueJob`1.m_queueTipJob">
            <summary>
            Job to be started after the vehicle gets to the front of the queue. If the job is specified the vehicle is
            released from the queue after the job is done. If the job is not specified the vehicle waits in the queue
            until it is released by someone (presumably owner of the queue).
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.VehicleQueueJob`1.navigateToEntityFormLine">
            <summary>
            Makes the vehicle navigate to the goal entity.
            </summary>
            <returns>Whether the navigation is in progress.</returns>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.VehicleQueueJob`1.IsReadyAtQueueTip">
            <summary>
            Whether the vehicle is waiting at front of the queue and is ready for loading. If not, it automatically goes
            closer to the front of the queue.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.VehicleQueueJob`1.Released">
            <summary>
            Called by the queue to inform us that we were released (removed) from the queue.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.WaitingJob">
            <summary>
            Job for simple waiting.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.DriveToJobFactory.CreateJob(Mafi.Core.Entities.Dynamic.Vehicle,Mafi.Tile2f,System.Boolean,Mafi.RelTile1f,System.Boolean,System.Nullable{Mafi.Duration})">
            <summary>
            Creates and returns a job for driving to a given goal. If <paramref name="targetIsTerminal"/> is set then
            vehicle will smoothly stop at given goal. Otherwise it will go full speed until it reaches goal or gets
            closer than <paramref name="finishedThreshold"/>.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Jobs.ICargoPickUpJob.CargoToPickup">
            <summary>
            Product and quantity requested by this job.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.IJobProvider`1">
            <summary>
            Represents a job provider for a vehicle.
            When a vehicle is without job it asks its job provider to get a next job.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.IQueueTipJob">
            <summary>
            Represents a job to be started after a vehicle gets to the front of the queue. The vehicle stays at the front of
            the queue until tho job is done. After the job is done, the vehicle is released from the queue.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Jobs.IQueueTipJob.Done">
            <summary>
            Invoked when the job is done - either completed, or cancelled.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Jobs.IQueueTipJob.WaitBehindQueueTipVehicle">
            <summary>
            Whether the next vehicle in queue should wait behind owner of this job or behind owner of the whole queue.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Jobs.IVehicleJobReadOnly.JobInfo">
            <summary>
            Returns job description for the player.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.IVehicleJob">
            <summary>
            Represents an abstract task of a vehicle. This task can be queried for info of current operation or canceled.
            </summary>
            <remarks>
            It is responsibility of individual jobs to call <see cref="!:VehicleJobsSequence.CancelAll(bool)"/> when the job gets
            canceled to cancel whole sequence. There might be some jobs that may not require canceling the whole sequence.
            </remarks>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.IVehicleJob.RequestCancel">
            <summary>
            Requests job cancellation. Returns <c>true</c> if the job was cancelled immediately and can be removed
            from the queue. This will notify all involved entities to drop it.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Jobs.IVehicleJob.SkipNoMovementMonitoring">
            <summary>
            Whether this job is purposefully not moving with the vehicle, such as waiting.
            Vehicles are monitored for movement to detect when they are stuck.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Jobs.IVehicleJob.CurrentFuelConsumption">
            <summary>
            How much of fuel is the job currently consuming.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.JobResult">
            <summary>
            Result of <see cref="T:Mafi.Core.Vehicles.Jobs.IVehicleJob"/>
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Jobs.JobResult.NextJob">
            <summary>
            Next job that should the assigned vehicle execute.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.Jobs.JobResult.Cargo">
            <summary>
            New cargo value that should be assigned to the vehicle.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.ParkAndWaitJobFactory">
            <summary>
            Factory for a job(s) that navigate a vehicle to given static entity and wait there. Doesn't represent a factory
            for a new specific job as other factories in the same namespace usually do.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.Jobs.ParkAndWaitJobFactory.TryEnqueueParkingJobIfNeeded(Mafi.Core.Entities.Dynamic.Vehicle,Mafi.Core.Entities.Static.ILayoutEntity,System.Nullable{Mafi.RelTile1f})">
            <summary>
            Use to park vehicle at given static entity. Either enqueues navigation to the entity or waiting at the
            entity.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.Jobs.RefuelOtherVehicleJobFactory">
            <summary>
            This class should only be instantiated in <see cref="T:Mafi.Core.Buildings.FuelStations.FuelStationsManager"/>.
            TODO: move this inside <see cref="T:Mafi.Core.Buildings.FuelStations.FuelStationsManager"/>
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.BufferStrategy.LowestNoQuantityPreference">
             <summary>
             Strategy where the entity is fine with logistics trying to utilize full trucks.
            
             Strongly not recommended for situation where entity needs to get / remove all the products.
             </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.BufferStrategy.OptimalQuantity">
             <summary>
             Optimal quantity is used by entities to inform logistics on what quantities are considered optimal when
             delivered / removed to / from them. For instance in case of a machine that takes 8 quantity per recipe
             in does not make sense to rush to give it 1 quantity. The same example is when finishing construction,
             if there is 5 parts left, 4 will not cut it anyway.
            
             Optimal quantity can be even null which is equivalent of MaxQuantity. By this the entity state that it
             does not care about specific quantity. This is for storages. Their priority is not to be full or empty,
             their priority is to make logistics run smoothly. This would obviously backfire for entities
             that need all the products to finish, like for instance construction.
            
             When pairing two buffers we apply the following rules:
             1) Take minimal from both optimals => at least on buffer's optimal should be satisfied
             2) If optimal is not set it gets set to MaxQuantity
             3) Clamp optimal with max truck capacity (this means entities don't need to worry with overshooting truck cap)
             4) IMPORTANT: Balance iff quantity to exchange is at least as big as optimal
             => So if there is less to exchange then is optimal, balancing won't happen.
            
             This has several nice implications.
             1) Entities don't need to care much about truck sizes. They can help logistics by using nice sizes of buffers
             and optimal quantities but it will not affect their correctness.
             2) Balancing is not performed unless it provides value for at least one party or it utilizes full truck
             3) Priority implementors don't need to decide their prios / optimal quantities based on available quantities
                as this is decided for them.
            
             There is one tricky case that could go wrong:
             If we return optimal quantity greater than what we can exchange we might never be able to finish. Or in fact
             we are at mercy of other buffer to hopefully have optimal quantity close to what we can exchange. That is why
             optimal = null is not recommended for things that need exact amount of products to finish.
            
             There is a cheat to force things to always happen which is Optimal = 1. We use it in very special cases like
             deconstruction where if we wouldn't do it, things would end up in shipyard. We also use it when clearing
             storage but it might not be that necessary.
            
             </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.RegisteredInputBuffer.JOBS_NO_WITHOUT_PENALTY">
            <summary>
            Initial number of jobs we don't penalize.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.RegisteredInputBuffer.IsAvailableCached">
            <summary>
            WARNING: Do not use this unless you called <see cref="M:Mafi.Core.Vehicles.RegisteredInputBuffer.RefreshPriorities"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.RegisteredInputBuffer.OptimalQuantityCached">
            <summary>
            WARNING: Do not use this unless you called <see cref="M:Mafi.Core.Vehicles.RegisteredInputBuffer.RefreshPriorities"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.RegisteredInputBuffer.RawPriorityCached">
            <summary>
            WARNING: Do not use this unless you called <see cref="M:Mafi.Core.Vehicles.RegisteredInputBuffer.RefreshPriorities"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.RegisteredInputBuffer.CombinedPriorityCached">
            <summary>
            WARNING: Do not use this unless you called <see cref="M:Mafi.Core.Vehicles.RegisteredInputBuffer.RefreshPriorities"/>.
            This priority includes penalty for already assigned vehicles. If you need the
            original priority use <see cref="F:Mafi.Core.Vehicles.RegisteredInputBuffer.RawPriorityCached"/>
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.RegisteredInputBuffer.StrategySlow">
            <summary>
            Do not use this in perf sensitive code.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.RegisteredInputBuffer.IsFallbackOnly">
             <summary>
             Indicates that this buffer is supposed to be used only as a last resort when
             we get into bad state otherwise (deconstructions, stuck with cargo).
            
             Currently provided by shipyard.
             </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.RegisteredInputBuffer.ReceiveCargo(Mafi.Core.Vehicles.Jobs.ICargoDeliveryJob,Mafi.Quantity,Mafi.Quantity)">
            <summary>
            Returns amount of received cargo.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.RegisteredOutputBuffer.IsAvailableCached">
            <summary>
            WARNING: Do not use this unless you called <see cref="M:Mafi.Core.Vehicles.RegisteredOutputBuffer.RefreshPriorities(System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.RegisteredOutputBuffer.OptimalQuantityCached">
            <summary>
            WARNING: Do not use this unless you called <see cref="M:Mafi.Core.Vehicles.RegisteredOutputBuffer.RefreshPriorities(System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.RegisteredOutputBuffer.RawPriorityCached">
            <summary>
            WARNING: Do not use this unless you called <see cref="M:Mafi.Core.Vehicles.RegisteredOutputBuffer.RefreshPriorities(System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.RegisteredOutputBuffer.CombinedPriorityCached">
            <summary>
            WARNING: Do not use this unless you called <see cref="M:Mafi.Core.Vehicles.RegisteredOutputBuffer.RefreshPriorities(System.Boolean)"/>.
            This priority includes penalty for already assigned vehicles. If you need the
            original priority use <see cref="F:Mafi.Core.Vehicles.RegisteredOutputBuffer.RawPriorityCached"/>
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.RegisteredOutputBuffer.StrategySlow">
            <summary>
            Do not use this in perf sensitive code.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.RegisteredOutputBuffer.UseFallbackIfNeeded">
             <summary>
             Indicates that this buffer has such a important role that we need to try to
             pair it with fallback buffer if we can't satisfy it otherwise.
            
             Used by deconstruction to dump stuff into shipyard.
             </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.RegisteredOutputBuffer.GetCargo(Mafi.Core.Vehicles.Jobs.ICargoPickUpJob,Mafi.Quantity,Mafi.Quantity)">
            <summary>
            Returns how much was removed
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.RobustNavHelper.StepNavigation">
            <summary>
            Returns true when done.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.RotatingCabinDriver.m_entity">
            <summary>
            The entity owning the cabin.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.RotatingCabinDriver.CabinDirection">
            <summary>
            Absolute direction of the cabin.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.RotatingCabinDriver.CabinDirectionRelative">
            <summary>
            Direction of the cabin relative to the body of its entity.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.RotatingCabinDriver.IsCabinAtTarget">
            <summary>
            Whether the cabin has reached requested target and is at rest.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.RotatingCabinDriver.CabinTarget">
            <summary>
            Target location that cabin should point to.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.RotatingCabinDriver.Update">
            <summary>
            Updates rotation of the cabin. To be called every simulation update.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.TreeHarvesters.TreeHarvester.AssignedVehicles">
            <summary>
            Set of all assigned trucks that work for this harvester.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.TreeHarvesters.TreeHarvester.TreeToBeCut">
            <summary>
            Tree that is currently being chopped.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.TreeHarvesters.TreeHarvester.TruckToBeLoaded">
            <summary>
            Current truck that is being loaded.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.TreeHarvesters.TreeHarvester.ArmStateChangeSpeedFactor">
            <summary>
            Speed factor used for arm state change.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.TreeHarvesters.TreeHarvester.TruckQueue">
            <summary>
            Trucks that are waiting to be loaded.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.TreeHarvesters.TreeHarvester.StartCargoUnloadTo(Mafi.Core.Vehicles.Trucks.Truck)">
            <summary>
            This should be called only when harvester is finished with tree cutting and has cargo
            </summary>
            <remarks>
            This method intentionally does not check all the pre-conditions but only asserts them to avoid live-loops
            where buggy jobs could would try to start unloading but due to some failed pre-condition unload would never
            actually start.
            </remarks>
        </member>
        <member name="M:Mafi.Core.Vehicles.TreeHarvesters.TreeHarvesterJobProvider.tryGetTreeHarvestingJob(Mafi.Core.Vehicles.TreeHarvesters.TreeHarvester)">
            <summary>
            Attempts to get a tree harvesting job for the harvester.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.TreeHarvesters.TreeHarvesterJobProvider.tryGetTruckLoadingJob(Mafi.Core.Vehicles.TreeHarvesters.TreeHarvester)">
            <summary>
            Creates a job unloading a cargo of the harvester onto a truck.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.TreeHarvesters.TreeHarvesterProto.RotatingCabinDriverProto">
            <summary>
            Parameters of the cabin driver.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.TreeHarvesters.TreeHarvesterProto.Timings">
            <summary>
            Timing parameters of tree harvesting, used in simulation.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.TreeHarvesters.TreeHarvesterProto.Timings.CuttingDuration">
            <summary>
            Time it takes for the harvester's saw to saw off a tree.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.TreeHarvesters.TreeHarvesterProto.Timings.TrimmingDuration">
            <summary>
            The time it takes for the harvester to cut off branches of a tree. This is done after a tree is cut and
            layed down.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.VehicleBuffersRegistry.RegisteredBuffers.LastProcessedSimStep">
            <summary>
            The last sim step in which these buffers were being rebalanced by logistics.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.VehicleBuffersRegistry.m_buffersTmp">
             <summary>
             We are using list because we sort via Comparison instead of Comparator. Array.sort causes
             allocations when used with Comparator. Comparison cannot be used for Lyst because Array.sort
             with Comparison arg does not accept a range selection (it would be touching nulls in Lyst). However
             I still see some allocations from GetHashCode (but not coming from sort) and I'm not sure. Maybe
             we might need to implement our own Sort. Or there is some other work causing besides Sort.
            
             Some perf tests are in SortPerformanceTest.cs but results are mixed.
            
             TODO: Get rid of allocations entirely.
             </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.VehicleBuffersRegistry.TryGetProductInputForVehicle(Mafi.Core.Entities.Dynamic.Vehicle,Mafi.Core.ProductQuantity,Mafi.Option{Mafi.Collections.IReadOnlySet{Mafi.Core.Entities.Static.IEntityAssignedAsInput}},System.Boolean@,System.Boolean)">
            <summary>
            Finds the most suitable input buffer. It always prioritizes entities with the highest priority. And then the
            closest ones. If you provide preferredEntities it will try these before fallbacking.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.VehicleBuffersRegistry.TryGetProductOutputForVehicle(Mafi.Core.Entities.Dynamic.Vehicle,Mafi.Core.Products.ProductProto,Mafi.Core.Entities.Static.IStaticEntity,Mafi.Collections.IReadOnlySet{Mafi.Core.Entities.Static.IEntityAssignedAsOutput},System.Boolean)">
            <summary>
            Finds the most suitable output buffer. It always prioritizes entities with the highest priority. And then the
            closest ones. If you provide preferredEntities it will try these before fallbacking. You can also define
            entity to ignore (useful to avoid delivering yourself).
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.VehicleBuffersRegistry.GetBalancingLatency">
             <summary>
             TODO: No longer true. Called also from our balancing code.
             For UI. Don't call often.
            
             Logistics scans balancing jobs by taking each product one by one. If there are some products that
             we did not manage to balance for some time already it means logistics is getting overloaded with work.
             Idle logistics will have latency close to 0 sec. While a busy one will reach 10's of seconds.
             </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.VehicleBuffersRegistry.tryToAddMoreConstructionJobs(Mafi.Core.Vehicles.Trucks.Truck,Mafi.Quantity,Mafi.Core.Vehicles.VehicleBuffersRegistry.RegisteredBuffers,Mafi.Core.Vehicles.RegisteredInputBuffer,Mafi.Core.Vehicles.RegisteredOutputBuffer,Mafi.Option{Mafi.Collections.Lyst{Mafi.Core.Vehicles.SecondaryInputBufferSpec}}@,Mafi.Option{Mafi.Collections.Lyst{Mafi.Core.Vehicles.SecondaryOutputBufferSpec}}@)">
            <summary>
            Tries to add more nearby targets to an already existing scheduled job.
            So if we have a delivery target we try to find other delivery target nearby
            as long as we are able to increase reservation of cargo that we can pick up.
            We also do the same the opposite way, we try to add multiple pick up
            points.
            However, there are still strong limitations. The first limitation
            is that we only expand delivery or pick up targets, not both at the same time
            due to combinatorial costs. Second limitation is that we do this only for
            (de)construction / upgrade buffers. Otherwise we would have to go through
            the pain of handling assigned routes and all that stuff. Also performance
            wise this does not hurt much for constructions because we will definitely
            get savings on unnecessary jobs.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.VehicleQueue`2">
            <summary>
            Registers trucks arriving for material to an entity. The trucks are either registered as arriving or waiting.
            Waiting trucks already arrived and are waiting in the queue behind vehicle before them. Arriving trucks are
            currently heading (navigating) to the queue.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.VehicleQueue`2.WaitingVehicleJobs">
            <summary>
            Queueing jobs of trucks waiting in the queue.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.VehicleQueue`2.ArrivingVehicleJobs">
            <summary>
            List of trucks arriving to the queue.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.VehicleQueue`2.IsEnabled">
            <summary>
            Whether the queue is enabled and accepts Trucks.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.VehicleQueue`2.ReleaseFirstVehicle">
            <summary>
            Releases the first vehicle from the queue.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.VehicleQueue`2.Mafi#Core#Vehicles#IVehicleQueueFriend{TVehicle}#RemoveWaitingJob(Mafi.Core.Vehicles.Jobs.VehicleQueueJob{`0})">
            <summary>
            To be only called by the job itself.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.VehicleQueue`2.Mafi#Core#Vehicles#IVehicleQueueFriend{TVehicle}#GetWaitTargetFor(Mafi.Core.Vehicles.Jobs.VehicleQueueJob{`0})">
            <summary>
            Returns an entity that given truck should be waiting behind. This enables to form lines. Trucks has to first
            register as waiting <see cref="!:VehicleArrivedAndWaiting"/> before calling this. If Option.None is returned,
            the vehicle should wait behind queue owner.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.VehicleQueue`2.ReleaseVehiclesOverLimit(System.Int32)">
            <summary>
            Releases trucks from end of the queue to conform to given maximum count of trucks registered.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.VehicleQueue`2.Clear">
            <summary>
            Releases all trucks from the queue.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.VehicleQueue`2.Enable">
            <summary>
            Enables the queue - allows trucks to register with it.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.VehicleQueue`2.Disable">
            <summary>
            Releases all trucks from the queue and prevents new trucks from registering with the queue by disbaling it.
            </summary>
        </member>
        <member name="P:Mafi.Core.Vehicles.VehiclesManager.OnVehicleDespawned">
            <summary>
            Register here to get notified when a vehicle is despawned.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.VehiclesManager.TryEnqueueScrapJob(Mafi.Core.Entities.Dynamic.Vehicle)">
            <summary>
            Assign a job in which the vehicle goes to its depot for despawn. Returns true if succeeded.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.VehicleSurfaceProvider">
            <summary>
            Vehicle surface provider that takes account terrain and static entities that have <see
            cref="P:Mafi.Core.Entities.Static.IStaticEntity.VehicleSurfaceHeights"/> set.
            </summary>
        </member>
        <member name="M:Mafi.Core.Vehicles.IVehiclesManager.TryEnqueueScrapJob(Mafi.Core.Entities.Dynamic.Vehicle)">
            <summary>
            Sends given vehicle to the closest depot and despawns it there.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.RobustNavResult.Navigating">
            <summary>
            Path-finding is ongoing or vehicle is driving to its destination.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.RobustNavResult.GoalReachedSuccessfully">
            <summary>
            Goal was reached successfully.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.RobustNavResult.FailGoalUnreachable">
            <summary>
            Goal is unreachable or does not exist.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.VehicleFuelConsumption.None">
            <summary>
            No fuel consumed.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.VehicleFuelConsumption.Idle">
            <summary>
            Fuels is consumed but slowly - vehicle is idle.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.VehicleFuelConsumption.Full">
            <summary>
            Full fuel consumption.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.VehicleStats.Owned">
            <summary>
            Number of owned vehicles.
            </summary>
        </member>
        <member name="F:Mafi.Core.Vehicles.VehicleStats.Assignable">
            <summary>
            Number of vehicles that can be assigned.
            </summary>
        </member>
        <member name="T:Mafi.Core.Vehicles.IVehicleSurfaceProvider">
            <summary>
            Provides information about vehicle surface. This is usually a combination of terrain and static entities.
            </summary>
        </member>
        <member name="T:Mafi.Core.Simulation.Calendar">
            <summary>
            Keeps track of in-game time. Provides calendar events to be subscribed to and conversions from real time to
            in-game time. These are not real calendar events but in-game calendar events where everything takes less time.
            </summary>
        </member>
        <member name="F:Mafi.Core.Simulation.Calendar.SIM_STEPS_PER_DAY">
            <summary>
            One day is 2 seconds. This makes 1 month exactly 1 minute long and 1 year is exactly 12 minutes.
            </summary>
        </member>
        <member name="T:Mafi.Core.Simulation.SetSimPauseStateCmd">
            <summary>
            Pauses or resumes the game.
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ICalendar.NewYear">
            <summary>
            Called when new year starts. Called on Sim thread at update end.
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ICalendar.NewMonthStart">
            <summary>
            Called when new month starts right after <see cref="P:Mafi.Core.Simulation.ICalendar.NewMonth"/>. Always called before <see cref="P:Mafi.Core.Simulation.ICalendar.NewYear"/>.
            Called on Sim thread at update end.
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ICalendar.NewMonth">
            <summary>
            Called when new month starts. Always called before <see cref="P:Mafi.Core.Simulation.ICalendar.NewYear"/>. Called on Sim thread at update end.
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ICalendar.NewMonthEnd">
            <summary>
            Called when new month starts right after <see cref="P:Mafi.Core.Simulation.ICalendar.NewMonth"/>. Always called before <see cref="P:Mafi.Core.Simulation.ICalendar.NewYear"/>. Called on Sim thread at update end.
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ICalendar.NewDay">
            <summary>
            Called when new day starts. Always called before <see cref="P:Mafi.Core.Simulation.ICalendar.NewMonth"/>. Called on Sim thread at update end.
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ICalendar.CurrentDate">
            <summary>
            Current in-game time since start of the game.
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ICalendar.RealTime">
            <summary>
            Current real duration since start of the game.
            </summary>
        </member>
        <member name="M:Mafi.Core.Simulation.ICalendar.DurationToRelTime(Mafi.Duration)">
            <summary>
            Conversion of real time to in-game time, may cause loss of precision.
            </summary>
        </member>
        <member name="M:Mafi.Core.Simulation.ICalendar.RelTimeToDuration(Mafi.RelGameDate)">
            <summary>
            Conversion of in-game time to real time.
            </summary>
        </member>
        <member name="T:Mafi.Core.Simulation.ISimLoopEvents">
             <summary>
             Simulation events for anybody to subscribe. All events are called on the simulation thread.
            
             The order of events called is following:
             0) Input commands are processed
             1) UpdateStart
             2) Update
             3) UpdateEnd
             </summary>
             <remarks>
             The sim loop events are invoked as follows:
             <code>
            	|	(ProcessCommands)
             |	UpdateAfterCmdProc()
             |
             |	if (not paused) {
            	|		UpdateAfterSync()
             |
            	|		for (number of sim steps based on game speed) {
            	|			if (current step > 0) {
            	|				(ProcessCommands)
            	|				UpdateAfterCmdProc()
            	|			}
            	|			UpdateStart()
            	|			Update()
            	|			UpdateEnd()
            	|		}
             |	}
             |
             |	UpdateEndForUi()
             </code>
             </remarks>
        </member>
        <member name="P:Mafi.Core.Simulation.ISimLoopEvents.CurrentStep">
            <summary>
            Current sim step.
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ISimLoopEvents.CurrentState">
            <summary>
            State of sim loop. What method is currently being invoked. This is useful for assertions and debugging.
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ISimLoopEvents.IsSimPaused">
            <summary>
            Whether the simulation is paused. In such case only commands are executed.
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ISimLoopEvents.SimSpeedMult">
            <summary>
            Game speed multiplier.
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ISimLoopEvents.IsInSimLoop">
            <summary>
            Whether the simulation loop is active (commands execution included).
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ISimLoopEvents.UpdateAfterCmdProc">
            <summary>
            Called after commands were processed. Note that this will be also called during pause.
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ISimLoopEvents.UpdateAfterSync">
            <summary>
            Called once after sync. Unlike other events, this one is called only after sync. This makes difference when
            there is more sim steps performed between syncs.
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ISimLoopEvents.UpdateStart">
            <summary>
            Called at the very beginning of the simulation loop right after commands are processed. Invoked on the
            simulation thread.
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ISimLoopEvents.Update">
            <summary>
            Called after <see cref="P:Mafi.Core.Simulation.ISimLoopEvents.UpdateStart"/> and should be used for core computations. Invoked on the simulation
            thread.
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ISimLoopEvents.UpdateEnd">
            <summary>
            Called after <see cref="P:Mafi.Core.Simulation.ISimLoopEvents.Update"/> as the very last event before sync state. This can be used for exchange of
            computed data between simulation components or for preparation of the synchronization operation. Invoked on
            the simulation thread.
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ISimLoopEvents.UpdateEndForUi">
            <summary>
            Called at the end of update and should be used only in UI. Unlike other events, this one is invoked even if
            the game is paused so that UI can process stuff during pause. Subscribers MUST NOT change game state here!
            </summary>
        </member>
        <member name="P:Mafi.Core.Simulation.ISimLoopEvents.Sync">
            <summary>
            Called when the sim thread is in sync with the main thread before any other actions are called. This is a
            place where to read values and swap buffers.
            </summary>
        </member>
        <member name="F:Mafi.Core.Simulation.SimLoopState.None">
            <summary>
            No game loop method is invoked right now.
            </summary>
        </member>
        <member name="P:Mafi.Core.Stats.ItemStats.IsMonthlyEvent">
            <summary>
            Whether this event is daily on monthly. For daily events,
            </summary>
        </member>
        <member name="M:Mafi.Core.Stats.ItemStats.#ctor(System.Boolean,Mafi.Option{Mafi.Core.Stats.StatsManager})">
            <param name="isMonthlyEvent">If true, this event will be updated only monthly, daily data will be empty.</param>
            <param name="manager">If set, event will be updated automatically, otherwise, owner is responsible
            for calling methods from <see cref="T:Mafi.Core.Stats.IItemStatsEvents"/>.</param>
        </member>
        <member name="M:Mafi.Core.Stats.ItemStats.AddValue(System.Int64)">
            <summary>
            Adds value to the daily/monthly total.
            </summary>
        </member>
        <member name="P:Mafi.Core.Stats.ItemStats`1.LastDay">
            <summary>
            Total for the last (finished) day.
            </summary>
        </member>
        <member name="P:Mafi.Core.Stats.ItemStats`1.LastMonth">
            <summary>
            Total for the last (finished) month.
            </summary>
        </member>
        <member name="P:Mafi.Core.Stats.ItemStats`1.ThisYear">
            <summary>
            Total for the current ongoing month (updated daily).
            </summary>
        </member>
        <member name="P:Mafi.Core.Stats.ItemStats`1.LastYear">
            <summary>
            Total for the last (finished) year.
            </summary>
        </member>
        <member name="M:Mafi.Core.Stats.StatsManager.RegisterForYearlyUpdatesOnly(Mafi.Core.Stats.ItemStats)">
            <summary>
            Handy for cases where daily/monthly events are handled by some other class but yearly should be just
            updated on NewYearEnd calendar event.
            </summary>
        </member>
        <member name="M:Mafi.Core.Stats.IFuelStatsCollector.ReportFuelUseAndDestroy(Mafi.Core.Products.ProductProto,Mafi.Quantity,Mafi.Core.Stats.FuelUsedBy)">
            <summary>
            Reports the product to statistics and destroys it in product manager as used fuel.
            </summary>
        </member>
        <member name="M:Mafi.Core.Stats.IDataValuesFormatter.GetRangeAndTicksMax(System.Int64,System.Int64,System.Int32,System.Int64@,System.Int64@)">
            <summary>
            Returns range max and tick size for given range that is a "nice" round number.
            The range should have approximately <paramref name="recommendedCount"/> ticks.
            </summary>
        </member>
        <member name="T:Mafi.Core.Stats.RleSequence">
            <summary>
            Sequence of numbers compressed using RLE (run-length encoding).
            This compresses sequence like [0, 0, 0, 1, 1, 2, ...] into [3 x 0, 2 x 1, 1 x 2, ...]
            Max stored value is +-2^54 ~ 18,000,000,000,000,000.
            </summary>
            <remarks>
            Values are stored as longs, the high bits are used as (number of repetitions - 1).
            </remarks>
        </member>
        <member name="F:Mafi.Core.Stats.RleSequence.REPS_BITS">
            <summary>
            Number of bits for the repetition count. The value will have the rest of ulong.
            </summary>
        </member>
        <member name="P:Mafi.Core.Stats.RleSequence.Count">
            <summary>
            Number of stored values (uncompressed).
            </summary>
        </member>
        <member name="F:Mafi.Core.Stats.RleSequence.m_rleValues">
            <summary>
            RLE values. Length of this array must be a power of two to be able to use bit operations instead of modulo.
            </summary>
        </member>
        <member name="F:Mafi.Core.Stats.RleSequence.m_rleValuesCount">
            <summary>
            Number of stored RLE Values.
            </summary>
        </member>
        <member name="M:Mafi.Core.Stats.RleSequence.GetSumOfLastNValues(System.Int32)">
            <summary>
            Returns sum of last n elements. Works directly on compressed data.
            </summary>
        </member>
        <member name="M:Mafi.Core.Stats.RleSequence.GetMaxOfLastNValues(System.Int32)">
            <summary>
            Returns max of last n elements. Works directly on compressed data.
            </summary>
        </member>
        <member name="M:Mafi.Core.Stats.RleSequence.GetAvgOfLastNValues(System.Int32)">
            <summary>
            Returns average of last n elements by working directly on compressed data.
            </summary>
        </member>
        <member name="T:Mafi.Core.Stats.RleSequence.Enumerator">
            <summary>
            Enumerates from the newest to the oldest.
            </summary>
        </member>
        <member name="T:Mafi.Core.Utils.RelGameDateTimer">
            <summary>
            Simple timer that counts in game date.
            </summary>
        </member>
        <member name="P:Mafi.Core.Utils.RelGameDateTimer.Remaining">
            <summary>
            Remaining date interval left. This number may be negative if timer was decremented too many times.
            </summary>
        </member>
        <member name="P:Mafi.Core.Utils.RelGameDateTimer.IsFinished">
            <summary>
            Whether number of remaining time is zero (or less).
            </summary>
        </member>
        <member name="M:Mafi.Core.Utils.RelGameDateTimer.Start(Mafi.RelGameDate)">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Mafi.Core.Utils.RelGameDateTimer.DecrementOneMonth">
            <summary>
            Decrements the timer by one month and returns <c>true</c> if the timer is still not finished.
            </summary>
        </member>
        <member name="T:Mafi.Core.Utils.ResolvedDepsValidator">
            <summary>
            This class ensures and verifies that dependencies are being resolved in deterministic manner.
            </summary>
        </member>
        <member name="T:Mafi.Core.Utils.TickTimer">
            <summary>
            Simple timer that counts game ticks. TODO: Make this a struct.
            </summary>
        </member>
        <member name="P:Mafi.Core.Utils.TickTimer.Ticks">
            <summary>
            Number of ticks left. This number may be negative if timer was decremented too many times.
            </summary>
        </member>
        <member name="P:Mafi.Core.Utils.TickTimer.IsFinished">
            <summary>
            Whether number of remaining ticks is zero (or less).
            </summary>
        </member>
        <member name="M:Mafi.Core.Utils.TickTimer.Start(Mafi.Duration)">
            <summary>
            Starts the timer.
            </summary>
        </member>
        <member name="M:Mafi.Core.Utils.TickTimer.Decrement">
            <summary>
            Decrements the timer and returns <c>true</c> if the timer is still not finished.
            </summary>
        </member>
        <member name="M:Mafi.Core.Utils.TickTimer.Reset">
            <summary>
            Resets timer to initial state - Ticks are zero and timer is thus finished.
            </summary>
        </member>
        <member name="T:Mafi.Core.Utils.TimelapseManager">
            <summary>
            Manages timelapses. This class is in core since it has savable state.
            </summary>
        </member>
        <member name="T:Mafi.Core.Utils.WaitHelper">
             <summary>
             Helper class that counts ticks of waiting. It can handle increasing delay of consecutive failures. For usage see
             example below.
             </summary>
             <example>
             This is intended use of the WaitHelper class.
             <code>
             WaitHelper waiter;
            
             bool SearchSomething() {
             	if (waiter.WaitOne()) {
             		return false; // Waiting.
             	}
            
             	if (search()) {
             		waiter.ResetExtraWaitTime(); // Resets retries and wait time.
             		return true; // Success.
             	} else if (waiter.StartWait(true)) {
             		return false;
             	} else {
             		waiter.ResetExtraWaitTime();
             		return true; // Max retries was reached, do something about it!
             	}
             }
             </code>
             </example>
        </member>
        <member name="F:Mafi.Core.Utils.WaitHelper.WAIT_TICKS">
            <summary>
            Default initial number of waiting ticks.
            </summary>
        </member>
        <member name="F:Mafi.Core.Utils.WaitHelper.MAX_WAIT_TICKS">
            <summary>
            Maximum wait in ticks.
            </summary>
            <remarks>This number is intentionally a prime to avoid periodicity of more independent timers.</remarks>
        </member>
        <member name="F:Mafi.Core.Utils.WaitHelper.PROGRESSIVE_MULT">
            <summary>
            Increase by 20%.
            </summary>
        </member>
        <member name="F:Mafi.Core.Utils.WaitHelper.m_initialWaitTicks">
            <summary>
            Initial number of waiting ticks.
            </summary>
        </member>
        <member name="F:Mafi.Core.Utils.WaitHelper.m_retriesCount">
            <summary>
            Current count of consecutive retries from last reset.
            </summary>
        </member>
        <member name="M:Mafi.Core.Utils.WaitHelper.StartWait(Mafi.Duration)">
            <summary>
            Starts the wait and optionally increases the wait time for the next wait. Also increases retries count.
            Returns false if maximum retries was reached.
            </summary>
        </member>
        <member name="M:Mafi.Core.Utils.WaitHelper.WaitOne">
            <summary>
            Increases internal ticks count and returns if the caller should keep waiting. Returns true if the caller
            should wait more. It is intended that this statement is in a if branch that has return statement.
            </summary>
        </member>
        <member name="M:Mafi.Core.Utils.WaitHelper.Reset">
            <summary>
            Resets retries count and optionally extra wait time that was added by <see cref="M:Mafi.Core.Utils.WaitHelper.StartWait(Mafi.Duration)"/>.
            </summary>
        </member>
        <member name="T:Mafi.Core.Utils.XorRsr128PlusGenerator">
             <summary>
             Xor Rotate-shift-rotate pseudo-random generator has 128 bits of state and period of 2^128 - 1. Every 64-bit value
             expect zero is guaranteed to appear exactly 2^64 times in this period.The state must be seeded so that it is not
             everywhere zero.
             </summary>
             <remarks>
             Written in 2016 by David Blackman and Sebastiano Vigna (vigna@acm.org)
             * License: http://creativecommons.org/publicdomain/zero/1.0/
             * Original source: http://xoroshiro.di.unimi.it/xoroshiro128plus.c
            
             This is the successor to xorshift128+. It is the fastest full-period generator passing BigCrush without
             systematic failures, but due to the relatively short period it is acceptable only for applications with a mild
             amount of parallelism; otherwise, use a xorshift1024* generator.
            
             Beside passing BigCrush, this generator passes the PractRand test suite up to (and included) 16TB, with the
             exception of binary rank tests, which fail due to the lowest bit being an LFSR; all other bits pass all tests. We
             suggest to use a sign test to extract a random Boolean value.
            
             TODO: Improve https://www.pcg-random.org/
             </remarks>
        </member>
        <member name="F:Mafi.Core.Utils.XorRsr128PlusGenerator.m_generatorType">
            <summary>
            Whether this generator is affecting sim state.
            </summary>
        </member>
        <member name="M:Mafi.Core.Utils.XorRsr128PlusGenerator.NextUlong">
            <summary>
            Generates 64-bit random number using XorShift128+ algorithm. This method never returns 0.
            </summary>
            <remarks>WARNING: If the state is 0 this method always returns 0!</remarks>
        </member>
        <member name="M:Mafi.Core.Utils.XorRsr128PlusGenerator.Jump">
            <summary>
            This is the jump function for the generator. It is equivalent to 2^64 calls to next(). It can be used to
            generate 2^64 non-overlapping subsequences for parallel computations.
            </summary>
        </member>
        <member name="M:Mafi.Core.Utils.UiSearchUtils.MatchProtos``1(System.String,Mafi.Collections.ReadonlyCollections.IIndexable{``0},Mafi.Collections.Set{``0})">
            <summary>
            Can match in the following ways:
            1) e.g. query: 'B' or 'BF' (matches: Blast Furnace)
            2) otherwise just searches for each query word as a substring as long as
            the query is longer than 1 character.
            </summary>
        </member>
        <member name="P:Mafi.Core.SpaceProgram.RocketEntity.Position">
            <summary>
            This is only valid when not attached.
            </summary>
        </member>
        <member name="T:Mafi.Core.SpaceProgram.IRocketOwner">
            <summary>
            Enables entity to handle rockets. Note that owning entity is responsible for destroying of
            the rocket when itself is destroyed.
            </summary>
        </member>
        <member name="F:Mafi.Core.SpaceProgram.RocketProto.GroundOffset">
            <summary>
            Height offset of the rocket so that the rocket bottom is 2 tiles above the ground.
            </summary>
        </member>
        <member name="T:Mafi.Core.UiState.UiCameraState">
            <summary>
            Saveable state of the primary camera.
            </summary>
        </member>
        <member name="T:Mafi.Core.TileTransform">
            <summary>
            Immutable representation of transformation in tile space. Represents translation, rotation, and reflection. The
            order is: reflect, rotate, translate. This class also contain some pre-computed convenience members to help with
            application of this transformation.
            </summary>
        </member>
        <member name="F:Mafi.Core.TileTransform.Position">
            <summary>
            Absolute global tile coordinates.
            </summary>
        </member>
        <member name="F:Mafi.Core.TileTransform.Rotation">
            <summary>
            Rotation around the origin.
            </summary>
        </member>
        <member name="F:Mafi.Core.TileTransform.IsReflected">
            <summary>
            Reflection around x axis. Reflection is applied before rotation. Reflection around y axis is not needed, the
            same effect can be achieved by rotation and x reflection.
            </summary>
        </member>
        <member name="P:Mafi.Core.TileTransform.TransformMatrix">
            <summary>
            Transform matrix that can be used to apply rotation and reflection of this transform around (0, 0). It does
            not apply any translation. This matrix is pre-computed for efficient transformations.
            </summary>
        </member>
        <member name="M:Mafi.Core.TileTransform.Transform(Mafi.Rotation90)">
            <summary>
            Transforms given rotation according to this transformation.
            </summary>
        </member>
        <member name="M:Mafi.Core.TileTransform.Transform(Mafi.Direction90)">
            <summary>
            Transforms given rotation according to this transformation.
            </summary>
        </member>
        <member name="M:Mafi.Core.TileTransform.Transform(Mafi.AngleDegrees1f)">
            <summary>
            Transforms given angle according to this transformation.
            </summary>
        </member>
        <member name="T:Mafi.Core.IInitializer">
            <summary>
            Allow to run conditional code based on whether game is being loaded or not. Usage of this reduces the amount of
            constructor overloads that were typically needed.
            </summary>
        </member>
        <member name="P:Mafi.Core.IInitializer.IsBeingLoaded">
            <summary>
            Whether the caller is being instantiated during loading process.
            </summary>
        </member>
        <member name="M:Mafi.Core.IInitializer.DoOnNewGameOnly(System.Action)">
            <summary>
            The given action gets invoked only when new game is created (not from save file).
            NOTE: This should be used only in constructors of root classes.
            </summary>
        </member>
        <member name="M:Mafi.Core.IInitializer.DoOnNewGameOrAfterLoad(System.Action)">
            <summary>
            The given action gets invoked only (and immediately) when new game is created (not from save file) or after
            the game was fully loaded.
            NOTE: This should be used only in constructors of root classes.
            </summary>
        </member>
        <member name="M:Mafi.Core.Syncers.CollectionSyncer`2.#ctor(System.Func{`1},Mafi.Core.Syncers.ICollectionComparator{`0,`1},System.Action{`1,Mafi.Collections.Lyst{`0}})">
            <summary>
            Use <see cref="T:Mafi.Core.Syncers.CollectionSyncerFactory"/> instead this ctor.
            </summary>
        </member>
        <member name="T:Mafi.Core.Syncers.CompareFixedOrder`1">
            <summary>
            Compares two collections value by value in fixed order. Be careful when using this! This is expensive. Optimally
            try to use <see cref="T:Mafi.Core.Syncers.CompareByCount`1"/> or at least set <see cref="F:Mafi.Core.Syncers.SyncFrequency.MoreThanSec"/> interval on
            your updater.
            </summary>
        </member>
        <member name="T:Mafi.Core.Syncers.CompareByCount`1">
            <summary>
            Very efficient collections comparator using count but also very error prone. This works only with a very hard
            guarantee that collection is changed only by adding / removing values. So if you swap the observed collection
            with different one but with same size this won't pick it up. Currently we can use it in the UI because we
            invalidate onShow which forces the collection re-compute. That guarantees that only user actions can change the
            collection. And for user it is impossible to change more than one item per sync update (add recipe, vehicle,
            product).
            </summary>
        </member>
        <member name="T:Mafi.Core.Syncers.CompareByCountIndexable`1">
            <summary>
            <see cref="T:Mafi.Core.Syncers.CompareByCount`1"/> for more info.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mafi.Core.Syncers.IUiUpdater.SetOneTimeAfterSyncCallback(System.Action)" -->
        <member name="M:Mafi.Core.Syncers.IUiUpdater.AddChildUpdater(Mafi.Core.Syncers.IUiUpdater)">
            <summary>
            Adds a child updater. The given updater will have its render, sync methods called by this updater. Keep in
            mind that if this updater is using lower <see cref="T:Mafi.Core.Syncers.SyncFrequency"/> it will affect the child updater. So
            setting the child updater with anything below critical might be too much (with a delay x in both it would
            lead to x*x delay for the child).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mafi.Core.Syncers.IUiUpdater.Invalidate" -->
        <member name="T:Mafi.Core.Syncers.PeriodicSyncUpdateSyncer">
            <summary>
            Syncer that doesn't store any value. Just invokes user specified action periodically on sync.
            </summary>
        </member>
        <member name="P:Mafi.Core.Syncers.ISyncer`1.HasChanged">
            <summary>
            It is important that the this boolean is not reset by Syncer until it gets read by a Trigger.
            Otherwise next sync would clear this value and if no render (Trigger) was running at that time
            the change would be lost. This can happen when view gets hidden between sync and render phases.
            </summary>
        </member>
        <member name="T:Mafi.Core.UnlockingTree.CropProtoUnlock">
            <summary>
            Unlocks <see cref="T:Mafi.Core.UnlockingTree.CropProtoUnlock"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.UnlockingTree.CropProtoUnlock.Proto">
            <summary>
            Proto to be unlocked.
            </summary>
        </member>
        <member name="T:Mafi.Core.UnlockingTree.EdictUnlock">
            <summary>
            Unlocks <see cref="T:Mafi.Core.Products.ProductProto"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.UnlockingTree.EdictUnlock.Proto">
            <summary>
            Proto to be unlocked.
            </summary>
        </member>
        <member name="T:Mafi.Core.UnlockingTree.FleetEntityPartUnlock">
            <summary>
            Unlocks <see cref="T:Mafi.Core.Fleet.FleetEntityPartProto"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.UnlockingTree.FleetEntityPartUnlock.Proto">
            <summary>
            Proto to be unlocked.
            </summary>
        </member>
        <member name="P:Mafi.Core.UnlockingTree.IUnitUnlocker.UnlockedType">
            <summary>
            Type of units that this unlocker unlocks.
            </summary>
        </member>
        <member name="T:Mafi.Core.UnlockingTree.IUnitUnlocker`1">
            <summary>
            Unlocks units of type <see cref="!:TUnit"/> and their subclasses - if there aren't more specific unlockers for
            them. Implementation of the interface has to be registered with <see cref="T:Mafi.DependencyResolver"/> in order to be
            used for unlocking.
            </summary>
        </member>
        <member name="T:Mafi.Core.UnlockingTree.IUnlockNodeUnit">
            <summary>
            The smallest unit of unlock in unlocking tree. One unlocking node can consist of multiple of these. For more
            description see <see cref="!:ResearchNodeProto"/>
            </summary>
        </member>
        <member name="T:Mafi.Core.UnlockingTree.IUnlockUnitWithTitleAndIcon">
            <summary>
            Unit that can be displayed in the UI using an icon and title.
            </summary>
        </member>
        <member name="T:Mafi.Core.UnlockingTree.LayoutEntityUnlock">
            <summary>
            Unlocks <see cref="T:Mafi.Core.Entities.Static.Layout.LayoutEntityProto"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.UnlockingTree.LayoutEntityUnlock.Proto">
            <summary>
            Proto to be unlocked.
            </summary>
        </member>
        <member name="T:Mafi.Core.UnlockingTree.ProductUnlock">
            <summary>
            Unlocks <see cref="T:Mafi.Core.Products.ProductProto"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.UnlockingTree.ProductUnlock.Proto">
            <summary>
            Proto to be unlocked.
            </summary>
        </member>
        <member name="T:Mafi.Core.UnlockingTree.IProtoUnlock">
            <summary>
            Unlocks a prototype that was previously locked to the player.
            </summary>
        </member>
        <member name="P:Mafi.Core.UnlockingTree.IProtoUnlock.UnlockedProtos">
            <summary>
            Protos to be unlocked.
            </summary>
        </member>
        <member name="T:Mafi.Core.UnlockingTree.RecipeUnlock">
            <summary>
            Unlocks <see cref="T:Mafi.Core.Factory.Recipes.RecipeProto"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.UnlockingTree.RecipeUnlock.Proto">
            <summary>
            Proto to be unlocked.
            </summary>
        </member>
        <member name="F:Mafi.Core.UnlockingTree.RecipeUnlock.MachineProto">
            <summary>
            Machine that can execute the unlocked recipe. Used only to inform the player in UI.
            </summary>
        </member>
        <member name="T:Mafi.Core.UnlockingTree.RecyclingRatioIncreaseUnlock">
            <summary>
            Increase global vehicle cap.
            </summary>
        </member>
        <member name="T:Mafi.Core.UnlockingTree.TechnologyUnlock">
            <summary>
            Unlocks <see cref="T:Mafi.Core.UnlockingTree.TechnologyUnlock"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.UnlockingTree.TechnologyUnlock.Proto">
            <summary>
            Proto to be unlocked.
            </summary>
        </member>
        <member name="T:Mafi.Core.UnlockingTree.TransportUnlock">
            <summary>
            Unlocks <see cref="T:Mafi.Core.Factory.Transports.TransportProto"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.UnlockingTree.TransportUnlock.Proto">
            <summary>
            Proto to be unlocked.
            </summary>
        </member>
        <member name="T:Mafi.Core.UnlockingTree.VehicleLimitIncreaseUnlock">
            <summary>
            Increase global vehicle cap.
            </summary>
        </member>
        <member name="T:Mafi.Core.UnlockingTree.VehicleUnlock">
            <summary>
            Unlocks <see cref="T:Mafi.Core.Entities.Dynamic.DynamicEntityProto"/>.
            </summary>
        </member>
        <member name="F:Mafi.Core.UnlockingTree.VehicleUnlock.Proto">
            <summary>
            Proto to be unlocked.
            </summary>
        </member>
        <member name="M:Mafi.RecipeProtoBuilderExtensions.AddInput``1(Mafi.Core.Factory.Recipes.IRecipeProtoBuilderState{``0},System.String,Mafi.Core.Products.ProductProto.ID,Mafi.Quantity)">
            <summary>
            Selector is a string of port names (A,B,C..) or "*" for any port.
            </summary>
            <example>Selector: "*" - selects all ports, "AB" - selects ports A and B.</example>
        </member>
        <member name="M:Mafi.RecipeProtoBuilderExtensions.AddOutput``1(Mafi.Core.Factory.Recipes.IRecipeProtoBuilderState{``0},System.String,Mafi.Core.Products.ProductProto.ID,Mafi.Quantity,System.Boolean,System.Boolean)">
            <summary>
            Selector is a string of port names (A,B,C..) or "*" for any port.
            </summary>
            <example>Selector: "*" - selects all ports, "AB" - selects ports A and B.</example>
        </member>
        <member name="F:Mafi.BattleTriggerPriority.NotSupported">
            <summary>
            Marks triggers that do not support priority.
            </summary>
        </member>
        <member name="P:Mafi.BattleTriggerPriority.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.BattleTriggerPriority.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.BattleTriggerPriority.Min(Mafi.BattleTriggerPriority)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.BattleTriggerPriority.Max(Mafi.BattleTriggerPriority)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.BattleTriggerPriority.Clamp(Mafi.BattleTriggerPriority,Mafi.BattleTriggerPriority)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.BattleTriggerPriority.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.BattleTriggerPriority.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.BattleTriggerPriority.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.BattleTriggerPriority.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.BattleTriggerPriority.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.BattleTriggerPriority.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.BattleTriggerPriority.IsNear(Mafi.BattleTriggerPriority,Mafi.BattleTriggerPriority)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.BattleTriggerPriority.Lerp(Mafi.BattleTriggerPriority,System.Int32,System.Int32)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.BattleTriggerPriority.Lerp(Mafi.BattleTriggerPriority,Mafi.Percent)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.BattleTriggerPriority.Average(Mafi.BattleTriggerPriority)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.BattleTriggerPriority.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="T:Mafi.Chunk2i">
            <summary>
            Immutable 2D global chunk coordinate.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.Tile2i">
            <summary>
            Tile coordinate of origin of this chunk.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.CenterTile2i">
            <summary>
            Coordinate of center tile.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.PlusXNeighbor">
            <summary>
            Gets chunk coordinate of a neighbor at (X + 1, Y).
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.MinusXNeighbor">
            <summary>
            Gets chunk coordinate of a neighbor at (X - 1, Y).
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.PlusYNeighbor">
            <summary>
            Gets chunk coordinate of a neighbor at (X, Y + 1).
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.MinusYNeighbor">
            <summary>
            Gets chunk coordinate of a neighbor at (X, Y - 1).
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.MinusXyNeighbor">
            <summary>
            Gets chunk coordinate of a neighbor at (X - 1, Y - 1).
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.Contains(Mafi.Tile2i)">
            <summary>
            Whether this chunk contains given tile.
            </summary>
        </member>
        <member name="F:Mafi.Chunk2i.Zero">
            <summary>
            Vector (0, 0).
            </summary>
        </member>
        <member name="F:Mafi.Chunk2i.One">
            <summary>
            Vector (1, 1).
            </summary>
        </member>
        <member name="F:Mafi.Chunk2i.UnitX">
            <summary>
            Vector (1, 0).
            </summary>
        </member>
        <member name="F:Mafi.Chunk2i.UnitY">
            <summary>
            Vector (0, 1).
            </summary>
        </member>
        <member name="F:Mafi.Chunk2i.MinValue">
            <summary>
            Vector (int.MinValue, int.MinValue).
            </summary>
        </member>
        <member name="F:Mafi.Chunk2i.MaxValue">
            <summary>
            Vector (int.MaxValue, int.MaxValue).
            </summary>
        </member>
        <member name="F:Mafi.Chunk2i.X">
            <summary>
            The X component of this vector.
            </summary>
        </member>
        <member name="F:Mafi.Chunk2i.Y">
            <summary>
            The Y component of this vector.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates new Chunk2i from raw components.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.Vector2i">
            <summary>
            Converts this type to Vector2i.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.Sum">
            <summary>
            Sum of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.Product">
            <summary>
            Product of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.ProductInt">
            <summary>
            Product of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.Length">
            <summary>
            Euclidean length of this vector.
            PERF: Expensive, uses sqrt. Consider using <see cref="P:Mafi.Chunk2i.LengthSqr"/> whenever possible (when comparing
            lengths, etc.).
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.LengthInt">
            <summary>
            Approximate euclidean length of this vector as integer.
            PERF: Expensive, uses sqrt, consider using <see cref="P:Mafi.Chunk2i.LengthSqr"/> whenever possible.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.LengthSqrInt">
            <summary>
            Euclidean length squared of this vector.
            PERF: Cheaper than <see cref="P:Mafi.Chunk2i.Length"/>, does not require expensive sqrt.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.LengthSqr">
            <summary>
            Euclidean length squared of this vector.
            PERF: Cheaper than <see cref="P:Mafi.Chunk2i.Length"/>, does not require expensive sqrt.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.IsZero">
            <summary>
            Whether this vector has all components equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.IsNotZero">
            <summary>e
            Whether this vector has at least one components not equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.SetX(System.Int32)">
            <summary>
            Returns new vector with changed X component.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.SetY(System.Int32)">
            <summary>
            Returns new vector with changed Y component.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.IncrementX">
            <summary>
            Returns new vector with incremented X component.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.IncrementY">
            <summary>
            Returns new vector with incremented Y component.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.DecrementX">
            <summary>
            Returns new vector with decremented X component.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.DecrementY">
            <summary>
            Returns new vector with decremented Y component.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.AddX(System.Int32)">
            <summary>
            Returns new vector with given value added to the X component.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.AddY(System.Int32)">
            <summary>
            Returns new vector with given value added to the Y component.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.AddXy(System.Int32)">
            <summary>
            Returns new vector with given value added to all components.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.MultiplyX(System.Int32)">
            <summary>
            Returns new vector with given value multiplied with the X component.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.MultiplyY(System.Int32)">
            <summary>
            Returns new vector with given value multiplied with the Y component.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.ReflectX">
            <summary>
            Returns new vector with reflected X component (opposite sign).
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.ReflectY">
            <summary>
            Returns new vector with reflected Y component (opposite sign).
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.MulDiv(System.Int64,System.Int64)">
            <summary>
            Multiples and divides all components. This method is using long precision to prevent int32 overflows.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.OfLength(System.Int32)">
            <summary>
            Returns scaled vector to requested length. This method is more precise, faster and more intuitive than
            normalization followed by multiplication.
            WARNING: Setting length of integer vector may not produce exact requested length do to rounding error.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.IsNear(Mafi.Chunk2i,System.Int32)">
            <summary>
            Whether corresponding components of this and given vectors are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.Dot(Mafi.Chunk2i)">
            <summary>
            Returns dot product of this vector with given vector.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.DotInt(Mafi.Chunk2i)">
            <summary>
            Returns dot product of this vector with given vector as int32. Note that result of this method may overflow
            if magnitude of any component is larger than ~30,000.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.DistanceTo(Mafi.Chunk2i)">
            <summary>
            Returns distance from this vector to the other vector.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.DistanceSqrTo(Mafi.Chunk2i)">
            <summary>
            Returns squared distance from this vector to the other vector.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.Angle">
            <summary>
            Returns absolute angle of this vector. Returned angle is in range [-τ/2, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.PseudoCross(Mafi.Chunk2i)">
            <summary>
            Returns pseudo-cross product of this vector with <paramref name="other"/> vector. That is, Z component of 3D
            cross product between the two vectors with Z equal to 0.
            </summary>
            <remarks>
            This operation is very efficient and has following properties:
            * v1.PseudoCross(v2) = |v1| |v2| sin(θ) where θ is signed angle from v1 to v2 ( <c>v1.AngleTo(v2)</c>).
            * Returns 0 for parallel (or anti-parallel) vectors.
            * Returns positive values when v2 is to the left of v1.
            * Returns negative values when v2 is to the right of v1.
            </remarks>
        </member>
        <member name="M:Mafi.Chunk2i.Rotate(Mafi.AngleDegrees1f)">
            <summary>
            Returns rotated vector by given angle. Positive angle values represent in counter-clockwise rotation. This
            means that <c>(1, 0).Rotate(90°) == (0, 1)</c>.
            WARNING: Please keep in mind that rotating integer vectors may not be precise for vectors with small
            magnitudes due to rounding errors.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.Rotate(Mafi.Rotation90)">
            <summary>
            Returns rotated vector by given angle. Positive angle values represent in counter-clockwise rotation. This
            means that <c>(1, 0).Rotate(90°) == (0, 1)</c>.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.AngleTo(Mafi.Chunk2i)">
            <summary>
            Returns signed angle from this vector to <paramref name="other"/> vector. Returned angle represents how much
            this vector has to be rotated to obtain <paramref name="other"/> vector. Returned value is [-τ/2, τ/2). This
            means that <c>v1.AngleTo(v2) == -v2.AngleTo(v1)</c> and <c>v1.Rotate(v1.AngleTo(v2)) == v2</c>.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.AngleBetween(Mafi.Chunk2i)">
            <summary>
            Returns absolute angle between this and <see paramref="other"/> vectors. Returned angle is in range [0, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.IsParallelTo(Mafi.Chunk2i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel and not anti-parallel.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.IsAntiParallelTo(Mafi.Chunk2i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are anti-parallel and not parallel.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.IsParallelOrAntiParallelTo(Mafi.Chunk2i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel or anti-parallel. This is more efficient than
            calling <see paramref="IsParallelTo"/> and <see paramref="IsAntiParallelTo"/>.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.LeftOrthogonalVector">
            <summary>
            Returns this vector rotated by 90 degrees to the left (counter clockwise).
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.RightOrthogonalVector">
            <summary>
            Returns this vector rotated by 90 degrees to the right (clockwise).
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.Min(Mafi.Chunk2i)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.Max(Mafi.Chunk2i)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.MinComponent">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.MaxComponent">
            <summary>
            Returns component-wise max of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.Clamp(System.Int32,System.Int32)">
            <summary>
            Returns component-wise clamp of this vectors.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.AbsValue">
            <summary>
            Returns component-wise absolute value of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Chunk2i.Signs">
            <summary>
            Returns component-wise sign of this vector.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.Modulo(System.Int32)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.Modulo(Mafi.Chunk2i)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.Average(Mafi.Chunk2i)">
            <summary>
            Returns component-wise average of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.Lerp(Mafi.Chunk2i,System.Int64,System.Int64)">
            <summary>
            Linearly interpolates between this and <paramref name="to"/> vectors based on <paramref name="t"/>.
            Interpolation parameter <paramref name="t"/> goes from 0 to <paramref name="scale"/>.
            See <see cref="M:Mafi.MafiMath.Lerp(System.Int32,System.Int32,System.Int64,System.Int64)"/> for details.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.Lerp(Mafi.Chunk2i,Mafi.Chunk2i,System.Int64,System.Int64)">
            <summary>
            Linearly interpolates between <paramref name="from"/> and <paramref name="to"/> vectors based on <paramref
            name="t"/>. Interpolation parameter <paramref name="t"/> goes from 0 to <paramref name="scale"/>. See <see
            cref="M:Mafi.MafiMath.Lerp(System.Int32,System.Int32,System.Int64,System.Int64)"/> for details.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.op_Equality(Mafi.Chunk2i,Mafi.Chunk2i)">
            <summary>
            Exact equality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.op_Inequality(Mafi.Chunk2i,Mafi.Chunk2i)">
            <summary>
            Exact inequality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.op_LessThan(Mafi.Chunk2i,Mafi.Chunk2i)">
            <summary>
            Component-wise less-than operator. Returns true if all components of the left-hand side vector are less than
            respective components of the right-hand side vector.
            WARNING: <c>A &lt; B</c> is not equal to <c>A &gt;= B</c>. For example vectors (1, 2) and (2, 1) are not
            less-than nor greater-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.op_LessThanOrEqual(Mafi.Chunk2i,Mafi.Chunk2i)">
            <summary>
            Component-wise less-than-or-equal operator. Returns true if all components of the left-hand side vector are
            less than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &lt;= B</c> is not equal to <c>A &gt; B</c>. For example vectors (1, 2) and (2, 1) are not
            less-than-or-equal nor greater-than.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.op_GreaterThan(Mafi.Chunk2i,Mafi.Chunk2i)">
            <summary>
            Component-wise greater-than operator. Returns true if all components of the left-hand side vector are
            greater than respective components of the right-hand side vector.
            WARNING: <c>A &gt; B</c> is not equal to <c>A &lt;= B</c>. For example vectors (1, 2) and (2, 1) are not
            greater-than nor less-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.op_GreaterThanOrEqual(Mafi.Chunk2i,Mafi.Chunk2i)">
            <summary>
            Component-wise greater-than-or-equal operator. Returns true if all components of the left-hand side vector
            are greater than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &gt;= B</c> is not equal to <c>A &lt; B</c>. For example vectors (1, 2) and (2, 1) are not
            greater-than-or-equal nor less-than.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2i.FloorDiv(System.Int32)">
            <summary>
            Computes floor division. Unlike normal division operator in C# this always rounds down.
            </summary>
        </member>
        <member name="T:Mafi.Computing">
            <summary>
            Computing power in TFlops.
            </summary>
        </member>
        <member name="P:Mafi.Computing.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.Computing.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.Computing.Min(Mafi.Computing)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.Computing.Max(Mafi.Computing)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.Computing.Clamp(Mafi.Computing,Mafi.Computing)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.Computing.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Computing.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Computing.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.Computing.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Computing.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.Computing.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.Computing.IsNear(Mafi.Computing,Mafi.Computing)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.Computing.Lerp(Mafi.Computing,System.Int32,System.Int32)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.Computing.Lerp(Mafi.Computing,Mafi.Percent)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.Computing.Average(Mafi.Computing)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.Computing.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="T:Mafi.Duration">
            <summary>
            Immutable game duration in sim ticks.
            </summary>
        </member>
        <member name="M:Mafi.Duration.FromKeyframes(System.Int32)">
            <summary>
            Creates duration from unity key frames count. This assumes that Unity animations runs at <see
            cref="F:Mafi.Duration.UNITY_KEYFRAMES_PER_SEC"/> fps (usually 30). The duration is always rounded up so that animations are
            never cut short. Note that animation FPS and game FPS are independent.
            </summary>
        </member>
        <member name="M:Mafi.Duration.FromKeyframes(System.Int32,System.Single)">
            <summary>
            Same as <see cref="M:Mafi.Duration.FromKeyframes(System.Int32)"/> but also applies the given speed.
            </summary>
        </member>
        <member name="M:Mafi.Duration.SpeedToMatch(Mafi.Duration)">
            <summary>
            Calculates the speed needed to be applied on the current duration to achieve the given one.
            </summary>
        </member>
        <member name="P:Mafi.Duration.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.Duration.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.Duration.Min(Mafi.Duration)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.Duration.Max(Mafi.Duration)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.Duration.Clamp(Mafi.Duration,Mafi.Duration)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.Duration.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Duration.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Duration.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.Duration.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Duration.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.Duration.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.Duration.IsNear(Mafi.Duration,Mafi.Duration)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.Duration.Lerp(Mafi.Duration,System.Int32,System.Int32)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.Duration.Lerp(Mafi.Duration,Mafi.Percent)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.Duration.Average(Mafi.Duration)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.Duration.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="P:Mafi.Electricity.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.Electricity.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.Electricity.Min(Mafi.Electricity)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.Electricity.Max(Mafi.Electricity)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.Electricity.Clamp(Mafi.Electricity,Mafi.Electricity)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.Electricity.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Electricity.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Electricity.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.Electricity.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Electricity.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.Electricity.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.Electricity.IsNear(Mafi.Electricity,Mafi.Electricity)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.Electricity.Lerp(Mafi.Electricity,System.Int32,System.Int32)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.Electricity.Lerp(Mafi.Electricity,Mafi.Percent)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.Electricity.Average(Mafi.Electricity)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.Electricity.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="P:Mafi.ExpPoints.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.ExpPoints.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.ExpPoints.Min(Mafi.ExpPoints)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.ExpPoints.Max(Mafi.ExpPoints)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.ExpPoints.Clamp(Mafi.ExpPoints,Mafi.ExpPoints)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.ExpPoints.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.ExpPoints.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.ExpPoints.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.ExpPoints.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.ExpPoints.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.ExpPoints.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.ExpPoints.IsNear(Mafi.ExpPoints,Mafi.ExpPoints)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.ExpPoints.Lerp(Mafi.ExpPoints,System.Int32,System.Int32)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.ExpPoints.Lerp(Mafi.ExpPoints,Mafi.Percent)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.ExpPoints.Average(Mafi.ExpPoints)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.ExpPoints.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="P:Mafi.Frequency.SecondsFloored">
            <summary>
            Rounded number of seconds of the frequency
            </summary>
        </member>
        <member name="P:Mafi.Frequency.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.Frequency.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.Frequency.Min(Mafi.Frequency)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.Frequency.Max(Mafi.Frequency)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.Frequency.Clamp(Mafi.Frequency,Mafi.Frequency)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.Frequency.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Frequency.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Frequency.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.Frequency.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Frequency.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.Frequency.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.Frequency.IsNear(Mafi.Frequency,Mafi.Frequency)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.Frequency.Lerp(Mafi.Frequency,System.Int32,System.Int32)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.Frequency.Lerp(Mafi.Frequency,Mafi.Percent)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.Frequency.Average(Mafi.Frequency)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.Frequency.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="T:Mafi.GameDate">
            <summary>
            In-game date representation, does not have a predefined relationship with real time. Precision is one day.
            </summary>
        </member>
        <member name="P:Mafi.GameDate.Day">
            <summary>
            Day in the month. Value is in [1, RelGameDate.DAYS_PER_MONTH].
            </summary>
        </member>
        <member name="P:Mafi.GameDate.Month">
            <summary>
            Month in the year. Value is in [1, RelGameDate.MONTHS_PER_YEAR].
            </summary>
        </member>
        <member name="P:Mafi.GameDate.Year">
            <summary>
            Year of the date. Years start with value 1 for first year.
            </summary>
        </member>
        <member name="P:Mafi.GameDate.FloorMonths">
            <summary>
            Rounds the date down to months - year and month stay and day is set to 1.
            </summary>
        </member>
        <member name="P:Mafi.GameDate.CeilMonths">
            <summary>
            Rounds the date up to months - year stays the same; if day is zero, month stays, otherwise month is
            increased by one; day is set to 1.
            </summary>
        </member>
        <member name="P:Mafi.GameDate.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.GameDate.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.GameDate.Min(Mafi.GameDate)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.GameDate.Max(Mafi.GameDate)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.GameDate.Clamp(Mafi.GameDate,Mafi.GameDate)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.GameDate.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.GameDate.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.GameDate.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.GameDate.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.GameDate.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.GameDate.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.GameDate.IsNear(Mafi.GameDate,Mafi.GameDate)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.GameDate.Lerp(Mafi.GameDate,System.Int32,System.Int32)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.GameDate.Lerp(Mafi.GameDate,Mafi.Percent)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.GameDate.Average(Mafi.GameDate)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.GameDate.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="M:Mafi.Chunk2iExtensions.NextChunk2i(Mafi.IRandom,System.Int32,System.Int32)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="M:Mafi.Chunk2iExtensions.NextChunk2i(Mafi.IRandom,Mafi.Chunk2i,Mafi.Chunk2i)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="T:Mafi.HeightTilesF">
            <summary>
            Normalized absolute height with one unit equal to one tile and origin at 0.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesF.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesF.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.HeightTilesF.Min(Mafi.HeightTilesF)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.HeightTilesF.Max(Mafi.HeightTilesF)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.HeightTilesF.Clamp(Mafi.HeightTilesF,Mafi.HeightTilesF)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesF.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesF.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesF.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesF.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesF.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesF.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.HeightTilesF.IsNear(Mafi.HeightTilesF)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.HeightTilesF.IsNear(Mafi.HeightTilesF,Mafi.HeightTilesF)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.HeightTilesF.Average(Mafi.HeightTilesF)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesF.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesF.HeightI">
            <summary>
            Converts floating point height to integer height (vertical tile index).
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesF.MissingThicknessToTile">
            <summary>
            Missing thickness to fill current vertical tile. Range of this value is [0, 1). Value 0 means that the
            current vertical tile is fully completed. Otherwise it is number of discrete units that are missing.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesI.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesI.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.HeightTilesI.Min(Mafi.HeightTilesI)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.HeightTilesI.Max(Mafi.HeightTilesI)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.HeightTilesI.Clamp(Mafi.HeightTilesI,Mafi.HeightTilesI)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesI.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesI.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesI.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesI.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesI.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesI.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.HeightTilesI.IsNear(Mafi.HeightTilesI,Mafi.HeightTilesI)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.HeightTilesI.Lerp(Mafi.HeightTilesI,System.Int32,System.Int32)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.HeightTilesI.Lerp(Mafi.HeightTilesI,Mafi.Percent)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.HeightTilesI.Average(Mafi.HeightTilesI)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.HeightTilesI.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="P:Mafi.IndustryPoints.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.IndustryPoints.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.IndustryPoints.Min(Mafi.IndustryPoints)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.IndustryPoints.Max(Mafi.IndustryPoints)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.IndustryPoints.Clamp(Mafi.IndustryPoints,Mafi.IndustryPoints)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.IndustryPoints.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.IndustryPoints.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.IndustryPoints.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.IndustryPoints.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.IndustryPoints.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.IndustryPoints.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.IndustryPoints.IsNear(Mafi.IndustryPoints,Mafi.IndustryPoints)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.IndustryPoints.Lerp(Mafi.IndustryPoints,System.Int32,System.Int32)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.IndustryPoints.Lerp(Mafi.IndustryPoints,Mafi.Percent)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.IndustryPoints.Average(Mafi.IndustryPoints)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.IndustryPoints.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="P:Mafi.Level.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.Level.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.Level.Min(Mafi.Level)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.Level.Max(Mafi.Level)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.Level.Clamp(Mafi.Level,Mafi.Level)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.Level.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Level.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Level.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.Level.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Level.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.Level.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.Level.IsNear(Mafi.Level,Mafi.Level)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.Level.Lerp(Mafi.Level,System.Int32,System.Int32)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.Level.Lerp(Mafi.Level,Mafi.Percent)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.Level.Average(Mafi.Level)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.Level.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="F:Mafi.Level.One">
            <summary>
            The first level - player starts at this level.
            </summary>
        </member>
        <member name="P:Mafi.MechPower.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.MechPower.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.MechPower.Min(Mafi.MechPower)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.MechPower.Max(Mafi.MechPower)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.MechPower.Clamp(Mafi.MechPower,Mafi.MechPower)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.MechPower.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.MechPower.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.MechPower.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.MechPower.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.MechPower.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.MechPower.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.MechPower.IsNear(Mafi.MechPower,Mafi.MechPower)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.MechPower.Lerp(Mafi.MechPower,System.Int32,System.Int32)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.MechPower.Lerp(Mafi.MechPower,Mafi.Percent)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.MechPower.Average(Mafi.MechPower)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.MechPower.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="T:Mafi.Money">
            <summary>
            Money. Value in single dollars.
            </summary>
        </member>
        <member name="P:Mafi.Money.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.Money.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.Money.Min(Mafi.Money)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.Money.Max(Mafi.Money)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.Money.Clamp(Mafi.Money,Mafi.Money)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.Money.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Money.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Money.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.Money.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Money.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.Money.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.Money.IsNear(Mafi.Money,Mafi.Money)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.Money.Average(Mafi.Money)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.Money.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="M:Mafi.Money.From(System.Int64)">
            <summary>
            From dollars.
            </summary>
        </member>
        <member name="M:Mafi.Money.From(System.Decimal)">
            <summary>
            From dollars.
            </summary>
        </member>
        <member name="M:Mafi.Money.FromK(System.Int64)">
            <summary>
            From thousands of dollars.
            </summary>
        </member>
        <member name="M:Mafi.Money.FromM(System.Int64)">
            <summary>
            From millions of dollars.
            </summary>
        </member>
        <member name="M:Mafi.Money.Format(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Formats to full price in dollars. Negative values look like: "-$100".
            </summary>
        </member>
        <member name="M:Mafi.Money.FormatShort(System.Boolean)">
            <summary>
            Formats to very short string like $125K or $1.25M. Negative values look like: "-$100M".
            </summary>
        </member>
        <member name="T:Mafi.PartialQuantity">
            <summary>
            Represents partial discrete quantity as fixed point decimal number with precision of 1/256.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantity.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantity.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.PartialQuantity.Min(Mafi.PartialQuantity)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.PartialQuantity.Max(Mafi.PartialQuantity)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.PartialQuantity.Clamp(Mafi.PartialQuantity,Mafi.PartialQuantity)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantity.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantity.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantity.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantity.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantity.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantity.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.PartialQuantity.IsNear(Mafi.PartialQuantity)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.PartialQuantity.IsNear(Mafi.PartialQuantity,Mafi.PartialQuantity)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.PartialQuantity.Average(Mafi.PartialQuantity)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantity.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="T:Mafi.PartialQuantityLarge">
            <summary>
            Represents partial discrete quantity using Fix64.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantityLarge.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantityLarge.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.PartialQuantityLarge.Min(Mafi.PartialQuantityLarge)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.PartialQuantityLarge.Max(Mafi.PartialQuantityLarge)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.PartialQuantityLarge.Clamp(Mafi.PartialQuantityLarge,Mafi.PartialQuantityLarge)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantityLarge.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantityLarge.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantityLarge.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantityLarge.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantityLarge.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantityLarge.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.PartialQuantityLarge.Average(Mafi.PartialQuantityLarge)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.PartialQuantityLarge.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="T:Mafi.Quantity">
            <summary>
            Immutable discrete quantity.
            </summary>
        </member>
        <member name="P:Mafi.Quantity.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.Quantity.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.Quantity.Min(Mafi.Quantity)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.Quantity.Max(Mafi.Quantity)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.Quantity.Clamp(Mafi.Quantity,Mafi.Quantity)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.Quantity.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Quantity.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Quantity.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.Quantity.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Quantity.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.Quantity.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.Quantity.IsNear(Mafi.Quantity,Mafi.Quantity)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.Quantity.Lerp(Mafi.Quantity,System.Int32,System.Int32)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.Quantity.Lerp(Mafi.Quantity,Mafi.Percent)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.Quantity.Average(Mafi.Quantity)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.Quantity.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="T:Mafi.QuantityLarge">
            <summary>
            Immutable discrete quantity for large quantities.
            </summary>
        </member>
        <member name="P:Mafi.QuantityLarge.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.QuantityLarge.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.QuantityLarge.Min(Mafi.QuantityLarge)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.QuantityLarge.Max(Mafi.QuantityLarge)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.QuantityLarge.Clamp(Mafi.QuantityLarge,Mafi.QuantityLarge)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.QuantityLarge.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.QuantityLarge.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.QuantityLarge.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.QuantityLarge.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.QuantityLarge.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.QuantityLarge.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.QuantityLarge.IsNear(Mafi.QuantityLarge,Mafi.QuantityLarge)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.QuantityLarge.Average(Mafi.QuantityLarge)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.QuantityLarge.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="T:Mafi.RelGameDate">
            <summary>
            Represents in-game date interval length. Precision is one day.
            TODO: Consolidate with Duration.
            </summary>
        </member>
        <member name="P:Mafi.RelGameDate.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.RelGameDate.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.RelGameDate.Min(Mafi.RelGameDate)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.RelGameDate.Max(Mafi.RelGameDate)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.RelGameDate.Clamp(Mafi.RelGameDate,Mafi.RelGameDate)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.RelGameDate.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.RelGameDate.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.RelGameDate.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.RelGameDate.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.RelGameDate.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.RelGameDate.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.RelGameDate.IsNear(Mafi.RelGameDate,Mafi.RelGameDate)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.RelGameDate.Lerp(Mafi.RelGameDate,System.Int32,System.Int32)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.RelGameDate.Lerp(Mafi.RelGameDate,Mafi.Percent)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.RelGameDate.Average(Mafi.RelGameDate)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.RelGameDate.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="P:Mafi.RelGameDate.TotalDays">
            <summary>
            Interval length in days.
            </summary>
        </member>
        <member name="P:Mafi.RelGameDate.TotalMonthsFloored">
            <summary>
            Interval length in months floored.
            </summary>
        </member>
        <member name="P:Mafi.RelGameDate.Days">
            <summary>
            Remaining days of the interval length after months and years are subtracted. Value is in [0, DAYS_PER_MONTH).
            </summary>
        </member>
        <member name="P:Mafi.RelGameDate.Months">
            <summary>
            Remaining months of the interval length after years are subtracted. Value is in [0, MONTHS_PER_YEAR).
            </summary>
        </member>
        <member name="P:Mafi.RelGameDate.Years">
            <summary>
            Number of years of the interval floored.
            </summary>
        </member>
        <member name="T:Mafi.RelTile1f">
            <summary>
            Immutable 1D relative tile coordinate or distance.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1f.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1f.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.RelTile1f.Min(Mafi.RelTile1f)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.RelTile1f.Max(Mafi.RelTile1f)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.RelTile1f.Clamp(Mafi.RelTile1f,Mafi.RelTile1f)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1f.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1f.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1f.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1f.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1f.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1f.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.RelTile1f.IsNear(Mafi.RelTile1f)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.RelTile1f.IsNear(Mafi.RelTile1f,Mafi.RelTile1f)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.RelTile1f.Average(Mafi.RelTile1f)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1f.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="M:Mafi.RelTile1f.FromTilesPerSecond(System.Double)">
            <summary>
            Returns discrete distance per tick from given distance in tiles per second.
            </summary>
        </member>
        <member name="T:Mafi.RelTile1i">
            <summary>
            Immutable 1D relative tile coordinate or distance.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1i.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1i.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.RelTile1i.Min(Mafi.RelTile1i)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.RelTile1i.Max(Mafi.RelTile1i)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.RelTile1i.Clamp(Mafi.RelTile1i,Mafi.RelTile1i)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1i.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1i.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1i.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1i.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1i.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1i.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.RelTile1i.IsNear(Mafi.RelTile1i,Mafi.RelTile1i)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.RelTile1i.Lerp(Mafi.RelTile1i,System.Int32,System.Int32)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.RelTile1i.Lerp(Mafi.RelTile1i,Mafi.Percent)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.RelTile1i.Average(Mafi.RelTile1i)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.RelTile1i.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="T:Mafi.RelTile2f">
            <summary>
            Immutable 2D relative tile coordinate. Represents relative offset from absolute coordinate.
            </summary>
        </member>
        <member name="F:Mafi.RelTile2f.Zero">
            <summary>
            Vector (0, 0).
            </summary>
        </member>
        <member name="F:Mafi.RelTile2f.One">
            <summary>
            Vector (1, 1).
            </summary>
        </member>
        <member name="F:Mafi.RelTile2f.UnitX">
            <summary>
            Vector (1, 0).
            </summary>
        </member>
        <member name="F:Mafi.RelTile2f.UnitY">
            <summary>
            Vector (0, 1).
            </summary>
        </member>
        <member name="F:Mafi.RelTile2f.MinValue">
            <summary>
            Vector (Fix32.MinValue, Fix32.MinValue).
            </summary>
        </member>
        <member name="F:Mafi.RelTile2f.MaxValue">
            <summary>
            Vector (Fix32.MaxValue, Fix32.MaxValue).
            </summary>
        </member>
        <member name="F:Mafi.RelTile2f.X">
            <summary>
            The X component of this vector.
            </summary>
        </member>
        <member name="F:Mafi.RelTile2f.Y">
            <summary>
            The Y component of this vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.#ctor(Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Creates new RelTile2f from raw components.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.Vector2f">
            <summary>
            Converts this type to Vector2f.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.Sum">
            <summary>
            Sum of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.Product">
            <summary>
            Product of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.Length">
            <summary>
            Euclidean length of this vector.
            PERF: Expensive, uses sqrt. Consider using <see cref="P:Mafi.RelTile2f.LengthSqr"/> whenever possible (when comparing
            lengths, etc.).
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.LengthSqr">
            <summary>
            Euclidean length squared of this vector.
            PERF: Cheaper than <see cref="P:Mafi.RelTile2f.Length"/>, does not require expensive sqrt.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.IsZero">
            <summary>
            Whether this vector has all components equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.IsNotZero">
            <summary>e
            Whether this vector has at least one components not equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.SetX(Mafi.Fix32)">
            <summary>
            Returns new vector with changed X component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.SetY(Mafi.Fix32)">
            <summary>
            Returns new vector with changed Y component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.ExtendZ(Mafi.Fix32)">
            <summary>
            Extends this vector a new component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.IncrementX">
            <summary>
            Returns new vector with incremented X component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.IncrementY">
            <summary>
            Returns new vector with incremented Y component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.DecrementX">
            <summary>
            Returns new vector with decremented X component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.DecrementY">
            <summary>
            Returns new vector with decremented Y component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.AddX(Mafi.Fix32)">
            <summary>
            Returns new vector with given value added to the X component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.AddY(Mafi.Fix32)">
            <summary>
            Returns new vector with given value added to the Y component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.AddXy(Mafi.Fix32)">
            <summary>
            Returns new vector with given value added to all components.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.MultiplyX(Mafi.Fix32)">
            <summary>
            Returns new vector with given value multiplied with the X component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.MultiplyY(Mafi.Fix32)">
            <summary>
            Returns new vector with given value multiplied with the Y component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.ReflectX">
            <summary>
            Returns new vector with reflected X component (opposite sign).
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.ReflectY">
            <summary>
            Returns new vector with reflected Y component (opposite sign).
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.OfLength(Mafi.Fix32)">
            <summary>
            Returns scaled vector to requested length. This method is faster and more intuitive than normalization
            followed by multiplication.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.IsNear(Mafi.RelTile2f,Mafi.Fix32)">
            <summary>
            Tests whether corresponding components of this and given vectors are within tolerance.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.IsNormalized">
            <summary>
            Whether this vector length is (nearly) one using default epsilon <see cref="P:Mafi.Fix32.EpsilonNear"/>. Note that
            This uses efficient check of length squared without the need for square root computation.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.Normalized">
            <summary>
            Returns normalized vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.Dot(Mafi.RelTile2f)">
            <summary>
            Returns dot product of this vector with given vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.DistanceTo(Mafi.RelTile2f)">
            <summary>
            Returns distance from this vector to the other vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.DistanceSqrTo(Mafi.RelTile2f)">
            <summary>
            Returns squared distance from this vector to the other vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.Angle">
            <summary>
            Returns absolute angle of this vector. Returned angle is in range [-τ/2, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.PseudoCross(Mafi.RelTile2f)">
            <summary>
            Returns pseudo-cross product of this vector with <paramref name="other"/> vector. That is, Z component of 3D
            cross product between the two vectors with Z equal to 0.
            </summary>
            <remarks>
            This operation is very efficient and has following properties:
            * v1.PseudoCross(v2) = |v1| |v2| sin(θ) where θ is signed angle from v1 to v2 ( <c>v1.AngleTo(v2)</c>).
            * Returns 0 for parallel (or anti-parallel) vectors.
            * Returns positive values when v2 is to the left of v1.
            * Returns negative values when v2 is to the right of v1.
            </remarks>
        </member>
        <member name="M:Mafi.RelTile2f.Rotate(Mafi.AngleDegrees1f)">
            <summary>
            Returns rotated vector by given angle. Positive angle values represent in counter-clockwise rotation. This
            means that <c>(1, 0).Rotate(90°) == (0, 1)</c>.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.Rotate(Mafi.Rotation90)">
            <summary>
            Returns rotated vector by given angle. Positive angle values represent in counter-clockwise rotation. This
            means that <c>(1, 0).Rotate(90°) == (0, 1)</c>.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.Rotate(Mafi.AngleDegrees1f,Mafi.RelTile2f)">
            <summary>
            Returns rotated vector by given angle around given pivot point. Positive angle values represent in
            counter-clockwise rotation. This means that <c>(1, 0).Rotate(90°) == (0, 1)</c>.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.AngleTo(Mafi.RelTile2f)">
            <summary>
            Returns signed angle from this vector to <paramref name="other"/> vector. Returned angle represents how much
            this vector has to be rotated to obtain <paramref name="other"/> vector. Returned value is [-τ/2, τ/2). This
            means that <c>v1.AngleTo(v2) == -v2.AngleTo(v1)</c> and <c>v1.Rotate(v1.AngleTo(v2)) == v2</c>.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.AngleBetween(Mafi.RelTile2f)">
            <summary>
            Returns absolute angle between this and <see paramref="other"/> vectors. Returned angle is in range [0, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.IsParallelTo(Mafi.RelTile2f)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel and not anti-parallel.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.IsAntiParallelTo(Mafi.RelTile2f)">
            <summary>
            Whether this and <see paramref="other"/> vectors are anti-parallel and not parallel.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.IsParallelOrAntiParallelTo(Mafi.RelTile2f)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel or anti-parallel. This is more efficient than
            calling <see paramref="IsParallelTo"/> and <see paramref="IsAntiParallelTo"/>.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.LeftOrthogonalVector">
            <summary>
            Returns this vector rotated by 90 degrees to the left (counter clockwise).
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.RightOrthogonalVector">
            <summary>
            Returns this vector rotated by 90 degrees to the right (clockwise).
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.Reflect(Mafi.RelTile2f)">
            <summary>
            Reflection of this vector from plane specified by given normal (has to be normalized). This vector should be
            pointing to the plane and reflected vector is pointing away from the plane.
            </summary>
            <remarks>
            <code>
                        Normal vector
                      *
            this   \  |  * reflected
            vector  \ | /  vector
                 ____*|/____  reflection surface given by the normal
            </code>
            </remarks>
        </member>
        <member name="M:Mafi.RelTile2f.Min(Mafi.RelTile2f)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.Max(Mafi.RelTile2f)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.MinComponent">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.MaxComponent">
            <summary>
            Returns component-wise max of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.Clamp(Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Returns component-wise clamp of this vectors.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.AbsValue">
            <summary>
            Returns component-wise absolute value of this vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.Signs">
            <summary>
            Returns component-wise sign of this vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.Modulo(Mafi.Fix32)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.Modulo(Mafi.RelTile2f)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.Average(Mafi.RelTile2f)">
            <summary>
            Returns component-wise average of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.Lerp(Mafi.RelTile2f,Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Linearly interpolates between this and <paramref name="to"/> vectors based on <paramref name="t"/>.
            Interpolation parameter <paramref name="t"/> is expected to be from 0 to 1.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.op_Equality(Mafi.RelTile2f,Mafi.RelTile2f)">
            <summary>
            Exact equality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.op_Inequality(Mafi.RelTile2f,Mafi.RelTile2f)">
            <summary>
            Exact inequality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.op_LessThan(Mafi.RelTile2f,Mafi.RelTile2f)">
            <summary>
            Component-wise less-than operator. Returns true if all components of the left-hand side vector are less than
            respective components of the right-hand side vector.
            WARNING: <c>A &lt; B</c> is not equal to <c>A &gt;= B</c>. For example vectors (1, 2) and (2, 1) are not
            less-than nor greater-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.op_LessThanOrEqual(Mafi.RelTile2f,Mafi.RelTile2f)">
            <summary>
            Component-wise less-than-or-equal operator. Returns true if all components of the left-hand side vector are
            less than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &lt;= B</c> is not equal to <c>A &gt; B</c>. For example vectors (1, 2) and (2, 1) are not
            less-than-or-equal nor greater-than.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.op_GreaterThan(Mafi.RelTile2f,Mafi.RelTile2f)">
            <summary>
            Component-wise greater-than operator. Returns true if all components of the left-hand side vector are
            greater than respective components of the right-hand side vector.
            WARNING: <c>A &gt; B</c> is not equal to <c>A &lt;= B</c>. For example vectors (1, 2) and (2, 1) are not
            greater-than nor less-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.op_GreaterThanOrEqual(Mafi.RelTile2f,Mafi.RelTile2f)">
            <summary>
            Component-wise greater-than-or-equal operator. Returns true if all components of the left-hand side vector
            are greater than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &gt;= B</c> is not equal to <c>A &lt; B</c>. For example vectors (1, 2) and (2, 1) are not
            greater-than-or-equal nor less-than.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.op_Division(Mafi.RelTile2f,Mafi.RelTile2f)">
            <summary>
            Component-wise division of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2f.op_Modulus(Mafi.RelTile2f,Mafi.RelTile2f)">
            <summary>
            Component-wise modulo of two vectors.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2f.LengthTiles">
            <summary>
            Euclidean length of this vector in tiles.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2fExtensions.NextRelTile2f(Mafi.IRandom,Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="M:Mafi.RelTile2fExtensions.NextRelTile2f(Mafi.IRandom,Mafi.RelTile2f,Mafi.RelTile2f)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="T:Mafi.RelTile2i">
            <summary>
            Immutable 2D relative tile coordinate. Represents relative offset from absolute coordinate.
            </summary>
        </member>
        <member name="F:Mafi.RelTile2i.Zero">
            <summary>
            Vector (0, 0).
            </summary>
        </member>
        <member name="F:Mafi.RelTile2i.One">
            <summary>
            Vector (1, 1).
            </summary>
        </member>
        <member name="F:Mafi.RelTile2i.UnitX">
            <summary>
            Vector (1, 0).
            </summary>
        </member>
        <member name="F:Mafi.RelTile2i.UnitY">
            <summary>
            Vector (0, 1).
            </summary>
        </member>
        <member name="F:Mafi.RelTile2i.MinValue">
            <summary>
            Vector (int.MinValue, int.MinValue).
            </summary>
        </member>
        <member name="F:Mafi.RelTile2i.MaxValue">
            <summary>
            Vector (int.MaxValue, int.MaxValue).
            </summary>
        </member>
        <member name="F:Mafi.RelTile2i.X">
            <summary>
            The X component of this vector.
            </summary>
        </member>
        <member name="F:Mafi.RelTile2i.Y">
            <summary>
            The Y component of this vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates new RelTile2i from raw components.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.Vector2i">
            <summary>
            Converts this type to Vector2i.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.Sum">
            <summary>
            Sum of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.Product">
            <summary>
            Product of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.ProductInt">
            <summary>
            Product of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.Length">
            <summary>
            Euclidean length of this vector.
            PERF: Expensive, uses sqrt. Consider using <see cref="P:Mafi.RelTile2i.LengthSqr"/> whenever possible (when comparing
            lengths, etc.).
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.LengthInt">
            <summary>
            Approximate euclidean length of this vector as integer.
            PERF: Expensive, uses sqrt, consider using <see cref="P:Mafi.RelTile2i.LengthSqr"/> whenever possible.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.LengthSqrInt">
            <summary>
            Euclidean length squared of this vector.
            PERF: Cheaper than <see cref="P:Mafi.RelTile2i.Length"/>, does not require expensive sqrt.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.LengthSqr">
            <summary>
            Euclidean length squared of this vector.
            PERF: Cheaper than <see cref="P:Mafi.RelTile2i.Length"/>, does not require expensive sqrt.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.IsZero">
            <summary>
            Whether this vector has all components equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.IsNotZero">
            <summary>e
            Whether this vector has at least one components not equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.SetX(System.Int32)">
            <summary>
            Returns new vector with changed X component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.SetY(System.Int32)">
            <summary>
            Returns new vector with changed Y component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.ExtendZ(System.Int32)">
            <summary>
            Extends this vector a new component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.IncrementX">
            <summary>
            Returns new vector with incremented X component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.IncrementY">
            <summary>
            Returns new vector with incremented Y component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.DecrementX">
            <summary>
            Returns new vector with decremented X component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.DecrementY">
            <summary>
            Returns new vector with decremented Y component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.AddX(System.Int32)">
            <summary>
            Returns new vector with given value added to the X component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.AddY(System.Int32)">
            <summary>
            Returns new vector with given value added to the Y component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.AddXy(System.Int32)">
            <summary>
            Returns new vector with given value added to all components.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.MultiplyX(System.Int32)">
            <summary>
            Returns new vector with given value multiplied with the X component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.MultiplyY(System.Int32)">
            <summary>
            Returns new vector with given value multiplied with the Y component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.ReflectX">
            <summary>
            Returns new vector with reflected X component (opposite sign).
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.ReflectY">
            <summary>
            Returns new vector with reflected Y component (opposite sign).
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.MulDiv(System.Int64,System.Int64)">
            <summary>
            Multiples and divides all components. This method is using long precision to prevent int32 overflows.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.OfLength(System.Int32)">
            <summary>
            Returns scaled vector to requested length. This method is more precise, faster and more intuitive than
            normalization followed by multiplication.
            WARNING: Setting length of integer vector may not produce exact requested length do to rounding error.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.IsNear(Mafi.RelTile2i,System.Int32)">
            <summary>
            Whether corresponding components of this and given vectors are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.Dot(Mafi.RelTile2i)">
            <summary>
            Returns dot product of this vector with given vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.DotInt(Mafi.RelTile2i)">
            <summary>
            Returns dot product of this vector with given vector as int32. Note that result of this method may overflow
            if magnitude of any component is larger than ~30,000.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.DistanceTo(Mafi.RelTile2i)">
            <summary>
            Returns distance from this vector to the other vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.DistanceSqrTo(Mafi.RelTile2i)">
            <summary>
            Returns squared distance from this vector to the other vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.Angle">
            <summary>
            Returns absolute angle of this vector. Returned angle is in range [-τ/2, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.PseudoCross(Mafi.RelTile2i)">
            <summary>
            Returns pseudo-cross product of this vector with <paramref name="other"/> vector. That is, Z component of 3D
            cross product between the two vectors with Z equal to 0.
            </summary>
            <remarks>
            This operation is very efficient and has following properties:
            * v1.PseudoCross(v2) = |v1| |v2| sin(θ) where θ is signed angle from v1 to v2 ( <c>v1.AngleTo(v2)</c>).
            * Returns 0 for parallel (or anti-parallel) vectors.
            * Returns positive values when v2 is to the left of v1.
            * Returns negative values when v2 is to the right of v1.
            </remarks>
        </member>
        <member name="M:Mafi.RelTile2i.Rotate(Mafi.AngleDegrees1f)">
            <summary>
            Returns rotated vector by given angle. Positive angle values represent in counter-clockwise rotation. This
            means that <c>(1, 0).Rotate(90°) == (0, 1)</c>.
            WARNING: Please keep in mind that rotating integer vectors may not be precise for vectors with small
            magnitudes due to rounding errors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.Rotate(Mafi.Rotation90)">
            <summary>
            Returns rotated vector by given angle. Positive angle values represent in counter-clockwise rotation. This
            means that <c>(1, 0).Rotate(90°) == (0, 1)</c>.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.Rotate(Mafi.AngleDegrees1f,Mafi.RelTile2i)">
            <summary>
            Returns rotated vector by given angle around given pivot point. Positive angle values represent in
            counter-clockwise rotation. This means that <c>(1, 0).Rotate(90°) == (0, 1)</c>.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.AngleTo(Mafi.RelTile2i)">
            <summary>
            Returns signed angle from this vector to <paramref name="other"/> vector. Returned angle represents how much
            this vector has to be rotated to obtain <paramref name="other"/> vector. Returned value is [-τ/2, τ/2). This
            means that <c>v1.AngleTo(v2) == -v2.AngleTo(v1)</c> and <c>v1.Rotate(v1.AngleTo(v2)) == v2</c>.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.AngleBetween(Mafi.RelTile2i)">
            <summary>
            Returns absolute angle between this and <see paramref="other"/> vectors. Returned angle is in range [0, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.IsParallelTo(Mafi.RelTile2i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel and not anti-parallel.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.IsAntiParallelTo(Mafi.RelTile2i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are anti-parallel and not parallel.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.IsParallelOrAntiParallelTo(Mafi.RelTile2i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel or anti-parallel. This is more efficient than
            calling <see paramref="IsParallelTo"/> and <see paramref="IsAntiParallelTo"/>.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.LeftOrthogonalVector">
            <summary>
            Returns this vector rotated by 90 degrees to the left (counter clockwise).
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.RightOrthogonalVector">
            <summary>
            Returns this vector rotated by 90 degrees to the right (clockwise).
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.Min(Mafi.RelTile2i)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.Max(Mafi.RelTile2i)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.MinComponent">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.MaxComponent">
            <summary>
            Returns component-wise max of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.Clamp(System.Int32,System.Int32)">
            <summary>
            Returns component-wise clamp of this vectors.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.AbsValue">
            <summary>
            Returns component-wise absolute value of this vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.Signs">
            <summary>
            Returns component-wise sign of this vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.Modulo(System.Int32)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.Modulo(Mafi.RelTile2i)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.Average(Mafi.RelTile2i)">
            <summary>
            Returns component-wise average of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.Lerp(Mafi.RelTile2i,System.Int64,System.Int64)">
            <summary>
            Linearly interpolates between this and <paramref name="to"/> vectors based on <paramref name="t"/>.
            Interpolation parameter <paramref name="t"/> goes from 0 to <paramref name="scale"/>.
            See <see cref="M:Mafi.MafiMath.Lerp(System.Int32,System.Int32,System.Int64,System.Int64)"/> for details.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.Lerp(Mafi.RelTile2i,Mafi.RelTile2i,System.Int64,System.Int64)">
            <summary>
            Linearly interpolates between <paramref name="from"/> and <paramref name="to"/> vectors based on <paramref
            name="t"/>. Interpolation parameter <paramref name="t"/> goes from 0 to <paramref name="scale"/>. See <see
            cref="M:Mafi.MafiMath.Lerp(System.Int32,System.Int32,System.Int64,System.Int64)"/> for details.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.op_Equality(Mafi.RelTile2i,Mafi.RelTile2i)">
            <summary>
            Exact equality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.op_Inequality(Mafi.RelTile2i,Mafi.RelTile2i)">
            <summary>
            Exact inequality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.op_LessThan(Mafi.RelTile2i,Mafi.RelTile2i)">
            <summary>
            Component-wise less-than operator. Returns true if all components of the left-hand side vector are less than
            respective components of the right-hand side vector.
            WARNING: <c>A &lt; B</c> is not equal to <c>A &gt;= B</c>. For example vectors (1, 2) and (2, 1) are not
            less-than nor greater-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.op_LessThanOrEqual(Mafi.RelTile2i,Mafi.RelTile2i)">
            <summary>
            Component-wise less-than-or-equal operator. Returns true if all components of the left-hand side vector are
            less than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &lt;= B</c> is not equal to <c>A &gt; B</c>. For example vectors (1, 2) and (2, 1) are not
            less-than-or-equal nor greater-than.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.op_GreaterThan(Mafi.RelTile2i,Mafi.RelTile2i)">
            <summary>
            Component-wise greater-than operator. Returns true if all components of the left-hand side vector are
            greater than respective components of the right-hand side vector.
            WARNING: <c>A &gt; B</c> is not equal to <c>A &lt;= B</c>. For example vectors (1, 2) and (2, 1) are not
            greater-than nor less-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.op_GreaterThanOrEqual(Mafi.RelTile2i,Mafi.RelTile2i)">
            <summary>
            Component-wise greater-than-or-equal operator. Returns true if all components of the left-hand side vector
            are greater than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &gt;= B</c> is not equal to <c>A &lt; B</c>. For example vectors (1, 2) and (2, 1) are not
            greater-than-or-equal nor less-than.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.FloorDiv(System.Int32)">
            <summary>
            Computes floor division. Unlike normal division operator in C# this always rounds down.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.op_Division(Mafi.RelTile2i,Mafi.RelTile2i)">
            <summary>
            Component-wise division of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.FloorDiv(Mafi.RelTile2i)">
            <summary>
            Computes floor division. Unlike normal division operator in C# this always rounds down.
            </summary>
        </member>
        <member name="M:Mafi.RelTile2i.op_Modulus(Mafi.RelTile2i,Mafi.RelTile2i)">
            <summary>
            Component-wise modulo of two vectors.
            </summary>
        </member>
        <member name="P:Mafi.RelTile2i.All4Neighbors">
            <summary>
            Helper array for looping over 4 neighbors at distance 1.
            </summary>
        </member>
        <member name="F:Mafi.RelTile2i.s_all4Neighbors">
            <summary>
            All 4 neighbors array.
            </summary>
            <remarks>We can not wrap this immediately because of type initialization loop.</remarks>
        </member>
        <member name="P:Mafi.RelTile2i.All8Neighbors">
            <summary>
            Helper array for looping over 8 neighbors at distance 1.
            </summary>
        </member>
        <member name="F:Mafi.RelTile2i.s_all8Neighbors">
            <summary>
            All 8 neighbors array.
            </summary>
            <remarks>We can not wrap this immediately because of type initialization loop.</remarks>
        </member>
        <member name="M:Mafi.RelTile2iExtensions.NextRelTile2i(Mafi.IRandom,System.Int32,System.Int32)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="M:Mafi.RelTile2iExtensions.NextRelTile2i(Mafi.IRandom,Mafi.RelTile2i,Mafi.RelTile2i)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="T:Mafi.RelTile3f">
            <summary>
            Immutable 2D relative tile coordinate. Represents relative offset from absolute coordinate.
            </summary>
        </member>
        <member name="F:Mafi.RelTile3f.Zero">
            <summary>
            Vector (0, 0, 0).
            </summary>
        </member>
        <member name="F:Mafi.RelTile3f.One">
            <summary>
            Vector (1, 1, 1).
            </summary>
        </member>
        <member name="F:Mafi.RelTile3f.UnitX">
            <summary>
            Vector (1, 0, 0).
            </summary>
        </member>
        <member name="F:Mafi.RelTile3f.UnitY">
            <summary>
            Vector (0, 1, 0).
            </summary>
        </member>
        <member name="F:Mafi.RelTile3f.UnitZ">
            <summary>
            Vector (0, 0, 1).
            </summary>
        </member>
        <member name="F:Mafi.RelTile3f.MinValue">
            <summary>
            Vector (Fix32.MinValue, Fix32.MinValue, Fix32.MinValue).
            </summary>
        </member>
        <member name="F:Mafi.RelTile3f.MaxValue">
            <summary>
            Vector (Fix32.MaxValue, Fix32.MaxValue, Fix32.MaxValue).
            </summary>
        </member>
        <member name="F:Mafi.RelTile3f.X">
            <summary>
            The X component of this vector.
            </summary>
        </member>
        <member name="F:Mafi.RelTile3f.Y">
            <summary>
            The Y component of this vector.
            </summary>
        </member>
        <member name="F:Mafi.RelTile3f.Z">
            <summary>
            The Z component of this vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.#ctor(Mafi.Fix32,Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Creates new RelTile3f from raw components.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.#ctor(Mafi.RelTile2f,Mafi.Fix32)">
            <summary>
            Creates new RelTile3f from RelTile2f and raw components.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.Xy">
            <summary>
            Gets the first two components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.Vector3f">
            <summary>
            Converts this type to Vector3f.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.Sum">
            <summary>
            Sum of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.Length">
            <summary>
            Euclidean length of this vector.
            PERF: Expensive, uses sqrt. Consider using <see cref="P:Mafi.RelTile3f.LengthSqr"/> whenever possible (when comparing
            lengths, etc.).
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.LengthSqr">
            <summary>
            Euclidean length squared of this vector.
            PERF: Cheaper than <see cref="P:Mafi.RelTile3f.Length"/>, does not require expensive sqrt.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.IsZero">
            <summary>
            Whether this vector has all components equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.IsNotZero">
            <summary>e
            Whether this vector has at least one components not equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.SetX(Mafi.Fix32)">
            <summary>
            Returns new vector with changed X component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.SetY(Mafi.Fix32)">
            <summary>
            Returns new vector with changed Y component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.SetZ(Mafi.Fix32)">
            <summary>
            Returns new vector with changed Z component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.SetXy(Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Returns new vector with changed X and Y components.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.SetXy(Mafi.RelTile2f)">
            <summary>
            Returns new vector with changed X and Y components.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.SetXyz(Mafi.Fix32,Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Returns new vector with changed X, Y, and Z components.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.IncrementX">
            <summary>
            Returns new vector with incremented X component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.IncrementY">
            <summary>
            Returns new vector with incremented Y component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.IncrementZ">
            <summary>
            Returns new vector with incremented Z component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.DecrementX">
            <summary>
            Returns new vector with decremented X component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.DecrementY">
            <summary>
            Returns new vector with decremented Y component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.DecrementZ">
            <summary>
            Returns new vector with decremented Z component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.AddX(Mafi.Fix32)">
            <summary>
            Returns new vector with given value added to the X component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.AddY(Mafi.Fix32)">
            <summary>
            Returns new vector with given value added to the Y component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.AddZ(Mafi.Fix32)">
            <summary>
            Returns new vector with given value added to the Z component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.AddXyz(Mafi.Fix32)">
            <summary>
            Returns new vector with given value added to all components.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.MultiplyX(Mafi.Fix32)">
            <summary>
            Returns new vector with given value multiplied with the X component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.MultiplyY(Mafi.Fix32)">
            <summary>
            Returns new vector with given value multiplied with the Y component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.MultiplyZ(Mafi.Fix32)">
            <summary>
            Returns new vector with given value multiplied with the Z component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.ReflectX">
            <summary>
            Returns new vector with reflected X component (opposite sign).
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.ReflectY">
            <summary>
            Returns new vector with reflected Y component (opposite sign).
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.ReflectZ">
            <summary>
            Returns new vector with reflected Z component (opposite sign).
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.OfLength(Mafi.Fix32)">
            <summary>
            Returns scaled vector to requested length. This method is faster and more intuitive than normalization
            followed by multiplication.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.IsNear(Mafi.RelTile3f,Mafi.Fix32)">
            <summary>
            Tests whether corresponding components of this and given vectors are within tolerance.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.IsNormalized">
            <summary>
            Whether this vector length is (nearly) one using default epsilon <see cref="P:Mafi.Fix32.EpsilonNear"/>. Note that
            This uses efficient check of length squared without the need for square root computation.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.Normalized">
            <summary>
            Returns normalized vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.Dot(Mafi.RelTile3f)">
            <summary>
            Returns dot product of this vector with given vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.DistanceTo(Mafi.RelTile3f)">
            <summary>
            Returns distance from this vector to the other vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.DistanceSqrTo(Mafi.RelTile3f)">
            <summary>
            Returns squared distance from this vector to the other vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.Angle">
            <summary>
            Returns absolute angle of this vector. Returned angle is in range [-τ/2, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.Cross(Mafi.RelTile3f)">
            <summary>
            Returns cross product of this vector with given vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.IsParallelTo(Mafi.RelTile3f)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel and not anti-parallel.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.IsAntiParallelTo(Mafi.RelTile3f)">
            <summary>
            Whether this and <see paramref="other"/> vectors are anti-parallel and not parallel.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.IsParallelOrAntiParallelTo(Mafi.RelTile3f)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel or anti-parallel. This is more efficient than
            calling <see paramref="IsParallelTo"/> and <see paramref="IsAntiParallelTo"/>.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.AngleBetween(Mafi.RelTile3f)">
            <summary>
            Returns absolute angle between this and <see paramref="other"/> vectors. Returned angle is in range [0, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.AngleTo(Mafi.RelTile3f)">
            <summary>
            Signed angle-to is not possible in 3D without some kind of reference vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.RotatedAroundX(Mafi.AngleDegrees1f)">
            <summary>
            Returns this vector rotated around X-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.RotatedAroundY(Mafi.AngleDegrees1f)">
            <summary>
            Returns this vector rotated around Y-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.RotatedAroundZ(Mafi.AngleDegrees1f)">
            <summary>
            Returns this vector rotated around Z-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.rotate2dVector(Mafi.Fix32@,Mafi.Fix32@,Mafi.Rotation90)">
            <summary>
            Helper function that rotates a 2d vector, it gets as first two parameters by given angle.
            (1, 0) when rotated by 90 degrees gives (0, 1)
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.RotatedAroundX(Mafi.Rotation90)">
            <summary>
            Returns this vector rotated around X-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.RotatedAroundY(Mafi.Rotation90)">
            <summary>
            Returns this vector rotated around Y-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.RotatedAroundZ(Mafi.Rotation90)">
            <summary>
            Returns this vector rotated around Z-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.Reflect(Mafi.RelTile3f)">
            <summary>
            Reflection of this vector from plane specified by given normal (has to be normalized). This vector should be
            pointing to the plane and reflected vector is pointing away from the plane.
            </summary>
            <remarks>
            <code>
                        Normal vector
                      *
            this   \  |  * reflected
            vector  \ | /  vector
                 ____*|/____  reflection surface given by the normal
            </code>
            </remarks>
        </member>
        <member name="M:Mafi.RelTile3f.Min(Mafi.RelTile3f)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.Max(Mafi.RelTile3f)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.MinComponent">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.MaxComponent">
            <summary>
            Returns component-wise max of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.Clamp(Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Returns component-wise clamp of this vectors.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.AbsValue">
            <summary>
            Returns component-wise absolute value of this vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3f.Signs">
            <summary>
            Returns component-wise sign of this vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.Modulo(Mafi.Fix32)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.Modulo(Mafi.RelTile3f)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.Average(Mafi.RelTile3f)">
            <summary>
            Returns component-wise average of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.Lerp(Mafi.RelTile3f,Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Linearly interpolates between this and <paramref name="to"/> vectors based on <paramref name="t"/>.
            Interpolation parameter <paramref name="t"/> is expected to be from 0 to 1.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.op_Equality(Mafi.RelTile3f,Mafi.RelTile3f)">
            <summary>
            Exact equality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.op_Inequality(Mafi.RelTile3f,Mafi.RelTile3f)">
            <summary>
            Exact inequality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.op_LessThan(Mafi.RelTile3f,Mafi.RelTile3f)">
            <summary>
            Component-wise less-than operator. Returns true if all components of the left-hand side vector are less than
            respective components of the right-hand side vector.
            WARNING: <c>A &lt; B</c> is not equal to <c>A &gt;= B</c>. For example vectors (1, 2, 3) and (3, 2, 1) are not
            less-than nor greater-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.op_LessThanOrEqual(Mafi.RelTile3f,Mafi.RelTile3f)">
            <summary>
            Component-wise less-than-or-equal operator. Returns true if all components of the left-hand side vector are
            less than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &lt;= B</c> is not equal to <c>A &gt; B</c>. For example vectors (1, 2, 3) and (3, 2, 1) are not
            less-than-or-equal nor greater-than.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.op_GreaterThan(Mafi.RelTile3f,Mafi.RelTile3f)">
            <summary>
            Component-wise greater-than operator. Returns true if all components of the left-hand side vector are
            greater than respective components of the right-hand side vector.
            WARNING: <c>A &gt; B</c> is not equal to <c>A &lt;= B</c>. For example vectors (1, 2, 3) and (3, 2, 1) are not
            greater-than nor less-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.op_GreaterThanOrEqual(Mafi.RelTile3f,Mafi.RelTile3f)">
            <summary>
            Component-wise greater-than-or-equal operator. Returns true if all components of the left-hand side vector
            are greater than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &gt;= B</c> is not equal to <c>A &lt; B</c>. For example vectors (1, 2, 3) and (3, 2, 1) are not
            greater-than-or-equal nor less-than.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.op_Division(Mafi.RelTile3f,Mafi.RelTile3f)">
            <summary>
            Component-wise division of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3f.op_Modulus(Mafi.RelTile3f,Mafi.RelTile3f)">
            <summary>
            Component-wise modulo of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3fExtensions.NextRelTile3f(Mafi.IRandom,Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="M:Mafi.RelTile3fExtensions.NextRelTile3f(Mafi.IRandom,Mafi.RelTile3f,Mafi.RelTile3f)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="T:Mafi.RelTile3i">
            <summary>
            Immutable 3D relative tile coordinate. It does not represent real global coordinate.
            </summary>
        </member>
        <member name="F:Mafi.RelTile3i.Zero">
            <summary>
            Vector (0, 0, 0).
            </summary>
        </member>
        <member name="F:Mafi.RelTile3i.One">
            <summary>
            Vector (1, 1, 1).
            </summary>
        </member>
        <member name="F:Mafi.RelTile3i.UnitX">
            <summary>
            Vector (1, 0, 0).
            </summary>
        </member>
        <member name="F:Mafi.RelTile3i.UnitY">
            <summary>
            Vector (0, 1, 0).
            </summary>
        </member>
        <member name="F:Mafi.RelTile3i.UnitZ">
            <summary>
            Vector (0, 0, 1).
            </summary>
        </member>
        <member name="F:Mafi.RelTile3i.MinValue">
            <summary>
            Vector (int.MinValue, int.MinValue, int.MinValue).
            </summary>
        </member>
        <member name="F:Mafi.RelTile3i.MaxValue">
            <summary>
            Vector (int.MaxValue, int.MaxValue, int.MaxValue).
            </summary>
        </member>
        <member name="F:Mafi.RelTile3i.X">
            <summary>
            The X component of this vector.
            </summary>
        </member>
        <member name="F:Mafi.RelTile3i.Y">
            <summary>
            The Y component of this vector.
            </summary>
        </member>
        <member name="F:Mafi.RelTile3i.Z">
            <summary>
            The Z component of this vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new RelTile3i from raw components.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.#ctor(Mafi.RelTile2i,System.Int32)">
            <summary>
            Creates new RelTile3i from RelTile2i and raw components.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.Xy">
            <summary>
            Gets the first two components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.Vector3i">
            <summary>
            Converts this type to Vector3i.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.Sum">
            <summary>
            Sum of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.Length">
            <summary>
            Euclidean length of this vector.
            PERF: Expensive, uses sqrt. Consider using <see cref="P:Mafi.RelTile3i.LengthSqr"/> whenever possible (when comparing
            lengths, etc.).
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.LengthInt">
            <summary>
            Approximate euclidean length of this vector as integer.
            PERF: Expensive, uses sqrt, consider using <see cref="P:Mafi.RelTile3i.LengthSqr"/> whenever possible.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.LengthSqrInt">
            <summary>
            Euclidean length squared of this vector.
            PERF: Cheaper than <see cref="P:Mafi.RelTile3i.Length"/>, does not require expensive sqrt.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.LengthSqr">
            <summary>
            Euclidean length squared of this vector.
            PERF: Cheaper than <see cref="P:Mafi.RelTile3i.Length"/>, does not require expensive sqrt.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.IsZero">
            <summary>
            Whether this vector has all components equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.IsNotZero">
            <summary>e
            Whether this vector has at least one components not equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.SetX(System.Int32)">
            <summary>
            Returns new vector with changed X component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.SetY(System.Int32)">
            <summary>
            Returns new vector with changed Y component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.SetZ(System.Int32)">
            <summary>
            Returns new vector with changed Z component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.SetXy(System.Int32,System.Int32)">
            <summary>
            Returns new vector with changed X and Y components.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.SetXy(Mafi.RelTile2i)">
            <summary>
            Returns new vector with changed X and Y components.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.SetXyz(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns new vector with changed X, Y, and Z components.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.IncrementX">
            <summary>
            Returns new vector with incremented X component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.IncrementY">
            <summary>
            Returns new vector with incremented Y component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.IncrementZ">
            <summary>
            Returns new vector with incremented Z component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.DecrementX">
            <summary>
            Returns new vector with decremented X component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.DecrementY">
            <summary>
            Returns new vector with decremented Y component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.DecrementZ">
            <summary>
            Returns new vector with decremented Z component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.AddX(System.Int32)">
            <summary>
            Returns new vector with given value added to the X component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.AddY(System.Int32)">
            <summary>
            Returns new vector with given value added to the Y component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.AddZ(System.Int32)">
            <summary>
            Returns new vector with given value added to the Z component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.AddXyz(System.Int32)">
            <summary>
            Returns new vector with given value added to all components.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.MultiplyX(System.Int32)">
            <summary>
            Returns new vector with given value multiplied with the X component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.MultiplyY(System.Int32)">
            <summary>
            Returns new vector with given value multiplied with the Y component.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.MultiplyZ(System.Int32)">
            <summary>
            Returns new vector with given value multiplied with the Z component.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.ReflectX">
            <summary>
            Returns new vector with reflected X component (opposite sign).
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.ReflectY">
            <summary>
            Returns new vector with reflected Y component (opposite sign).
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.ReflectZ">
            <summary>
            Returns new vector with reflected Z component (opposite sign).
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.MulDiv(System.Int64,System.Int64)">
            <summary>
            Multiples and divides all components. This method is using long precision to prevent int32 overflows.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.OfLength(System.Int32)">
            <summary>
            Returns scaled vector to requested length. This method is more precise, faster and more intuitive than
            normalization followed by multiplication.
            WARNING: Setting length of integer vector may not produce exact requested length do to rounding error.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.IsNear(Mafi.RelTile3i,System.Int32)">
            <summary>
            Whether corresponding components of this and given vectors are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.Dot(Mafi.RelTile3i)">
            <summary>
            Returns dot product of this vector with given vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.DotInt(Mafi.RelTile3i)">
            <summary>
            Returns dot product of this vector with given vector as int32. Note that result of this method may overflow
            if magnitude of any component is larger than ~30,000.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.DistanceTo(Mafi.RelTile3i)">
            <summary>
            Returns distance from this vector to the other vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.DistanceSqrTo(Mafi.RelTile3i)">
            <summary>
            Returns squared distance from this vector to the other vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.Angle">
            <summary>
            Returns absolute angle of this vector. Returned angle is in range [-τ/2, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.Cross(Mafi.RelTile3i)">
            <summary>
            Returns cross product of this vector with given vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.IsParallelTo(Mafi.RelTile3i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel and not anti-parallel.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.IsAntiParallelTo(Mafi.RelTile3i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are anti-parallel and not parallel.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.IsParallelOrAntiParallelTo(Mafi.RelTile3i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel or anti-parallel. This is more efficient than
            calling <see paramref="IsParallelTo"/> and <see paramref="IsAntiParallelTo"/>.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.AngleBetween(Mafi.RelTile3i)">
            <summary>
            Returns absolute angle between this and <see paramref="other"/> vectors. Returned angle is in range [0, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.AngleTo(Mafi.RelTile3i)">
            <summary>
            Signed angle-to is not possible in 3D without some kind of reference vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.RotatedAroundX(Mafi.AngleDegrees1f)">
            <summary>
            Returns this vector rotated around X-axis by given amount.
            WARNING: Please keep in mind that rotating integer vectors may not be precise for vectors with small
            magnitudes due to rounding errors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.RotatedAroundY(Mafi.AngleDegrees1f)">
            <summary>
            Returns this vector rotated around Y-axis by given amount.
            WARNING: Please keep in mind that rotating integer vectors may not be precise for vectors with small
            magnitudes due to rounding errors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.RotatedAroundZ(Mafi.AngleDegrees1f)">
            <summary>
            Returns this vector rotated around Z-axis by given amount.
            WARNING: Please keep in mind that rotating integer vectors may not be precise for vectors with small
            magnitudes due to rounding errors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.rotate2dVector(System.Int32@,System.Int32@,Mafi.Rotation90)">
            <summary>
            Helper function that rotates a 2d vector, it gets as first two parameters by given angle.
            (1, 0) when rotated by 90 degrees gives (0, 1)
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.RotatedAroundX(Mafi.Rotation90)">
            <summary>
            Returns this vector rotated around X-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.RotatedAroundY(Mafi.Rotation90)">
            <summary>
            Returns this vector rotated around Y-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.RotatedAroundZ(Mafi.Rotation90)">
            <summary>
            Returns this vector rotated around Z-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.Min(Mafi.RelTile3i)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.Max(Mafi.RelTile3i)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.MinComponent">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.MaxComponent">
            <summary>
            Returns component-wise max of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.Clamp(System.Int32,System.Int32)">
            <summary>
            Returns component-wise clamp of this vectors.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.AbsValue">
            <summary>
            Returns component-wise absolute value of this vector.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.Signs">
            <summary>
            Returns component-wise sign of this vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.Modulo(System.Int32)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.Modulo(Mafi.RelTile3i)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.Average(Mafi.RelTile3i)">
            <summary>
            Returns component-wise average of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.Lerp(Mafi.RelTile3i,System.Int64,System.Int64)">
            <summary>
            Linearly interpolates between this and <paramref name="to"/> vectors based on <paramref name="t"/>.
            Interpolation parameter <paramref name="t"/> goes from 0 to <paramref name="scale"/>.
            See <see cref="M:Mafi.MafiMath.Lerp(System.Int32,System.Int32,System.Int64,System.Int64)"/> for details.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.Lerp(Mafi.RelTile3i,Mafi.RelTile3i,System.Int64,System.Int64)">
            <summary>
            Linearly interpolates between <paramref name="from"/> and <paramref name="to"/> vectors based on <paramref
            name="t"/>. Interpolation parameter <paramref name="t"/> goes from 0 to <paramref name="scale"/>. See <see
            cref="M:Mafi.MafiMath.Lerp(System.Int32,System.Int32,System.Int64,System.Int64)"/> for details.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.op_Equality(Mafi.RelTile3i,Mafi.RelTile3i)">
            <summary>
            Exact equality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.op_Inequality(Mafi.RelTile3i,Mafi.RelTile3i)">
            <summary>
            Exact inequality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.op_LessThan(Mafi.RelTile3i,Mafi.RelTile3i)">
            <summary>
            Component-wise less-than operator. Returns true if all components of the left-hand side vector are less than
            respective components of the right-hand side vector.
            WARNING: <c>A &lt; B</c> is not equal to <c>A &gt;= B</c>. For example vectors (1, 2, 3) and (3, 2, 1) are not
            less-than nor greater-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.op_LessThanOrEqual(Mafi.RelTile3i,Mafi.RelTile3i)">
            <summary>
            Component-wise less-than-or-equal operator. Returns true if all components of the left-hand side vector are
            less than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &lt;= B</c> is not equal to <c>A &gt; B</c>. For example vectors (1, 2, 3) and (3, 2, 1) are not
            less-than-or-equal nor greater-than.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.op_GreaterThan(Mafi.RelTile3i,Mafi.RelTile3i)">
            <summary>
            Component-wise greater-than operator. Returns true if all components of the left-hand side vector are
            greater than respective components of the right-hand side vector.
            WARNING: <c>A &gt; B</c> is not equal to <c>A &lt;= B</c>. For example vectors (1, 2, 3) and (3, 2, 1) are not
            greater-than nor less-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.op_GreaterThanOrEqual(Mafi.RelTile3i,Mafi.RelTile3i)">
            <summary>
            Component-wise greater-than-or-equal operator. Returns true if all components of the left-hand side vector
            are greater than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &gt;= B</c> is not equal to <c>A &lt; B</c>. For example vectors (1, 2, 3) and (3, 2, 1) are not
            greater-than-or-equal nor less-than.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.FloorDiv(System.Int32)">
            <summary>
            Computes floor division. Unlike normal division operator in C# this always rounds down.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.op_Division(Mafi.RelTile3i,Mafi.RelTile3i)">
            <summary>
            Component-wise division of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.FloorDiv(Mafi.RelTile3i)">
            <summary>
            Computes floor division. Unlike normal division operator in C# this always rounds down.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3i.op_Modulus(Mafi.RelTile3i,Mafi.RelTile3i)">
            <summary>
            Component-wise modulo of two vectors.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.Vector3f">
            <summary>
            Converts values of this coordinate directly to <see cref="P:Mafi.RelTile3i.Vector3f"/>.
            </summary>
        </member>
        <member name="P:Mafi.RelTile3i.Thickness">
            <summary>
            Returns thickness (relative height) which is Z component of this vector.
            </summary>
        </member>
        <member name="M:Mafi.RelTile3iExtensions.NextRelTile3i(Mafi.IRandom,System.Int32,System.Int32)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="M:Mafi.RelTile3iExtensions.NextRelTile3i(Mafi.IRandom,Mafi.RelTile3i,Mafi.RelTile3i)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="P:Mafi.SimStep.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.SimStep.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.SimStep.Min(Mafi.SimStep)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.SimStep.Max(Mafi.SimStep)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.SimStep.Clamp(Mafi.SimStep,Mafi.SimStep)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.SimStep.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.SimStep.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.SimStep.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.SimStep.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.SimStep.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.SimStep.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.SimStep.IsNear(Mafi.SimStep,Mafi.SimStep)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.SimStep.Lerp(Mafi.SimStep,System.Int32,System.Int32)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.SimStep.Lerp(Mafi.SimStep,Mafi.Percent)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.SimStep.Average(Mafi.SimStep)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.SimStep.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="T:Mafi.ThicknessTilesF">
            <summary>
            Normalized terrain thickness with one unit equal to one tile and origin at 0.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesF.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesF.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.ThicknessTilesF.Min(Mafi.ThicknessTilesF)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.ThicknessTilesF.Max(Mafi.ThicknessTilesF)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.ThicknessTilesF.Clamp(Mafi.ThicknessTilesF,Mafi.ThicknessTilesF)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesF.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesF.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesF.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesF.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesF.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesF.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.ThicknessTilesF.IsNear(Mafi.ThicknessTilesF)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.ThicknessTilesF.IsNear(Mafi.ThicknessTilesF,Mafi.ThicknessTilesF)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.ThicknessTilesF.Average(Mafi.ThicknessTilesF)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesF.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="M:Mafi.ThicknessTilesF.RemoveAsMuchAs(Mafi.ThicknessTilesF@)">
            <summary>
            Removes as much as possible from this thickness without going to negative values and returns the result.
            Given value to remove also stores remainder if there was not enough thickness to remove.
            </summary>
        </member>
        <member name="T:Mafi.ThicknessTilesI">
            <summary>
            Normalized terrain thickness with one unit equal to one tile.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesI.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesI.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.ThicknessTilesI.Min(Mafi.ThicknessTilesI)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.ThicknessTilesI.Max(Mafi.ThicknessTilesI)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.ThicknessTilesI.Clamp(Mafi.ThicknessTilesI,Mafi.ThicknessTilesI)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesI.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesI.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesI.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesI.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesI.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesI.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.ThicknessTilesI.IsNear(Mafi.ThicknessTilesI,Mafi.ThicknessTilesI)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.ThicknessTilesI.Lerp(Mafi.ThicknessTilesI,System.Int32,System.Int32)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.ThicknessTilesI.Lerp(Mafi.ThicknessTilesI,Mafi.Percent)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="M:Mafi.ThicknessTilesI.Average(Mafi.ThicknessTilesI)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.ThicknessTilesI.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="T:Mafi.Tile2f">
            <summary>
            Immutable 2D global tile coordinate. This coordinate represents a corner of the tile.
            </summary>
        </member>
        <member name="F:Mafi.Tile2f.Zero">
            <summary>
            Vector (0, 0).
            </summary>
        </member>
        <member name="F:Mafi.Tile2f.One">
            <summary>
            Vector (1, 1).
            </summary>
        </member>
        <member name="F:Mafi.Tile2f.UnitX">
            <summary>
            Vector (1, 0).
            </summary>
        </member>
        <member name="F:Mafi.Tile2f.UnitY">
            <summary>
            Vector (0, 1).
            </summary>
        </member>
        <member name="F:Mafi.Tile2f.MinValue">
            <summary>
            Vector (Fix32.MinValue, Fix32.MinValue).
            </summary>
        </member>
        <member name="F:Mafi.Tile2f.MaxValue">
            <summary>
            Vector (Fix32.MaxValue, Fix32.MaxValue).
            </summary>
        </member>
        <member name="F:Mafi.Tile2f.X">
            <summary>
            The X component of this vector.
            </summary>
        </member>
        <member name="F:Mafi.Tile2f.Y">
            <summary>
            The Y component of this vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.#ctor(Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Creates new Tile2f from raw components.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.Vector2f">
            <summary>
            Converts this type to Vector2f.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.Sum">
            <summary>
            Sum of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.Product">
            <summary>
            Product of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.Length">
            <summary>
            Euclidean length of this vector.
            PERF: Expensive, uses sqrt. Consider using <see cref="P:Mafi.Tile2f.LengthSqr"/> whenever possible (when comparing
            lengths, etc.).
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.LengthSqr">
            <summary>
            Euclidean length squared of this vector.
            PERF: Cheaper than <see cref="P:Mafi.Tile2f.Length"/>, does not require expensive sqrt.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.IsZero">
            <summary>
            Whether this vector has all components equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.IsNotZero">
            <summary>e
            Whether this vector has at least one components not equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.SetX(Mafi.Fix32)">
            <summary>
            Returns new vector with changed X component.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.SetY(Mafi.Fix32)">
            <summary>
            Returns new vector with changed Y component.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.ExtendZ(Mafi.Fix32)">
            <summary>
            Extends this vector a new component.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.IncrementX">
            <summary>
            Returns new vector with incremented X component.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.IncrementY">
            <summary>
            Returns new vector with incremented Y component.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.DecrementX">
            <summary>
            Returns new vector with decremented X component.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.DecrementY">
            <summary>
            Returns new vector with decremented Y component.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.AddX(Mafi.Fix32)">
            <summary>
            Returns new vector with given value added to the X component.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.AddY(Mafi.Fix32)">
            <summary>
            Returns new vector with given value added to the Y component.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.AddXy(Mafi.Fix32)">
            <summary>
            Returns new vector with given value added to all components.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.MultiplyX(Mafi.Fix32)">
            <summary>
            Returns new vector with given value multiplied with the X component.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.MultiplyY(Mafi.Fix32)">
            <summary>
            Returns new vector with given value multiplied with the Y component.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.ReflectX">
            <summary>
            Returns new vector with reflected X component (opposite sign).
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.ReflectY">
            <summary>
            Returns new vector with reflected Y component (opposite sign).
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.OfLength(Mafi.Fix32)">
            <summary>
            Returns scaled vector to requested length. This method is faster and more intuitive than normalization
            followed by multiplication.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.IsNear(Mafi.Tile2f,Mafi.Fix32)">
            <summary>
            Tests whether corresponding components of this and given vectors are within tolerance.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.IsNormalized">
            <summary>
            Whether this vector length is (nearly) one using default epsilon <see cref="P:Mafi.Fix32.EpsilonNear"/>. Note that
            This uses efficient check of length squared without the need for square root computation.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.Normalized">
            <summary>
            Returns normalized vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.Dot(Mafi.Tile2f)">
            <summary>
            Returns dot product of this vector with given vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.DistanceTo(Mafi.Tile2f)">
            <summary>
            Returns distance from this vector to the other vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.DistanceSqrTo(Mafi.Tile2f)">
            <summary>
            Returns squared distance from this vector to the other vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.Angle">
            <summary>
            Returns absolute angle of this vector. Returned angle is in range [-τ/2, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.PseudoCross(Mafi.Tile2f)">
            <summary>
            Returns pseudo-cross product of this vector with <paramref name="other"/> vector. That is, Z component of 3D
            cross product between the two vectors with Z equal to 0.
            </summary>
            <remarks>
            This operation is very efficient and has following properties:
            * v1.PseudoCross(v2) = |v1| |v2| sin(θ) where θ is signed angle from v1 to v2 ( <c>v1.AngleTo(v2)</c>).
            * Returns 0 for parallel (or anti-parallel) vectors.
            * Returns positive values when v2 is to the left of v1.
            * Returns negative values when v2 is to the right of v1.
            </remarks>
        </member>
        <member name="M:Mafi.Tile2f.Rotate(Mafi.AngleDegrees1f)">
            <summary>
            Returns rotated vector by given angle. Positive angle values represent in counter-clockwise rotation. This
            means that <c>(1, 0).Rotate(90°) == (0, 1)</c>.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.Rotate(Mafi.Rotation90)">
            <summary>
            Returns rotated vector by given angle. Positive angle values represent in counter-clockwise rotation. This
            means that <c>(1, 0).Rotate(90°) == (0, 1)</c>.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.Rotate(Mafi.AngleDegrees1f,Mafi.RelTile2f)">
            <summary>
            Returns rotated vector by given angle around given pivot point. Positive angle values represent in
            counter-clockwise rotation. This means that <c>(1, 0).Rotate(90°) == (0, 1)</c>.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.AngleTo(Mafi.Tile2f)">
            <summary>
            Returns signed angle from this vector to <paramref name="other"/> vector. Returned angle represents how much
            this vector has to be rotated to obtain <paramref name="other"/> vector. Returned value is [-τ/2, τ/2). This
            means that <c>v1.AngleTo(v2) == -v2.AngleTo(v1)</c> and <c>v1.Rotate(v1.AngleTo(v2)) == v2</c>.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.AngleBetween(Mafi.Tile2f)">
            <summary>
            Returns absolute angle between this and <see paramref="other"/> vectors. Returned angle is in range [0, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.IsParallelTo(Mafi.Tile2f)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel and not anti-parallel.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.IsAntiParallelTo(Mafi.Tile2f)">
            <summary>
            Whether this and <see paramref="other"/> vectors are anti-parallel and not parallel.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.IsParallelOrAntiParallelTo(Mafi.Tile2f)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel or anti-parallel. This is more efficient than
            calling <see paramref="IsParallelTo"/> and <see paramref="IsAntiParallelTo"/>.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.LeftOrthogonalVector">
            <summary>
            Returns this vector rotated by 90 degrees to the left (counter clockwise).
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.RightOrthogonalVector">
            <summary>
            Returns this vector rotated by 90 degrees to the right (clockwise).
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.Min(Mafi.Tile2f)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.Max(Mafi.Tile2f)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.MinComponent">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.MaxComponent">
            <summary>
            Returns component-wise max of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.Clamp(Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Returns component-wise clamp of this vectors.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.AbsValue">
            <summary>
            Returns component-wise absolute value of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile2f.Signs">
            <summary>
            Returns component-wise sign of this vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.Modulo(Mafi.Fix32)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.Modulo(Mafi.Tile2f)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.Average(Mafi.Tile2f)">
            <summary>
            Returns component-wise average of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.Lerp(Mafi.Tile2f,Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Linearly interpolates between this and <paramref name="to"/> vectors based on <paramref name="t"/>.
            Interpolation parameter <paramref name="t"/> is expected to be from 0 to 1.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.op_Equality(Mafi.Tile2f,Mafi.Tile2f)">
            <summary>
            Exact equality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.op_Inequality(Mafi.Tile2f,Mafi.Tile2f)">
            <summary>
            Exact inequality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.op_LessThan(Mafi.Tile2f,Mafi.Tile2f)">
            <summary>
            Component-wise less-than operator. Returns true if all components of the left-hand side vector are less than
            respective components of the right-hand side vector.
            WARNING: <c>A &lt; B</c> is not equal to <c>A &gt;= B</c>. For example vectors (1, 2) and (2, 1) are not
            less-than nor greater-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.op_LessThanOrEqual(Mafi.Tile2f,Mafi.Tile2f)">
            <summary>
            Component-wise less-than-or-equal operator. Returns true if all components of the left-hand side vector are
            less than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &lt;= B</c> is not equal to <c>A &gt; B</c>. For example vectors (1, 2) and (2, 1) are not
            less-than-or-equal nor greater-than.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.op_GreaterThan(Mafi.Tile2f,Mafi.Tile2f)">
            <summary>
            Component-wise greater-than operator. Returns true if all components of the left-hand side vector are
            greater than respective components of the right-hand side vector.
            WARNING: <c>A &gt; B</c> is not equal to <c>A &lt;= B</c>. For example vectors (1, 2) and (2, 1) are not
            greater-than nor less-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.op_GreaterThanOrEqual(Mafi.Tile2f,Mafi.Tile2f)">
            <summary>
            Component-wise greater-than-or-equal operator. Returns true if all components of the left-hand side vector
            are greater than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &gt;= B</c> is not equal to <c>A &lt; B</c>. For example vectors (1, 2) and (2, 1) are not
            greater-than-or-equal nor less-than.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.op_LessThan(Mafi.Tile2f,Mafi.Tile2i)">
            <summary>
            Component-wise less-than operator. Returns true if all components of the left-hand side vector are less than
            respective components of the right-hand side vector.
            WARNING: <c>A &lt; B</c> is not equal to <c>A &gt;= B</c>. For example vectors (1, 2) and (2, 1) are not
            less-than nor greater-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.op_LessThanOrEqual(Mafi.Tile2f,Mafi.Tile2i)">
            <summary>
            Component-wise less-than-or-equal operator. Returns true if all components of the left-hand side vector are
            less than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &lt;= B</c> is not equal to <c>A &gt; B</c>. For example vectors (1, 2) and (2, 1) are not
            less-than-or-equal nor greater-than.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.op_GreaterThan(Mafi.Tile2f,Mafi.Tile2i)">
            <summary>
            Component-wise greater-than operator. Returns true if all components of the left-hand side vector are
            greater than respective components of the right-hand side vector.
            WARNING: <c>A &gt; B</c> is not equal to <c>A &lt;= B</c>. For example vectors (1, 2) and (2, 1) are not
            greater-than nor less-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.Tile2f.op_GreaterThanOrEqual(Mafi.Tile2f,Mafi.Tile2i)">
            <summary>
            Component-wise greater-than-or-equal operator. Returns true if all components of the left-hand side vector
            are greater than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &gt;= B</c> is not equal to <c>A &lt; B</c>. For example vectors (1, 2) and (2, 1) are not
            greater-than-or-equal nor less-than.
            </summary>
        </member>
        <member name="M:Mafi.Tile2fExtensions.NextTile2f(Mafi.IRandom,Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="M:Mafi.Tile2fExtensions.NextTile2f(Mafi.IRandom,Mafi.Tile2f,Mafi.Tile2f)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="T:Mafi.Tile2i">
            <summary>
            Immutable 2D global tile coordinate. This coordinate represents a corner of the tile.
            </summary>
        </member>
        <member name="F:Mafi.Tile2i.Zero">
            <summary>
            Vector (0, 0).
            </summary>
        </member>
        <member name="F:Mafi.Tile2i.One">
            <summary>
            Vector (1, 1).
            </summary>
        </member>
        <member name="F:Mafi.Tile2i.UnitX">
            <summary>
            Vector (1, 0).
            </summary>
        </member>
        <member name="F:Mafi.Tile2i.UnitY">
            <summary>
            Vector (0, 1).
            </summary>
        </member>
        <member name="F:Mafi.Tile2i.MinValue">
            <summary>
            Vector (int.MinValue, int.MinValue).
            </summary>
        </member>
        <member name="F:Mafi.Tile2i.MaxValue">
            <summary>
            Vector (int.MaxValue, int.MaxValue).
            </summary>
        </member>
        <member name="F:Mafi.Tile2i.X">
            <summary>
            The X component of this vector.
            </summary>
        </member>
        <member name="F:Mafi.Tile2i.Y">
            <summary>
            The Y component of this vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates new Tile2i from raw components.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.Vector2i">
            <summary>
            Converts this type to Vector2i.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.Sum">
            <summary>
            Sum of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.Product">
            <summary>
            Product of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.ProductInt">
            <summary>
            Product of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.Length">
            <summary>
            Euclidean length of this vector.
            PERF: Expensive, uses sqrt. Consider using <see cref="P:Mafi.Tile2i.LengthSqr"/> whenever possible (when comparing
            lengths, etc.).
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.LengthInt">
            <summary>
            Approximate euclidean length of this vector as integer.
            PERF: Expensive, uses sqrt, consider using <see cref="P:Mafi.Tile2i.LengthSqr"/> whenever possible.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.LengthSqrInt">
            <summary>
            Euclidean length squared of this vector.
            PERF: Cheaper than <see cref="P:Mafi.Tile2i.Length"/>, does not require expensive sqrt.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.LengthSqr">
            <summary>
            Euclidean length squared of this vector.
            PERF: Cheaper than <see cref="P:Mafi.Tile2i.Length"/>, does not require expensive sqrt.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.IsZero">
            <summary>
            Whether this vector has all components equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.IsNotZero">
            <summary>e
            Whether this vector has at least one components not equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.SetX(System.Int32)">
            <summary>
            Returns new vector with changed X component.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.SetY(System.Int32)">
            <summary>
            Returns new vector with changed Y component.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.ExtendZ(System.Int32)">
            <summary>
            Extends this vector a new component.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.IncrementX">
            <summary>
            Returns new vector with incremented X component.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.IncrementY">
            <summary>
            Returns new vector with incremented Y component.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.DecrementX">
            <summary>
            Returns new vector with decremented X component.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.DecrementY">
            <summary>
            Returns new vector with decremented Y component.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.AddX(System.Int32)">
            <summary>
            Returns new vector with given value added to the X component.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.AddY(System.Int32)">
            <summary>
            Returns new vector with given value added to the Y component.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.AddXy(System.Int32)">
            <summary>
            Returns new vector with given value added to all components.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.MultiplyX(System.Int32)">
            <summary>
            Returns new vector with given value multiplied with the X component.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.MultiplyY(System.Int32)">
            <summary>
            Returns new vector with given value multiplied with the Y component.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.ReflectX">
            <summary>
            Returns new vector with reflected X component (opposite sign).
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.ReflectY">
            <summary>
            Returns new vector with reflected Y component (opposite sign).
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.MulDiv(System.Int64,System.Int64)">
            <summary>
            Multiples and divides all components. This method is using long precision to prevent int32 overflows.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.OfLength(System.Int32)">
            <summary>
            Returns scaled vector to requested length. This method is more precise, faster and more intuitive than
            normalization followed by multiplication.
            WARNING: Setting length of integer vector may not produce exact requested length do to rounding error.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.IsNear(Mafi.Tile2i,System.Int32)">
            <summary>
            Whether corresponding components of this and given vectors are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.Dot(Mafi.Tile2i)">
            <summary>
            Returns dot product of this vector with given vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.DotInt(Mafi.Tile2i)">
            <summary>
            Returns dot product of this vector with given vector as int32. Note that result of this method may overflow
            if magnitude of any component is larger than ~30,000.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.DistanceTo(Mafi.Tile2i)">
            <summary>
            Returns distance from this vector to the other vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.DistanceSqrTo(Mafi.Tile2i)">
            <summary>
            Returns squared distance from this vector to the other vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.Angle">
            <summary>
            Returns absolute angle of this vector. Returned angle is in range [-τ/2, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.PseudoCross(Mafi.Tile2i)">
            <summary>
            Returns pseudo-cross product of this vector with <paramref name="other"/> vector. That is, Z component of 3D
            cross product between the two vectors with Z equal to 0.
            </summary>
            <remarks>
            This operation is very efficient and has following properties:
            * v1.PseudoCross(v2) = |v1| |v2| sin(θ) where θ is signed angle from v1 to v2 ( <c>v1.AngleTo(v2)</c>).
            * Returns 0 for parallel (or anti-parallel) vectors.
            * Returns positive values when v2 is to the left of v1.
            * Returns negative values when v2 is to the right of v1.
            </remarks>
        </member>
        <member name="M:Mafi.Tile2i.Rotate(Mafi.AngleDegrees1f)">
            <summary>
            Returns rotated vector by given angle. Positive angle values represent in counter-clockwise rotation. This
            means that <c>(1, 0).Rotate(90°) == (0, 1)</c>.
            WARNING: Please keep in mind that rotating integer vectors may not be precise for vectors with small
            magnitudes due to rounding errors.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.Rotate(Mafi.Rotation90)">
            <summary>
            Returns rotated vector by given angle. Positive angle values represent in counter-clockwise rotation. This
            means that <c>(1, 0).Rotate(90°) == (0, 1)</c>.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.Rotate(Mafi.AngleDegrees1f,Mafi.RelTile2i)">
            <summary>
            Returns rotated vector by given angle around given pivot point. Positive angle values represent in
            counter-clockwise rotation. This means that <c>(1, 0).Rotate(90°) == (0, 1)</c>.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.AngleTo(Mafi.Tile2i)">
            <summary>
            Returns signed angle from this vector to <paramref name="other"/> vector. Returned angle represents how much
            this vector has to be rotated to obtain <paramref name="other"/> vector. Returned value is [-τ/2, τ/2). This
            means that <c>v1.AngleTo(v2) == -v2.AngleTo(v1)</c> and <c>v1.Rotate(v1.AngleTo(v2)) == v2</c>.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.AngleBetween(Mafi.Tile2i)">
            <summary>
            Returns absolute angle between this and <see paramref="other"/> vectors. Returned angle is in range [0, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.IsParallelTo(Mafi.Tile2i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel and not anti-parallel.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.IsAntiParallelTo(Mafi.Tile2i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are anti-parallel and not parallel.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.IsParallelOrAntiParallelTo(Mafi.Tile2i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel or anti-parallel. This is more efficient than
            calling <see paramref="IsParallelTo"/> and <see paramref="IsAntiParallelTo"/>.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.LeftOrthogonalVector">
            <summary>
            Returns this vector rotated by 90 degrees to the left (counter clockwise).
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.RightOrthogonalVector">
            <summary>
            Returns this vector rotated by 90 degrees to the right (clockwise).
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.Min(Mafi.Tile2i)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.Max(Mafi.Tile2i)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.MinComponent">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.MaxComponent">
            <summary>
            Returns component-wise max of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.Clamp(System.Int32,System.Int32)">
            <summary>
            Returns component-wise clamp of this vectors.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.AbsValue">
            <summary>
            Returns component-wise absolute value of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.Signs">
            <summary>
            Returns component-wise sign of this vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.Modulo(System.Int32)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.Modulo(Mafi.Tile2i)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.Average(Mafi.Tile2i)">
            <summary>
            Returns component-wise average of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.Lerp(Mafi.Tile2i,System.Int64,System.Int64)">
            <summary>
            Linearly interpolates between this and <paramref name="to"/> vectors based on <paramref name="t"/>.
            Interpolation parameter <paramref name="t"/> goes from 0 to <paramref name="scale"/>.
            See <see cref="M:Mafi.MafiMath.Lerp(System.Int32,System.Int32,System.Int64,System.Int64)"/> for details.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.Lerp(Mafi.Tile2i,Mafi.Tile2i,System.Int64,System.Int64)">
            <summary>
            Linearly interpolates between <paramref name="from"/> and <paramref name="to"/> vectors based on <paramref
            name="t"/>. Interpolation parameter <paramref name="t"/> goes from 0 to <paramref name="scale"/>. See <see
            cref="M:Mafi.MafiMath.Lerp(System.Int32,System.Int32,System.Int64,System.Int64)"/> for details.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.op_Equality(Mafi.Tile2i,Mafi.Tile2i)">
            <summary>
            Exact equality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.op_Inequality(Mafi.Tile2i,Mafi.Tile2i)">
            <summary>
            Exact inequality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.op_LessThan(Mafi.Tile2i,Mafi.Tile2i)">
            <summary>
            Component-wise less-than operator. Returns true if all components of the left-hand side vector are less than
            respective components of the right-hand side vector.
            WARNING: <c>A &lt; B</c> is not equal to <c>A &gt;= B</c>. For example vectors (1, 2) and (2, 1) are not
            less-than nor greater-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.op_LessThanOrEqual(Mafi.Tile2i,Mafi.Tile2i)">
            <summary>
            Component-wise less-than-or-equal operator. Returns true if all components of the left-hand side vector are
            less than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &lt;= B</c> is not equal to <c>A &gt; B</c>. For example vectors (1, 2) and (2, 1) are not
            less-than-or-equal nor greater-than.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.op_GreaterThan(Mafi.Tile2i,Mafi.Tile2i)">
            <summary>
            Component-wise greater-than operator. Returns true if all components of the left-hand side vector are
            greater than respective components of the right-hand side vector.
            WARNING: <c>A &gt; B</c> is not equal to <c>A &lt;= B</c>. For example vectors (1, 2) and (2, 1) are not
            greater-than nor less-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.op_GreaterThanOrEqual(Mafi.Tile2i,Mafi.Tile2i)">
            <summary>
            Component-wise greater-than-or-equal operator. Returns true if all components of the left-hand side vector
            are greater than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &gt;= B</c> is not equal to <c>A &lt; B</c>. For example vectors (1, 2) and (2, 1) are not
            greater-than-or-equal nor less-than.
            </summary>
        </member>
        <member name="M:Mafi.Tile2i.FloorDiv(System.Int32)">
            <summary>
            Computes floor division. Unlike normal division operator in C# this always rounds down.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.ChunkCoord2i">
            <summary>
            Converts this global tile coordinate to integer coordinate of parent chunk.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.TileInChunkCoord">
            <summary>
            Converts this global tile coordinate to integer relative coordinate of this tile within its parent chunk.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.CornerTile2f">
            <summary>
            Converts this corner-based tile coordinate to floating point corner-based representation.
            </summary>
        </member>
        <member name="P:Mafi.Tile2i.CenterTile2f">
            <summary>
            Converts this corner-based tile coordinate to floating point center-based representation.
            </summary>
        </member>
        <member name="M:Mafi.Tile2iExtensions.NextTile2i(Mafi.IRandom,System.Int32,System.Int32)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="M:Mafi.Tile2iExtensions.NextTile2i(Mafi.IRandom,Mafi.Tile2i,Mafi.Tile2i)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="T:Mafi.Tile3f">
            <summary>
            Immutable 3D global tile coordinate that represents index of a 3D terrain tileS.
            </summary>
        </member>
        <member name="F:Mafi.Tile3f.Zero">
            <summary>
            Vector (0, 0, 0).
            </summary>
        </member>
        <member name="F:Mafi.Tile3f.One">
            <summary>
            Vector (1, 1, 1).
            </summary>
        </member>
        <member name="F:Mafi.Tile3f.UnitX">
            <summary>
            Vector (1, 0, 0).
            </summary>
        </member>
        <member name="F:Mafi.Tile3f.UnitY">
            <summary>
            Vector (0, 1, 0).
            </summary>
        </member>
        <member name="F:Mafi.Tile3f.UnitZ">
            <summary>
            Vector (0, 0, 1).
            </summary>
        </member>
        <member name="F:Mafi.Tile3f.MinValue">
            <summary>
            Vector (Fix32.MinValue, Fix32.MinValue, Fix32.MinValue).
            </summary>
        </member>
        <member name="F:Mafi.Tile3f.MaxValue">
            <summary>
            Vector (Fix32.MaxValue, Fix32.MaxValue, Fix32.MaxValue).
            </summary>
        </member>
        <member name="F:Mafi.Tile3f.X">
            <summary>
            The X component of this vector.
            </summary>
        </member>
        <member name="F:Mafi.Tile3f.Y">
            <summary>
            The Y component of this vector.
            </summary>
        </member>
        <member name="F:Mafi.Tile3f.Z">
            <summary>
            The Z component of this vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.#ctor(Mafi.Fix32,Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Creates new Tile3f from raw components.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.#ctor(Mafi.Tile2f,Mafi.Fix32)">
            <summary>
            Creates new Tile3f from Tile2f and raw components.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.Xy">
            <summary>
            Gets the first two components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.Vector3f">
            <summary>
            Converts this type to Vector3f.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.Sum">
            <summary>
            Sum of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.Length">
            <summary>
            Euclidean length of this vector.
            PERF: Expensive, uses sqrt. Consider using <see cref="P:Mafi.Tile3f.LengthSqr"/> whenever possible (when comparing
            lengths, etc.).
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.LengthSqr">
            <summary>
            Euclidean length squared of this vector.
            PERF: Cheaper than <see cref="P:Mafi.Tile3f.Length"/>, does not require expensive sqrt.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.IsZero">
            <summary>
            Whether this vector has all components equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.IsNotZero">
            <summary>e
            Whether this vector has at least one components not equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.SetX(Mafi.Fix32)">
            <summary>
            Returns new vector with changed X component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.SetY(Mafi.Fix32)">
            <summary>
            Returns new vector with changed Y component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.SetZ(Mafi.Fix32)">
            <summary>
            Returns new vector with changed Z component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.SetXy(Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Returns new vector with changed X and Y components.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.SetXy(Mafi.Tile2f)">
            <summary>
            Returns new vector with changed X and Y components.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.SetXyz(Mafi.Fix32,Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Returns new vector with changed X, Y, and Z components.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.IncrementX">
            <summary>
            Returns new vector with incremented X component.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.IncrementY">
            <summary>
            Returns new vector with incremented Y component.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.IncrementZ">
            <summary>
            Returns new vector with incremented Z component.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.DecrementX">
            <summary>
            Returns new vector with decremented X component.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.DecrementY">
            <summary>
            Returns new vector with decremented Y component.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.DecrementZ">
            <summary>
            Returns new vector with decremented Z component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.AddX(Mafi.Fix32)">
            <summary>
            Returns new vector with given value added to the X component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.AddY(Mafi.Fix32)">
            <summary>
            Returns new vector with given value added to the Y component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.AddZ(Mafi.Fix32)">
            <summary>
            Returns new vector with given value added to the Z component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.AddXyz(Mafi.Fix32)">
            <summary>
            Returns new vector with given value added to all components.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.MultiplyX(Mafi.Fix32)">
            <summary>
            Returns new vector with given value multiplied with the X component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.MultiplyY(Mafi.Fix32)">
            <summary>
            Returns new vector with given value multiplied with the Y component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.MultiplyZ(Mafi.Fix32)">
            <summary>
            Returns new vector with given value multiplied with the Z component.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.ReflectX">
            <summary>
            Returns new vector with reflected X component (opposite sign).
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.ReflectY">
            <summary>
            Returns new vector with reflected Y component (opposite sign).
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.ReflectZ">
            <summary>
            Returns new vector with reflected Z component (opposite sign).
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.OfLength(Mafi.Fix32)">
            <summary>
            Returns scaled vector to requested length. This method is faster and more intuitive than normalization
            followed by multiplication.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.IsNear(Mafi.Tile3f,Mafi.Fix32)">
            <summary>
            Tests whether corresponding components of this and given vectors are within tolerance.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.IsNormalized">
            <summary>
            Whether this vector length is (nearly) one using default epsilon <see cref="P:Mafi.Fix32.EpsilonNear"/>. Note that
            This uses efficient check of length squared without the need for square root computation.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.Normalized">
            <summary>
            Returns normalized vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.Dot(Mafi.Tile3f)">
            <summary>
            Returns dot product of this vector with given vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.DistanceTo(Mafi.Tile3f)">
            <summary>
            Returns distance from this vector to the other vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.DistanceSqrTo(Mafi.Tile3f)">
            <summary>
            Returns squared distance from this vector to the other vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.Angle">
            <summary>
            Returns absolute angle of this vector. Returned angle is in range [-τ/2, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.Cross(Mafi.Tile3f)">
            <summary>
            Returns cross product of this vector with given vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.IsParallelTo(Mafi.Tile3f)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel and not anti-parallel.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.IsAntiParallelTo(Mafi.Tile3f)">
            <summary>
            Whether this and <see paramref="other"/> vectors are anti-parallel and not parallel.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.IsParallelOrAntiParallelTo(Mafi.Tile3f)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel or anti-parallel. This is more efficient than
            calling <see paramref="IsParallelTo"/> and <see paramref="IsAntiParallelTo"/>.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.AngleBetween(Mafi.Tile3f)">
            <summary>
            Returns absolute angle between this and <see paramref="other"/> vectors. Returned angle is in range [0, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.AngleTo(Mafi.Tile3f)">
            <summary>
            Signed angle-to is not possible in 3D without some kind of reference vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.RotatedAroundX(Mafi.AngleDegrees1f)">
            <summary>
            Returns this vector rotated around X-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.RotatedAroundY(Mafi.AngleDegrees1f)">
            <summary>
            Returns this vector rotated around Y-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.RotatedAroundZ(Mafi.AngleDegrees1f)">
            <summary>
            Returns this vector rotated around Z-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.rotate2dVector(Mafi.Fix32@,Mafi.Fix32@,Mafi.Rotation90)">
            <summary>
            Helper function that rotates a 2d vector, it gets as first two parameters by given angle.
            (1, 0) when rotated by 90 degrees gives (0, 1)
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.RotatedAroundX(Mafi.Rotation90)">
            <summary>
            Returns this vector rotated around X-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.RotatedAroundY(Mafi.Rotation90)">
            <summary>
            Returns this vector rotated around Y-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.RotatedAroundZ(Mafi.Rotation90)">
            <summary>
            Returns this vector rotated around Z-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.Min(Mafi.Tile3f)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.Max(Mafi.Tile3f)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.MinComponent">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.MaxComponent">
            <summary>
            Returns component-wise max of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.Clamp(Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Returns component-wise clamp of this vectors.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.AbsValue">
            <summary>
            Returns component-wise absolute value of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile3f.Signs">
            <summary>
            Returns component-wise sign of this vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.Modulo(Mafi.Fix32)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.Modulo(Mafi.Tile3f)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.Average(Mafi.Tile3f)">
            <summary>
            Returns component-wise average of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.Lerp(Mafi.Tile3f,Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Linearly interpolates between this and <paramref name="to"/> vectors based on <paramref name="t"/>.
            Interpolation parameter <paramref name="t"/> is expected to be from 0 to 1.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.op_Equality(Mafi.Tile3f,Mafi.Tile3f)">
            <summary>
            Exact equality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.op_Inequality(Mafi.Tile3f,Mafi.Tile3f)">
            <summary>
            Exact inequality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.op_LessThan(Mafi.Tile3f,Mafi.Tile3f)">
            <summary>
            Component-wise less-than operator. Returns true if all components of the left-hand side vector are less than
            respective components of the right-hand side vector.
            WARNING: <c>A &lt; B</c> is not equal to <c>A &gt;= B</c>. For example vectors (1, 2, 3) and (3, 2, 1) are not
            less-than nor greater-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.op_LessThanOrEqual(Mafi.Tile3f,Mafi.Tile3f)">
            <summary>
            Component-wise less-than-or-equal operator. Returns true if all components of the left-hand side vector are
            less than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &lt;= B</c> is not equal to <c>A &gt; B</c>. For example vectors (1, 2, 3) and (3, 2, 1) are not
            less-than-or-equal nor greater-than.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.op_GreaterThan(Mafi.Tile3f,Mafi.Tile3f)">
            <summary>
            Component-wise greater-than operator. Returns true if all components of the left-hand side vector are
            greater than respective components of the right-hand side vector.
            WARNING: <c>A &gt; B</c> is not equal to <c>A &lt;= B</c>. For example vectors (1, 2, 3) and (3, 2, 1) are not
            greater-than nor less-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.Tile3f.op_GreaterThanOrEqual(Mafi.Tile3f,Mafi.Tile3f)">
            <summary>
            Component-wise greater-than-or-equal operator. Returns true if all components of the left-hand side vector
            are greater than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &gt;= B</c> is not equal to <c>A &lt; B</c>. For example vectors (1, 2, 3) and (3, 2, 1) are not
            greater-than-or-equal nor less-than.
            </summary>
        </member>
        <member name="M:Mafi.Tile3fExtensions.NextTile3f(Mafi.IRandom,Mafi.Fix32,Mafi.Fix32)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="M:Mafi.Tile3fExtensions.NextTile3f(Mafi.IRandom,Mafi.Tile3f,Mafi.Tile3f)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="T:Mafi.Tile3i">
            <summary>
            Immutable 3D global tile coordinate that represents index of a 3D terrain tileS.
            </summary>
        </member>
        <member name="F:Mafi.Tile3i.Zero">
            <summary>
            Vector (0, 0, 0).
            </summary>
        </member>
        <member name="F:Mafi.Tile3i.One">
            <summary>
            Vector (1, 1, 1).
            </summary>
        </member>
        <member name="F:Mafi.Tile3i.UnitX">
            <summary>
            Vector (1, 0, 0).
            </summary>
        </member>
        <member name="F:Mafi.Tile3i.UnitY">
            <summary>
            Vector (0, 1, 0).
            </summary>
        </member>
        <member name="F:Mafi.Tile3i.UnitZ">
            <summary>
            Vector (0, 0, 1).
            </summary>
        </member>
        <member name="F:Mafi.Tile3i.MinValue">
            <summary>
            Vector (int.MinValue, int.MinValue, int.MinValue).
            </summary>
        </member>
        <member name="F:Mafi.Tile3i.MaxValue">
            <summary>
            Vector (int.MaxValue, int.MaxValue, int.MaxValue).
            </summary>
        </member>
        <member name="F:Mafi.Tile3i.X">
            <summary>
            The X component of this vector.
            </summary>
        </member>
        <member name="F:Mafi.Tile3i.Y">
            <summary>
            The Y component of this vector.
            </summary>
        </member>
        <member name="F:Mafi.Tile3i.Z">
            <summary>
            The Z component of this vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new Tile3i from raw components.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.#ctor(Mafi.Tile2i,System.Int32)">
            <summary>
            Creates new Tile3i from Tile2i and raw components.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.Xy">
            <summary>
            Gets the first two components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.Vector3i">
            <summary>
            Converts this type to Vector3i.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.Sum">
            <summary>
            Sum of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.Length">
            <summary>
            Euclidean length of this vector.
            PERF: Expensive, uses sqrt. Consider using <see cref="P:Mafi.Tile3i.LengthSqr"/> whenever possible (when comparing
            lengths, etc.).
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.LengthInt">
            <summary>
            Approximate euclidean length of this vector as integer.
            PERF: Expensive, uses sqrt, consider using <see cref="P:Mafi.Tile3i.LengthSqr"/> whenever possible.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.LengthSqrInt">
            <summary>
            Euclidean length squared of this vector.
            PERF: Cheaper than <see cref="P:Mafi.Tile3i.Length"/>, does not require expensive sqrt.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.LengthSqr">
            <summary>
            Euclidean length squared of this vector.
            PERF: Cheaper than <see cref="P:Mafi.Tile3i.Length"/>, does not require expensive sqrt.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.IsZero">
            <summary>
            Whether this vector has all components equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.IsNotZero">
            <summary>e
            Whether this vector has at least one components not equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.SetX(System.Int32)">
            <summary>
            Returns new vector with changed X component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.SetY(System.Int32)">
            <summary>
            Returns new vector with changed Y component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.SetZ(System.Int32)">
            <summary>
            Returns new vector with changed Z component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.SetXy(System.Int32,System.Int32)">
            <summary>
            Returns new vector with changed X and Y components.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.SetXy(Mafi.Tile2i)">
            <summary>
            Returns new vector with changed X and Y components.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.SetXyz(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns new vector with changed X, Y, and Z components.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.IncrementX">
            <summary>
            Returns new vector with incremented X component.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.IncrementY">
            <summary>
            Returns new vector with incremented Y component.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.IncrementZ">
            <summary>
            Returns new vector with incremented Z component.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.DecrementX">
            <summary>
            Returns new vector with decremented X component.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.DecrementY">
            <summary>
            Returns new vector with decremented Y component.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.DecrementZ">
            <summary>
            Returns new vector with decremented Z component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.AddX(System.Int32)">
            <summary>
            Returns new vector with given value added to the X component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.AddY(System.Int32)">
            <summary>
            Returns new vector with given value added to the Y component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.AddZ(System.Int32)">
            <summary>
            Returns new vector with given value added to the Z component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.AddXyz(System.Int32)">
            <summary>
            Returns new vector with given value added to all components.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.MultiplyX(System.Int32)">
            <summary>
            Returns new vector with given value multiplied with the X component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.MultiplyY(System.Int32)">
            <summary>
            Returns new vector with given value multiplied with the Y component.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.MultiplyZ(System.Int32)">
            <summary>
            Returns new vector with given value multiplied with the Z component.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.ReflectX">
            <summary>
            Returns new vector with reflected X component (opposite sign).
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.ReflectY">
            <summary>
            Returns new vector with reflected Y component (opposite sign).
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.ReflectZ">
            <summary>
            Returns new vector with reflected Z component (opposite sign).
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.MulDiv(System.Int64,System.Int64)">
            <summary>
            Multiples and divides all components. This method is using long precision to prevent int32 overflows.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.OfLength(System.Int32)">
            <summary>
            Returns scaled vector to requested length. This method is more precise, faster and more intuitive than
            normalization followed by multiplication.
            WARNING: Setting length of integer vector may not produce exact requested length do to rounding error.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.IsNear(Mafi.Tile3i,System.Int32)">
            <summary>
            Whether corresponding components of this and given vectors are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.Dot(Mafi.Tile3i)">
            <summary>
            Returns dot product of this vector with given vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.DotInt(Mafi.Tile3i)">
            <summary>
            Returns dot product of this vector with given vector as int32. Note that result of this method may overflow
            if magnitude of any component is larger than ~30,000.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.DistanceTo(Mafi.Tile3i)">
            <summary>
            Returns distance from this vector to the other vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.DistanceSqrTo(Mafi.Tile3i)">
            <summary>
            Returns squared distance from this vector to the other vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.Angle">
            <summary>
            Returns absolute angle of this vector. Returned angle is in range [-τ/2, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.Cross(Mafi.Tile3i)">
            <summary>
            Returns cross product of this vector with given vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.IsParallelTo(Mafi.Tile3i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel and not anti-parallel.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.IsAntiParallelTo(Mafi.Tile3i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are anti-parallel and not parallel.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.IsParallelOrAntiParallelTo(Mafi.Tile3i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel or anti-parallel. This is more efficient than
            calling <see paramref="IsParallelTo"/> and <see paramref="IsAntiParallelTo"/>.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.AngleBetween(Mafi.Tile3i)">
            <summary>
            Returns absolute angle between this and <see paramref="other"/> vectors. Returned angle is in range [0, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.AngleTo(Mafi.Tile3i)">
            <summary>
            Signed angle-to is not possible in 3D without some kind of reference vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.RotatedAroundX(Mafi.AngleDegrees1f)">
            <summary>
            Returns this vector rotated around X-axis by given amount.
            WARNING: Please keep in mind that rotating integer vectors may not be precise for vectors with small
            magnitudes due to rounding errors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.RotatedAroundY(Mafi.AngleDegrees1f)">
            <summary>
            Returns this vector rotated around Y-axis by given amount.
            WARNING: Please keep in mind that rotating integer vectors may not be precise for vectors with small
            magnitudes due to rounding errors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.RotatedAroundZ(Mafi.AngleDegrees1f)">
            <summary>
            Returns this vector rotated around Z-axis by given amount.
            WARNING: Please keep in mind that rotating integer vectors may not be precise for vectors with small
            magnitudes due to rounding errors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.rotate2dVector(System.Int32@,System.Int32@,Mafi.Rotation90)">
            <summary>
            Helper function that rotates a 2d vector, it gets as first two parameters by given angle.
            (1, 0) when rotated by 90 degrees gives (0, 1)
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.RotatedAroundX(Mafi.Rotation90)">
            <summary>
            Returns this vector rotated around X-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.RotatedAroundY(Mafi.Rotation90)">
            <summary>
            Returns this vector rotated around Y-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.RotatedAroundZ(Mafi.Rotation90)">
            <summary>
            Returns this vector rotated around Z-axis by given amount.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.Min(Mafi.Tile3i)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.Max(Mafi.Tile3i)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.MinComponent">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.MaxComponent">
            <summary>
            Returns component-wise max of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.Clamp(System.Int32,System.Int32)">
            <summary>
            Returns component-wise clamp of this vectors.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.AbsValue">
            <summary>
            Returns component-wise absolute value of this vector.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.Signs">
            <summary>
            Returns component-wise sign of this vector.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.Modulo(System.Int32)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.Modulo(Mafi.Tile3i)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.Average(Mafi.Tile3i)">
            <summary>
            Returns component-wise average of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.Lerp(Mafi.Tile3i,System.Int64,System.Int64)">
            <summary>
            Linearly interpolates between this and <paramref name="to"/> vectors based on <paramref name="t"/>.
            Interpolation parameter <paramref name="t"/> goes from 0 to <paramref name="scale"/>.
            See <see cref="M:Mafi.MafiMath.Lerp(System.Int32,System.Int32,System.Int64,System.Int64)"/> for details.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.Lerp(Mafi.Tile3i,Mafi.Tile3i,System.Int64,System.Int64)">
            <summary>
            Linearly interpolates between <paramref name="from"/> and <paramref name="to"/> vectors based on <paramref
            name="t"/>. Interpolation parameter <paramref name="t"/> goes from 0 to <paramref name="scale"/>. See <see
            cref="M:Mafi.MafiMath.Lerp(System.Int32,System.Int32,System.Int64,System.Int64)"/> for details.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.op_Equality(Mafi.Tile3i,Mafi.Tile3i)">
            <summary>
            Exact equality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.op_Inequality(Mafi.Tile3i,Mafi.Tile3i)">
            <summary>
            Exact inequality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.op_LessThan(Mafi.Tile3i,Mafi.Tile3i)">
            <summary>
            Component-wise less-than operator. Returns true if all components of the left-hand side vector are less than
            respective components of the right-hand side vector.
            WARNING: <c>A &lt; B</c> is not equal to <c>A &gt;= B</c>. For example vectors (1, 2, 3) and (3, 2, 1) are not
            less-than nor greater-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.op_LessThanOrEqual(Mafi.Tile3i,Mafi.Tile3i)">
            <summary>
            Component-wise less-than-or-equal operator. Returns true if all components of the left-hand side vector are
            less than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &lt;= B</c> is not equal to <c>A &gt; B</c>. For example vectors (1, 2, 3) and (3, 2, 1) are not
            less-than-or-equal nor greater-than.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.op_GreaterThan(Mafi.Tile3i,Mafi.Tile3i)">
            <summary>
            Component-wise greater-than operator. Returns true if all components of the left-hand side vector are
            greater than respective components of the right-hand side vector.
            WARNING: <c>A &gt; B</c> is not equal to <c>A &lt;= B</c>. For example vectors (1, 2, 3) and (3, 2, 1) are not
            greater-than nor less-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.op_GreaterThanOrEqual(Mafi.Tile3i,Mafi.Tile3i)">
            <summary>
            Component-wise greater-than-or-equal operator. Returns true if all components of the left-hand side vector
            are greater than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &gt;= B</c> is not equal to <c>A &lt; B</c>. For example vectors (1, 2, 3) and (3, 2, 1) are not
            greater-than-or-equal nor less-than.
            </summary>
        </member>
        <member name="M:Mafi.Tile3i.FloorDiv(System.Int32)">
            <summary>
            Computes floor division. Unlike normal division operator in C# this always rounds down.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.Height">
            <summary>
            Discrete height.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.Tile2i">
            <summary>
            Gets 2D tile index as X and Y coordinates of this coord.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.ParentChunkCoord">
            <summary>
            Converts this global tile coordinate to integer coordinate of patent chunk.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.CornerTile3f">
            <summary>
            Converts tile coordinate to corner-based Fix32 tile coordinate.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.CenterTile3f">
            <summary>
            Converts tile coordinate to center-based Fix32 tile coordinate.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.CenterXyFloorZTile3f">
            <summary>
            Converts tile coordinate to XY-plane center-based, z corner based Fix32 tile coordinate.
            </summary>
        </member>
        <member name="P:Mafi.Tile3i.TileInChunkCoord">
            <summary>
            Converts this global tile coordinate to integer relative coordinate of this tile within its patent chunk.
            </summary>
        </member>
        <member name="M:Mafi.Tile3iExtensions.NextTile3i(Mafi.IRandom,System.Int32,System.Int32)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="M:Mafi.Tile3iExtensions.NextTile3i(Mafi.IRandom,Mafi.Tile3i,Mafi.Tile3i)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="T:Mafi.TileInChunk2i">
            <summary>
            Immutable 2D local tile coordinate representing local position within its parent chunk.
            TODO: Make this backed by int or short.
            </summary>
        </member>
        <member name="F:Mafi.TileInChunk2i.Zero">
            <summary>
            Vector (0, 0).
            </summary>
        </member>
        <member name="F:Mafi.TileInChunk2i.One">
            <summary>
            Vector (1, 1).
            </summary>
        </member>
        <member name="F:Mafi.TileInChunk2i.UnitX">
            <summary>
            Vector (1, 0).
            </summary>
        </member>
        <member name="F:Mafi.TileInChunk2i.UnitY">
            <summary>
            Vector (0, 1).
            </summary>
        </member>
        <member name="F:Mafi.TileInChunk2i.X">
            <summary>
            The X component of this vector.
            </summary>
        </member>
        <member name="F:Mafi.TileInChunk2i.Y">
            <summary>
            The Y component of this vector.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.Vector2i">
            <summary>
            Converts this type to Vector2i.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.Sum">
            <summary>
            Sum of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.Product">
            <summary>
            Product of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.ProductInt">
            <summary>
            Product of all components of this vector.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.Length">
            <summary>
            Euclidean length of this vector.
            PERF: Expensive, uses sqrt. Consider using <see cref="P:Mafi.TileInChunk2i.LengthSqr"/> whenever possible (when comparing
            lengths, etc.).
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.LengthInt">
            <summary>
            Approximate euclidean length of this vector as integer.
            PERF: Expensive, uses sqrt, consider using <see cref="P:Mafi.TileInChunk2i.LengthSqr"/> whenever possible.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.LengthSqrInt">
            <summary>
            Euclidean length squared of this vector.
            PERF: Cheaper than <see cref="P:Mafi.TileInChunk2i.Length"/>, does not require expensive sqrt.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.LengthSqr">
            <summary>
            Euclidean length squared of this vector.
            PERF: Cheaper than <see cref="P:Mafi.TileInChunk2i.Length"/>, does not require expensive sqrt.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.IsZero">
            <summary>
            Whether this vector has all components equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.IsNotZero">
            <summary>e
            Whether this vector has at least one components not equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.SetX(System.Int32)">
            <summary>
            Returns new vector with changed X component.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.SetY(System.Int32)">
            <summary>
            Returns new vector with changed Y component.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.IncrementX">
            <summary>
            Returns new vector with incremented X component.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.IncrementY">
            <summary>
            Returns new vector with incremented Y component.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.DecrementX">
            <summary>
            Returns new vector with decremented X component.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.DecrementY">
            <summary>
            Returns new vector with decremented Y component.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.AddX(System.Int32)">
            <summary>
            Returns new vector with given value added to the X component.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.AddY(System.Int32)">
            <summary>
            Returns new vector with given value added to the Y component.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.AddXy(System.Int32)">
            <summary>
            Returns new vector with given value added to all components.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.MultiplyX(System.Int32)">
            <summary>
            Returns new vector with given value multiplied with the X component.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.MultiplyY(System.Int32)">
            <summary>
            Returns new vector with given value multiplied with the Y component.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.ReflectX">
            <summary>
            Returns new vector with reflected X component (opposite sign).
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.ReflectY">
            <summary>
            Returns new vector with reflected Y component (opposite sign).
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.MulDiv(System.Int64,System.Int64)">
            <summary>
            Multiples and divides all components. This method is using long precision to prevent int32 overflows.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.OfLength(System.Int32)">
            <summary>
            Returns scaled vector to requested length. This method is more precise, faster and more intuitive than
            normalization followed by multiplication.
            WARNING: Setting length of integer vector may not produce exact requested length do to rounding error.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.IsNear(Mafi.TileInChunk2i,System.Int32)">
            <summary>
            Whether corresponding components of this and given vectors are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.Dot(Mafi.TileInChunk2i)">
            <summary>
            Returns dot product of this vector with given vector.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.DotInt(Mafi.TileInChunk2i)">
            <summary>
            Returns dot product of this vector with given vector as int32. Note that result of this method may overflow
            if magnitude of any component is larger than ~30,000.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.DistanceTo(Mafi.TileInChunk2i)">
            <summary>
            Returns distance from this vector to the other vector.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.DistanceSqrTo(Mafi.TileInChunk2i)">
            <summary>
            Returns squared distance from this vector to the other vector.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.Angle">
            <summary>
            Returns absolute angle of this vector. Returned angle is in range [-τ/2, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.PseudoCross(Mafi.TileInChunk2i)">
            <summary>
            Returns pseudo-cross product of this vector with <paramref name="other"/> vector. That is, Z component of 3D
            cross product between the two vectors with Z equal to 0.
            </summary>
            <remarks>
            This operation is very efficient and has following properties:
            * v1.PseudoCross(v2) = |v1| |v2| sin(θ) where θ is signed angle from v1 to v2 ( <c>v1.AngleTo(v2)</c>).
            * Returns 0 for parallel (or anti-parallel) vectors.
            * Returns positive values when v2 is to the left of v1.
            * Returns negative values when v2 is to the right of v1.
            </remarks>
        </member>
        <member name="M:Mafi.TileInChunk2i.Rotate(Mafi.AngleDegrees1f)">
            <summary>
            Returns rotated vector by given angle. Positive angle values represent in counter-clockwise rotation. This
            means that <c>(1, 0).Rotate(90°) == (0, 1)</c>.
            WARNING: Please keep in mind that rotating integer vectors may not be precise for vectors with small
            magnitudes due to rounding errors.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.Rotate(Mafi.Rotation90)">
            <summary>
            Returns rotated vector by given angle. Positive angle values represent in counter-clockwise rotation. This
            means that <c>(1, 0).Rotate(90°) == (0, 1)</c>.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.AngleTo(Mafi.TileInChunk2i)">
            <summary>
            Returns signed angle from this vector to <paramref name="other"/> vector. Returned angle represents how much
            this vector has to be rotated to obtain <paramref name="other"/> vector. Returned value is [-τ/2, τ/2). This
            means that <c>v1.AngleTo(v2) == -v2.AngleTo(v1)</c> and <c>v1.Rotate(v1.AngleTo(v2)) == v2</c>.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.AngleBetween(Mafi.TileInChunk2i)">
            <summary>
            Returns absolute angle between this and <see paramref="other"/> vectors. Returned angle is in range [0, τ/2].
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.IsParallelTo(Mafi.TileInChunk2i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel and not anti-parallel.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.IsAntiParallelTo(Mafi.TileInChunk2i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are anti-parallel and not parallel.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.IsParallelOrAntiParallelTo(Mafi.TileInChunk2i)">
            <summary>
            Whether this and <see paramref="other"/> vectors are parallel or anti-parallel. This is more efficient than
            calling <see paramref="IsParallelTo"/> and <see paramref="IsAntiParallelTo"/>.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.LeftOrthogonalVector">
            <summary>
            Returns this vector rotated by 90 degrees to the left (counter clockwise).
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.RightOrthogonalVector">
            <summary>
            Returns this vector rotated by 90 degrees to the right (clockwise).
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.Min(Mafi.TileInChunk2i)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.Max(Mafi.TileInChunk2i)">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.MinComponent">
            <summary>
            Returns component-wise min of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.MaxComponent">
            <summary>
            Returns component-wise max of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.Clamp(System.Int32,System.Int32)">
            <summary>
            Returns component-wise clamp of this vectors.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.AbsValue">
            <summary>
            Returns component-wise absolute value of this vector.
            </summary>
        </member>
        <member name="P:Mafi.TileInChunk2i.Signs">
            <summary>
            Returns component-wise sign of this vector.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.Modulo(System.Int32)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.Modulo(Mafi.TileInChunk2i)">
            <summary>
            Returns component-wise modulo operation on this vector (see <see cref="M:Mafi.MafiMath.Modulo(System.Int32,System.Int32)"/>).
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.Average(Mafi.TileInChunk2i)">
            <summary>
            Returns component-wise average of this and given vectors.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.Lerp(Mafi.TileInChunk2i,System.Int64,System.Int64)">
            <summary>
            Linearly interpolates between this and <paramref name="to"/> vectors based on <paramref name="t"/>.
            Interpolation parameter <paramref name="t"/> goes from 0 to <paramref name="scale"/>.
            See <see cref="M:Mafi.MafiMath.Lerp(System.Int32,System.Int32,System.Int64,System.Int64)"/> for details.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.Lerp(Mafi.TileInChunk2i,Mafi.TileInChunk2i,System.Int64,System.Int64)">
            <summary>
            Linearly interpolates between <paramref name="from"/> and <paramref name="to"/> vectors based on <paramref
            name="t"/>. Interpolation parameter <paramref name="t"/> goes from 0 to <paramref name="scale"/>. See <see
            cref="M:Mafi.MafiMath.Lerp(System.Int32,System.Int32,System.Int64,System.Int64)"/> for details.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.op_Equality(Mafi.TileInChunk2i,Mafi.TileInChunk2i)">
            <summary>
            Exact equality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.op_Inequality(Mafi.TileInChunk2i,Mafi.TileInChunk2i)">
            <summary>
            Exact inequality of two vectors.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.op_LessThan(Mafi.TileInChunk2i,Mafi.TileInChunk2i)">
            <summary>
            Component-wise less-than operator. Returns true if all components of the left-hand side vector are less than
            respective components of the right-hand side vector.
            WARNING: <c>A &lt; B</c> is not equal to <c>A &gt;= B</c>. For example vectors (1, 2) and (2, 1) are not
            less-than nor greater-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.op_LessThanOrEqual(Mafi.TileInChunk2i,Mafi.TileInChunk2i)">
            <summary>
            Component-wise less-than-or-equal operator. Returns true if all components of the left-hand side vector are
            less than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &lt;= B</c> is not equal to <c>A &gt; B</c>. For example vectors (1, 2) and (2, 1) are not
            less-than-or-equal nor greater-than.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.op_GreaterThan(Mafi.TileInChunk2i,Mafi.TileInChunk2i)">
            <summary>
            Component-wise greater-than operator. Returns true if all components of the left-hand side vector are
            greater than respective components of the right-hand side vector.
            WARNING: <c>A &gt; B</c> is not equal to <c>A &lt;= B</c>. For example vectors (1, 2) and (2, 1) are not
            greater-than nor less-than-or-equal.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.op_GreaterThanOrEqual(Mafi.TileInChunk2i,Mafi.TileInChunk2i)">
            <summary>
            Component-wise greater-than-or-equal operator. Returns true if all components of the left-hand side vector
            are greater than or equal to respective components of the right-hand side vector.
            WARNING: <c>A &gt;= B</c> is not equal to <c>A &lt; B</c>. For example vectors (1, 2) and (2, 1) are not
            greater-than-or-equal nor less-than.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.FloorDiv(System.Int32)">
            <summary>
            Computes floor division. Unlike normal division operator in C# this always rounds down.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates new TileInChunk2i from raw components.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.FromMinusX(System.Int32,System.Int32)">
            <summary>
            Returns tile coordinate measured from minus-x and plus-y corner of its chunk.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.FromMinusY(System.Int32,System.Int32)">
            <summary>
            Returns tile coordinate measured from plus-x and minus-y corner of its chunk.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.FromMinusXy(System.Int32,System.Int32)">
            <summary>
            Returns tile coordinate measured from minus-x and minus-y corner of its chunk.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2i.FromChunkLocalIndex(System.Int32)">
            <summary>
            Returns tile coordinate measured from minus-x and minus-y corner of its chunk.
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2iExtensions.NextTileInChunk2i(Mafi.IRandom,System.Int32,System.Int32)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="M:Mafi.TileInChunk2iExtensions.NextTileInChunk2i(Mafi.IRandom,Mafi.TileInChunk2i,Mafi.TileInChunk2i)">
            <summary>
            Returns a vector where each component is pseudo-random uniformly distributed value between
            <paramref name="minValueIncl"/> (inclusive) and <paramref name="maxValueExcl"/> (exclusive).
            </summary>
        </member>
        <member name="P:Mafi.Upoints.Abs">
            <summary>
            Returns absolute value of this value.
            </summary>
        </member>
        <member name="P:Mafi.Upoints.Sign">
            <summary>
            Returns sign of this value.
            </summary>
        </member>
        <member name="M:Mafi.Upoints.Min(Mafi.Upoints)">
            <summary>
            Returns minimum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.Upoints.Max(Mafi.Upoints)">
            <summary>
            Returns maximum of this and given values.
            </summary>
        </member>
        <member name="M:Mafi.Upoints.Clamp(Mafi.Upoints,Mafi.Upoints)">
            <summary>
            Clamps this value to given minimum and maximum.
            </summary>
        </member>
        <member name="P:Mafi.Upoints.IsZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Upoints.IsNotZero">
            <summary>
            Whether this value is equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Upoints.IsPositive">
            <summary>
            Whether this value is greater than zero.
            </summary>
        </member>
        <member name="P:Mafi.Upoints.IsNotPositive">
            <summary>
            Whether this value is less or equal to zero.
            </summary>
        </member>
        <member name="P:Mafi.Upoints.IsNegative">
            <summary>
            Whether this value is less than zero.
            </summary>
        </member>
        <member name="P:Mafi.Upoints.IsNotNegative">
            <summary>
            Whether this value is greater or equal to zero.
            </summary>
        </member>
        <member name="M:Mafi.Upoints.IsNear(Mafi.Upoints)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.Upoints.IsNear(Mafi.Upoints,Mafi.Upoints)">
            <summary>
            Whether this and given values are within given tolerance.
            </summary>
        </member>
        <member name="M:Mafi.Upoints.Average(Mafi.Upoints)">
            <summary>
            Returns average of this and given value.
            </summary>
        </member>
        <member name="P:Mafi.Upoints.Squared">
            <summary>
            Returns squared value.
            </summary>
        </member>
        <member name="M:Mafi.ProductExtensions.WithQuantity(Mafi.Core.Products.ProductProto,Mafi.Quantity)">
            <summary>
            See also <see cref="M:Mafi.QuantityExtensions.Of(System.Int32,Mafi.Core.Products.ProductProto)"/> which is even shorter.
            </summary>
        </member>
        <member name="T:Mafi.DebugGameRendererRegistrator">
            <summary>
            Adds resolver to static debug game drawer so that its usage is easy and does not need resolver.
            </summary>
        </member>
        <member name="P:Mafi.DebugGameRenderer.ImagesSaved">
            <summary>
            Number of images saved, even when it is disabled. This is to detect forgotten renders in tests.
            </summary>
        </member>
        <member name="M:Mafi.DebugGameMapDrawing.getPixelCoord(Mafi.Tile2f)">
            <summary>
            Returns a pixel coord without padding.
            </summary>
        </member>
        <member name="M:Mafi.DebugGameMapDrawing.HighlightTiles(System.Collections.Generic.IEnumerable{Mafi.Tile2i},Mafi.ColorRgba)">
            <summary>
            Draws a square around all given tiles.
            </summary>
        </member>
        <member name="T:Mafi.DebugGameRendererConfig">
            <summary>
            Common place for various debug game rendering settings to make them discoverable and easy to use during
            debugging. Note that these settings are only effective when <see cref="P:Mafi.DebugGameRenderer.IsEnabled"/> is true.
            </summary>
        </member>
    </members>
</doc>
